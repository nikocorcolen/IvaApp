<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentPro.Mail.Android</name>
    </assembly>
    <members>
        <member name="T:ComponentPro.Net.Mail.Folder">
            <summary>
            Represents a mailbox of the account on the mail server.
            </summary>
            <remarks>
            The list of mailboxes can be obtained using <see cref="O:ComponentPro.Net.Mail.Imap.ListFolders"/> method of <see cref="T:ComponentPro.Net.Mail.Imap"/> class. In any case, an account on the mail server is guaranteed to contain at least "INBOX" mailbox (case-insensitive). Also, IMAP4 accounts often contain mailboxes such as "Sent", "Drafts", etc.
            </remarks>
            <example source="$ComponentPro.Mail\Imap/ListFolders"/>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.PermanentFlags">
            <summary>
            Gets message flags that can be changed permanently.
            </summary>
            <value>Message flags that can be changed permanently.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.SupportedFlags">
            <summary>
            Gets supported message flags.
            </summary>
            <value>Supported message flags.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.ReadOnly">
            <summary>
            Gets a value indicating whether the folder is read-only.
            </summary>
            <value>A value indicating whether the folder is read-only.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.HasNewMessages">
            <summary>
            Gets a value indicating whether this folder contains messages
            that have been added since the last time the folder was selected.
            </summary>
            <value>Value indicating whether this folder contains any new messages.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.Selectable">
            <summary>
            Gets a value indicating whether it is possible to select this folder.
            </summary>
            <value>A value indicating whether it is possible to select this folder.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.SublevelsAllowed">
            <summary>
            Gets a value indicating whether any subfolders can exist
            under this folder. This value is only set for <see cref="T:ComponentPro.Net.Mail.Folder">folders</see>
            returned by a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders"/> methods.
            </summary>
            <value>Value indicating whether any child folders can exist under this folder.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.TotalMessages">
            <summary>
            Gets the number of messages in the folder.
            </summary>
            <value>Number of messages in the folder.</value>
            <remarks>
            This property is not set for <see cref="T:ComponentPro.Net.Mail.Folder">folders</see>
            returned by a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders"/> methods
            and will contain a value of 0.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.RecentMessages">
            <summary>
            Gets the number of messages that arrived recently.
            This property is not set for <see cref="T:ComponentPro.Net.Mail.Folder">folders</see>
            returned by a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders"/> methods
            and will contain a value of 0.
            </summary>
            <value>Number of messages that arrived recently.</value>
            <remarks>
            If multiple sessions are accessing the mailbox simultaneously,
            only one of them will be informed about each recently arrived messages.
            Also, the only reliable way to identify the recent messages is to look
            at the message flags or to do a <see cref="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapCriterion[])">search</see> for them.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.NewUnseenMessages">
            <summary>
            Gets the number of messages that have not been read.
            This property is not set for <see cref="T:ComponentPro.Net.Mail.Folder">folders</see>
            returned by a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders"/> 
            and <see cref="M:ComponentPro.Net.Mail.Imap.GetFolderInfo(System.String)"/> methods and will contain a value of 0.
            </summary>
            <value>Sequence number of the first message that has not been read.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.NotSeenMessages">
            <summary>
            Gets the number of messages that have not been read.
            This property is not set for <see cref="T:ComponentPro.Net.Mail.Folder">folders</see>
            returned by a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders"/> methods
            and will contain a value of 0.
            </summary>
            <value>Number of messages that have not been read.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.UidNext">
            <summary>
            Gets the unique ID to be assigned to a next message that arrives into this folder.
            This property is not set for <see cref="T:ComponentPro.Net.Mail.Folder">folders</see>
            returned by a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders"/> methods
            and will contain a value of 0. Also, some servers don't support this,
            and null (Nothing in Visual Basic) will be returned for these as well.
            </summary>
            <value>Unique ID of the next message.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.UidValidity">
            <summary>
            Gets the validity ID of the mailbox.
            This property is not set for <see cref="T:ComponentPro.Net.Mail.Folder">folders</see>
            returned by a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders"/> methods
            and will contain a value of 0.
            </summary>
            <value>The validity ID of the mailbox.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.Name">
            <summary>
            Gets the name of the folder.
            </summary>
            <value>Name of the folder.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.ShortName">
            <summary>
            Gets the short name of the mailbox.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.LevelsDelimiter">
            <summary>
            Gets a string that is used to delimit levels of hieararchy under
            this folder. It usually contains either '/' or '.'.
            This value is only set for <see cref="T:ComponentPro.Net.Mail.Folder">folders</see>
            returned by a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders"/> methods.
            For <see cref="M:ComponentPro.Net.Mail.Imap.GetFolderInfo(System.String)"/> method and <see cref="P:ComponentPro.Net.Mail.Imap.WorkingFolder"/>
            property, this will throw an exception.
            </summary>
            <value>Hierarchy delimiter.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.KnownPurpose">
            <summary>
            This property is deprecated, new implementations should use the <see cref="P:ComponentPro.Net.Mail.Folder.Purpose"/> property instead.
            Returns folder purpose if known. This property only contains useful information if
            the IMAP server supports the XLIST command or extended LIST command (RFC 6154) and the folder list was returned using the <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders"/> method.
            At the moment, this is not suppored in <see cref="O:ComponentPro.Net.Mail.Imap.ListFolders">listing mailboxes</see> with subscribed mode.
            </summary>
            <value>Folder purpose.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Folder.Purpose">
            <summary>
            Returns folder purpose if known. This property only contains useful information if
            the IMAP server supports the XLIST command or extended LIST command (RFC 6154) and the folder list was returned using the <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders"/> method.
            At the moment, this is not suppored in subscribed mode.
            </summary>
            <value>Folder purpose.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.FolderCollection">
            <summary>
            Provides a container for a collection of <see cref="T:ComponentPro.Net.Mail.Folder"/> objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.FolderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.FolderCollection"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.FolderCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:ComponentPro.Net.Mail.FolderCollection"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:ComponentPro.Net.Mail.FolderCollection"/>.</returns>
            <remarks>
            A shallow copy of a collection copies only the elements
            of the collection, whether they are reference types or value
            types, but it does not copy the objects that the references
            refer to. The references in the new collection point to the same
            objects that the references in the original collection point to.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.FolderCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ComponentPro.Net.Mail.FolderCollection"/>
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>.</returns>
            <remarks>GetEnumerator is the method that implements the foreach statement (For Each in Visual Basic). You should not need to call this method directly.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.FolderCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:ComponentPro.Net.Mail.FolderCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.FolderCollection.Add(ComponentPro.Net.Mail.Folder)">
            <summary>
            Adds the <see cref="T:ComponentPro.Net.Mail.Folder"/> to the <see cref="T:ComponentPro.Net.Mail.FolderCollection"/>.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.Net.Mail.Folder"/> to be added to the <see cref="T:ComponentPro.Net.Mail.FolderCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.FolderCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:ComponentPro.Net.Mail.Folder"/> at the specified index from the <see cref="T:ComponentPro.Net.Mail.FolderCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.Net.Mail.Folder"/> to remove.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.FolderCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ComponentPro.Net.Mail.FolderCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:ComponentPro.Net.Mail.FolderCollection"/>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.FolderCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:ComponentPro.Net.Mail.FolderCollection"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:ComponentPro.Net.Mail.FolderCollection"/>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.FolderCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.Mail.Folder"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.Net.Mail.Folder"/> to get.</param>
            <value><see cref="T:ComponentPro.Net.Mail.Folder"/> of the specified index.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.Imap">
            <summary>
            Provides members for connecting to an IMAP4 server, searching, downloading, uploading e-mail messages. In addition to managing e-mail messages, it also allows you to manage IMAP mailbox easily.
            </summary>
            <example source="$ComponentPro.Mail/Imap/Connect"/>
        </member>
        <member name="F:ComponentPro.Net.Mail.Imap.DefaultPort">
            <summary>
            Default IMAP port (143).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Imap.DefaultImplicitSslPort">
            <summary>
            Default IMAP/Implicit SSL port (993).
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ComponentPro.Net.Mail.Imap"/>
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnAuthenticateCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.AuthenticateCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.AuthenticateAsync(ComponentPro.Net.Mail.ImapAuthenticationMethod,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the remote IMAP server using the specified authentication method that does not require credentials. 
            Only NTLM, GSSAPI and External methods are supported.
            </summary>
            <param name="authenticationMethod">The IMAP authentication method.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.AuthenticateAsync(ComponentPro.Net.Mail.ImapAuthenticationMethod,System.Object)">
            <summary>
            Asynchronously authenticates the user to the remote IMAP server using the specified authentication method that does not require credentials. 
            Only NTLM, GSSAPI and External methods are supported.
            </summary>
            <param name="authenticationMethod">The IMAP authentication method.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.AuthenticateAsync(ComponentPro.Net.Mail.ImapAuthenticationMethod)">
            <summary>
            Asynchronously authenticates the user to the remote IMAP server using the specified authentication method that does not require credentials. 
            Only NTLM, GSSAPI and External methods are supported.
            </summary>
            <param name="authenticationMethod">The IMAP authentication method.</param>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.AuthenticateAsync(System.String,ComponentPro.Net.Mail.ImapAuthenticationMethod,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the IMAP server using an OAuth token.
            </summary>
            <param name="token">The authentication token.</param>
            <param name="authenticationMethod">The IMAP authentication method.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.AuthenticateAsync(System.String,ComponentPro.Net.Mail.ImapAuthenticationMethod,System.Object)">
            <summary>
            Asynchronously authenticates the user to the IMAP server using an OAuth token.
            </summary>
            <param name="token">The authentication token.</param>
            <param name="authenticationMethod">The IMAP authentication method.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.AuthenticateAsync(System.String,ComponentPro.Net.Mail.ImapAuthenticationMethod)">
            <summary>
            Asynchronously authenticates the user to the IMAP server using an OAuth token.
            </summary>
            <param name="token">The authentication token.</param>
            <param name="authenticationMethod">The IMAP authentication method.</param>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.AuthenticateAsync(System.String,System.String,ComponentPro.Net.Mail.ImapAuthenticationMethod,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the specified user to the remote IMAP server with the specified credentials using the specified authentication method.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="authenticationMethod">The IMAP authentication method.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.AuthenticateAsync(System.String,System.String,ComponentPro.Net.Mail.ImapAuthenticationMethod,System.Object)">
            <summary>
            Asynchronously authenticates the specified user to the remote IMAP server with the specified credentials using the specified authentication method.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="authenticationMethod">The IMAP authentication method.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.AuthenticateAsync(System.String,System.String,ComponentPro.Net.Mail.ImapAuthenticationMethod)">
            <summary>
            Asynchronously authenticates the specified user to the remote IMAP server with the specified credentials using the specified authentication method.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="authenticationMethod">The IMAP authentication method.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.AuthenticateAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the specified user to the remote IMAP server with the specified credentials.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.AuthenticateAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously authenticates the specified user to the remote IMAP server with the specified credentials.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.AuthenticateAsync(System.String,System.String)">
            <summary>
            Asynchronously authenticates the specified user to the remote IMAP server with the specified credentials.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnConnectCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.ConnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ConnectAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously connects to an IMAP4 server on the standard IMAP4 port (143).
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ConnectAsync(System.String,System.Object)">
            <summary>
            Asynchronously connects to an IMAP4 server on the standard IMAP4 port (143).
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ConnectAsync(System.String)">
            <summary>
            Asynchronously connects to an IMAP4 server on the standard IMAP4 port (143).
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ConnectAsync(System.String,System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously connects to the IMAP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. The standard IMAP4 port is 143. For TLS/SSL connections, dedicated port is 993.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>
            Asynchronously connects to the IMAP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. The standard IMAP4 port is 143. For TLS/SSL connections, dedicated port is 993.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ConnectAsync(System.String,System.Int32)">
            <summary>
            Asynchronously connects to the IMAP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. The standard IMAP4 port is 143. For TLS/SSL connections, dedicated port is 993.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ConnectAsync(System.String,System.Int32,ComponentPro.Net.SecurityMode,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronous connects to the TLS/SSL IMAP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. The standard IMAP4 port is 143. For TLS/SSL connections, dedicated port is 993.</param>
            <param name="security">The security mode.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ConnectAsync(System.String,System.Int32,ComponentPro.Net.SecurityMode,System.Object)">
            <summary>
            Asynchronous connects to the TLS/SSL IMAP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. The standard IMAP4 port is 143. For TLS/SSL connections, dedicated port is 993.</param>
            <param name="security">The security mode.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ConnectAsync(System.String,System.Int32,ComponentPro.Net.SecurityMode)">
            <summary>
            Asynchronous connects to the TLS/SSL IMAP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. The standard IMAP4 port is 143. For TLS/SSL connections, dedicated port is 993.</param>
            <param name="security">The security mode.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ConnectAsync(System.String,ComponentPro.Net.SecurityMode,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously connects to the IMAP server. Use a port corresponding to the specified security mode.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="security">The security type.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ConnectAsync(System.String,ComponentPro.Net.SecurityMode,System.Object)">
            <summary>
            Asynchronously connects to the IMAP server. Use a port corresponding to the specified security mode.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="security">The security type.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ConnectAsync(System.String,ComponentPro.Net.SecurityMode)">
            <summary>
            Asynchronously connects to the IMAP server. Use a port corresponding to the specified security mode.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="security">The security type.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnDisconnectCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.DisconnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DisconnectAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously disconnects from the IMAP server and returns exit message from the server.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DisconnectAsync(System.Object)">
            <summary>
            Asynchronously disconnects from the IMAP server and returns exit message from the server.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DisconnectAsync">
            <summary>
            Asynchronously disconnects from the IMAP server and returns exit message from the server.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnUpgradeConnectionCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.UpgradeConnectionCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UpgradeConnectionAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously secures the connection with TLS/SSL using default parameters.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UpgradeConnectionAsync(System.Object)">
            <summary>
            Asynchronously secures the connection with TLS/SSL using default parameters.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UpgradeConnectionAsync">
            <summary>
            Asynchronously secures the connection with TLS/SSL using default parameters.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnReadResponseCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.ImapResponse})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.ReadResponseCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ReadResponseAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapResponse},System.Object)">
            <summary>
            Asynchronously returns the response of the IMAP server to the command.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Imap\Async\SendCommand_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ReadResponseAsync(System.Object)">
            <summary>
            Asynchronously returns the response of the IMAP server to the command.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Imap\Async\SendCommand_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ReadResponseAsync">
            <summary>
            Asynchronously returns the response of the IMAP server to the command.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Imap\Async\SendCommand_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnSendCommandCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.SendCommandCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SendCommandAsync(System.String,System.Object[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously executes a command on the IMAP server.
            </summary>
            <param name="command">The command to send to the IMAP server (eg. "CAPABILITY").</param>
            <param name="parameters">List of parameters. Allowed types are String and a byte array.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Imap\Async\SendCommand_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SendCommandAsync(System.String,System.Object[],System.Object)">
            <summary>
            Asynchronously executes a command on the IMAP server.
            </summary>
            <param name="command">The command to send to the IMAP server (eg. "CAPABILITY").</param>
            <param name="parameters">List of parameters. Allowed types are String and a byte array.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Imap\Async\SendCommand_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SendCommandAsync(System.String,System.Object[])">
            <summary>
            Asynchronously executes a command on the IMAP server.
            </summary>
            <param name="command">The command to send to the IMAP server (eg. "CAPABILITY").</param>
            <param name="parameters">List of parameters. Allowed types are String and a byte array.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Imap\Async\SendCommand_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnCheckForUpdatesCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Boolean})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.CheckForUpdatesCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CheckForUpdatesAsync(System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Boolean},System.Object)">
            <summary>
            Asynchronously sends NOOP or IDLE command to the server and checks for IMAP server notifications in the specified amount of time.
            </summary>
            <param name="duration">Duration of the idle interval, in miliseconds.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Noop_TaskAsync, $ComponentPro.Mail\Imap\Async\Noop_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CheckForUpdatesAsync(System.Int32,System.Object)">
            <summary>
            Asynchronously sends NOOP or IDLE command to the server and checks for IMAP server notifications in the specified amount of time.
            </summary>
            <param name="duration">Duration of the idle interval, in miliseconds.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Noop_TaskAsync, $ComponentPro.Mail\Imap\Async\Noop_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CheckForUpdatesAsync(System.Int32)">
            <summary>
            Asynchronously sends NOOP or IDLE command to the server and checks for IMAP server notifications in the specified amount of time.
            </summary>
            <param name="duration">Duration of the idle interval, in miliseconds.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Noop_TaskAsync, $ComponentPro.Mail\Imap\Async\Noop_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CheckForUpdatesAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.Boolean},System.Object)">
            <summary>
            Asynchronously sends NOOP or IDLE command to the server and checks for IMAP server notifications.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Noop_TaskAsync, $ComponentPro.Mail\Imap\Async\Noop_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CheckForUpdatesAsync(System.Object)">
            <summary>
            Asynchronously sends NOOP or IDLE command to the server and checks for IMAP server notifications.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Noop_TaskAsync, $ComponentPro.Mail\Imap\Async\Noop_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CheckForUpdatesAsync">
            <summary>
            Asynchronously sends NOOP or IDLE command to the server and checks for IMAP server notifications.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Noop_TaskAsync, $ComponentPro.Mail\Imap\Async\Noop_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Purge(ComponentPro.Net.Mail.ImapMessageSet)">
            <summary>
            Permanently removes all the messages marked as deleted in the specified list from the currently selected mailbox.
            </summary>
            <remarks>
            To mark messages as deleted, use <see cref="O:ComponentPro.Net.Mail.Imap.DeleteMessage"/> methods.
            Messages not marked as deleted in the list are not to be deleted.
            Only supported by servers that support the UIDPLUS extension. 
            </remarks>
            <param name="messageSet">A set of unique id of messages marked as deleted to purge.</param>
            <seealso cref="M:ComponentPro.Net.Mail.Imap.Select(System.String)"/> 
            <seealso cref="M:ComponentPro.Net.Mail.Imap.Deselect(System.Boolean)"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Purge">
            <summary>
            Permanently removes all the messages marked as deleted from the currently selected mailbox.
            </summary>
            <remarks>
            To mark messages as deleted, use <see cref="O:ComponentPro.Net.Mail.Imap.DeleteMessage"/> methods.
            </remarks>
            <seealso cref="M:ComponentPro.Net.Mail.Imap.Select(System.String)"/> 
            <seealso cref="M:ComponentPro.Net.Mail.Imap.Deselect(System.Boolean)"/>
            <example source="$ComponentPro.Mail\Imap/Purge"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Flag(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])">
            <summary>
            Modifies the flags of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A message set containing ordinal message numbers or UIDs.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <param name="keywords">Keywords to add, remove or set.</param>
            <remarks>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/Flag"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Flag(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Modifies the flags of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <remarks>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/Flag"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Flag(System.Int32,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Modifies the flags of a message with the specified sequence number.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <remarks>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/Flag"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Flag(System.String,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Modifies the flags of a message with the specified unique ID.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <remarks>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/Flag"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Flag(System.Int32,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])">
            <summary>
            Modifies the flags of a message with the specified sequence number.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <param name="keywords">Keywords to add, remove or set.</param>
            <remarks>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/Flag"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Flag(System.String,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])">
            <summary>
            Modifies the flags of a message with the specified unique ID.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <param name="keywords">Keywords to add, remove or set.</param>
            <remarks>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/Flag"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteMessage(ComponentPro.Net.Mail.ImapMessageSet)">
            <summary>
            Marks the specified messages in the currently selected mailbox as deleted. To permanently delete messages, use the method <see cref="O:ComponentPro.Net.Mail.Imap.Purge" />.
            </summary>
            <param name="messageSet">The message set.</param>
            <remarks>
            <p>
            Call the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method to permanently remove the messages marked as deleted.
            </p>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\DeleteMessageIdSet"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteMessage(System.Int32)">
            <summary>
            Marks a message with the specified sequence number as deleted. To permanently delete messages, use the method <see cref="O:ComponentPro.Net.Mail.Imap.Purge" />.
            </summary>
            <param name="messageInboxIndex">The message inbox index number.</param>
            <remarks>
            <p>
            Call the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method to permanently remove the messages marked as deleted.
            </p>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\DeleteMessageSeq"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteMessage(System.String)">
            <summary>
            Marks a message with the specified unique ID as deleted. To permanently delete messages, use the method <see cref="O:ComponentPro.Net.Mail.Imap.Purge" />.
            </summary>
            <param name="uniqueId">The message unique ID.</param>
            <remarks>
            <p>
            Call the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method to permanently remove the messages marked as deleted.
            </p>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\DeleteMessageUid"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessage(System.Int32)">
            <summary>
            Marks a message with the specified sequence number as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="messageInboxIndex">The sequence number of the message in the currently selected mailbox.</param>
            <remarks>
            <p>
            Both messages <see cref="O:ComponentPro.Net.Mail.Imap.DeleteMessage">deleted</see> by this session and other sessions are undeleted.
            </p>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\UndeleteMessageSeq"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessage(System.String)">
            <summary>
            Marks a message with the specified unique ID as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="uniqueId">The unique id of the message in the currently selected mailbox.</param>
            <remarks>
            <p>
            Both messages <see cref="O:ComponentPro.Net.Mail.Imap.DeleteMessage">deleted</see> by this session and other sessions are undeleted.
            </p>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\UndeleteMessageUid"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessage">
            <summary>
            Marks all messages as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <remarks>
            <p>
            Both messages <see cref="O:ComponentPro.Net.Mail.Imap.DeleteMessage">deleted</see> by this session and other sessions are undeleted.
            </p>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\UndeleteMessageSeq"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessage(ComponentPro.Net.Mail.ImapMessageSet)">
            <summary>
            Marks messages that belong to a specified message set as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <remarks>
            <p>
            Both messages <see cref="O:ComponentPro.Net.Mail.Imap.DeleteMessage">deleted</see> by this session and other sessions are undeleted.
            </p>
            <p>
            This method represents IMAP STORE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\UndeleteMessageIdSet"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnPurgeCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.PurgeCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.PurgeAsync(ComponentPro.Net.Mail.ImapMessageSet,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously permanently removes all the messages marked as deleted in the specified list from the currently selected mailbox.
            </summary>
            <param name="messageSet">A set of unique id of messages marked as deleted to purge.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Purge_TaskAsync, $ComponentPro.Mail\Imap\Async\Purge_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.PurgeAsync(ComponentPro.Net.Mail.ImapMessageSet,System.Object)">
            <summary>
            Asynchronously permanently removes all the messages marked as deleted in the specified list from the currently selected mailbox.
            </summary>
            <param name="messageSet">A set of unique id of messages marked as deleted to purge.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Purge_TaskAsync, $ComponentPro.Mail\Imap\Async\Purge_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.PurgeAsync(ComponentPro.Net.Mail.ImapMessageSet)">
            <summary>
            Asynchronously permanently removes all the messages marked as deleted in the specified list from the currently selected mailbox.
            </summary>
            <param name="messageSet">A set of unique id of messages marked as deleted to purge.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Purge_TaskAsync, $ComponentPro.Mail\Imap\Async\Purge_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.PurgeAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously permanently removes all the messages marked as deleted from the currently selected mailbox.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Purge_TaskAsync, $ComponentPro.Mail\Imap\Async\Purge_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.PurgeAsync(System.Object)">
            <summary>
            Asynchronously permanently removes all the messages marked as deleted from the currently selected mailbox.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Purge_TaskAsync, $ComponentPro.Mail\Imap\Async\Purge_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.PurgeAsync">
            <summary>
            Asynchronously permanently removes all the messages marked as deleted from the currently selected mailbox.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Purge_TaskAsync, $ComponentPro.Mail\Imap\Async\Purge_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnFlagCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.FlagCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FlagAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags,System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously modifies the flags of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A message set containing ordinal message numbers or UIDs.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <param name="keywords">Keywords to add, remove or set.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Flag_TaskAsync, $ComponentPro.Mail\Imap\Async\Flag_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FlagAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags,System.String[],System.Object)">
            <summary>
            Asynchronously modifies the flags of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A message set containing ordinal message numbers or UIDs.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <param name="keywords">Keywords to add, remove or set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Flag_TaskAsync, $ComponentPro.Mail\Imap\Async\Flag_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FlagAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])">
            <summary>
            Asynchronously modifies the flags of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A message set containing ordinal message numbers or UIDs.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <param name="keywords">Keywords to add, remove or set.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Flag_TaskAsync, $ComponentPro.Mail\Imap\Async\Flag_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FlagAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously modifies the flags of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A message set containing ordinal message numbers or UIDs.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FlagAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags,System.Object)">
            <summary>
            Asynchronously modifies the flags of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A message set containing ordinal message numbers or UIDs.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FlagAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Asynchronously modifies the flags of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A message set containing ordinal message numbers or UIDs.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FlagAsync(System.Int32,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously modifies the flags of a message with the specified message inbox index.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FlagAsync(System.Int32,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags,System.Object)">
            <summary>
            Asynchronously modifies the flags of a message with the specified message inbox index.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FlagAsync(System.Int32,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Asynchronously modifies the flags of a message with the specified message inbox index.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FlagAsync(System.String,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously modifies the flags of a message with the specified unique ID.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FlagAsync(System.String,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags,System.Object)">
            <summary>
            Asynchronously modifies the flags of a message with the specified unique ID.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FlagAsync(System.String,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Asynchronously modifies the flags of a message with the specified unique ID.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="modifier">The action to take.</param>
            <param name="flags">Flags to add, remove or set.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnDeleteMessageCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.DeleteMessageCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteMessageAsync(ComponentPro.Net.Mail.ImapMessageSet,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously marks the specified messages in the currently selected mailbox as deleted. To permanently delete messages, use the method <see cref="O:ComponentPro.Net.Mail.Imap.Purge" />.
            </summary>
            <param name="messageSet">The message set.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteMessageIdSet_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteMessageIdSet_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteMessageAsync(ComponentPro.Net.Mail.ImapMessageSet,System.Object)">
            <summary>
            Asynchronously marks the specified messages in the currently selected mailbox as deleted. To permanently delete messages, use the method <see cref="O:ComponentPro.Net.Mail.Imap.Purge" />.
            </summary>
            <param name="messageSet">The message set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteMessageIdSet_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteMessageIdSet_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteMessageAsync(ComponentPro.Net.Mail.ImapMessageSet)">
            <summary>
            Asynchronously marks the specified messages in the currently selected mailbox as deleted. To permanently delete messages, use the method <see cref="O:ComponentPro.Net.Mail.Imap.Purge" />.
            </summary>
            <param name="messageSet">The message set.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteMessageIdSet_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteMessageIdSet_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteMessageAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously marks a message with the specified unique ID as deleted. To permanently delete messages, use the method <see cref="O:ComponentPro.Net.Mail.Imap.Purge" />.
            </summary>
            <param name="uniqueId">The message unique ID.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteMessageUid_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteMessageUid_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteMessageAsync(System.String,System.Object)">
            <summary>
            Asynchronously marks a message with the specified unique ID as deleted. To permanently delete messages, use the method <see cref="O:ComponentPro.Net.Mail.Imap.Purge" />.
            </summary>
            <param name="uniqueId">The message unique ID.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteMessageUid_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteMessageUid_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteMessageAsync(System.String)">
            <summary>
            Asynchronously marks a message with the specified unique ID as deleted. To permanently delete messages, use the method <see cref="O:ComponentPro.Net.Mail.Imap.Purge" />.
            </summary>
            <param name="uniqueId">The message unique ID.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteMessageUid_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteMessageUid_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteMessageAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously marks a message with the specified message inbox index as deleted. To permanently delete messages, use the method <see cref="O:ComponentPro.Net.Mail.Imap.Purge" />.
            </summary>
            <param name="messageInboxIndex">The message inbox index number.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteMessageSeq_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteMessageSeq_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteMessageAsync(System.Int32,System.Object)">
            <summary>
            Asynchronously marks a message with the specified message inbox index as deleted. To permanently delete messages, use the method <see cref="O:ComponentPro.Net.Mail.Imap.Purge" />.
            </summary>
            <param name="messageInboxIndex">The message inbox index number.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteMessageSeq_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteMessageSeq_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteMessageAsync(System.Int32)">
            <summary>
            Asynchronously marks a message with the specified message inbox index as deleted. To permanently delete messages, use the method <see cref="O:ComponentPro.Net.Mail.Imap.Purge" />.
            </summary>
            <param name="messageInboxIndex">The message inbox index number.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteMessageSeq_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteMessageSeq_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnUndeleteMessageCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.UndeleteMessageCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync(ComponentPro.Net.Mail.ImapMessageSet,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously marks messages that belong to a specified message set as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UndeleteMessageIdSet_TaskAsync, $ComponentPro.Mail\Imap\Async\UndeleteMessageIdSet_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync(ComponentPro.Net.Mail.ImapMessageSet,System.Object)">
            <summary>
            Asynchronously marks messages that belong to a specified message set as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UndeleteMessageIdSet_TaskAsync, $ComponentPro.Mail\Imap\Async\UndeleteMessageIdSet_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync(ComponentPro.Net.Mail.ImapMessageSet)">
            <summary>
            Asynchronously marks messages that belong to a specified message set as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UndeleteMessageIdSet_TaskAsync, $ComponentPro.Mail\Imap\Async\UndeleteMessageIdSet_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously marks a message with the specified unique ID as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="uniqueId">The unique id of the message in the currently selected mailbox.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UndeleteMessageUid_TaskAsync, $ComponentPro.Mail\Imap\Async\UndeleteMessageUid_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync(System.String,System.Object)">
            <summary>
            Asynchronously marks a message with the specified unique ID as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="uniqueId">The unique id of the message in the currently selected mailbox.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UndeleteMessageUid_TaskAsync, $ComponentPro.Mail\Imap\Async\UndeleteMessageUid_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync(System.String)">
            <summary>
            Asynchronously marks a message with the specified unique ID as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="uniqueId">The unique id of the message in the currently selected mailbox.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UndeleteMessageUid_TaskAsync, $ComponentPro.Mail\Imap\Async\UndeleteMessageUid_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously marks a message with the specified sequence number as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="messageInboxIndex">The sequence number of the message in the currently selected mailbox.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UndeleteMessageSeq_TaskAsync, $ComponentPro.Mail\Imap\Async\UndeleteMessageSeq_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync(System.Int32,System.Object)">
            <summary>
            Asynchronously marks a message with the specified sequence number as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="messageInboxIndex">The sequence number of the message in the currently selected mailbox.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UndeleteMessageSeq_TaskAsync, $ComponentPro.Mail\Imap\Async\UndeleteMessageSeq_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync(System.Int32)">
            <summary>
            Asynchronously marks a message with the specified sequence number as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="messageInboxIndex">The sequence number of the message in the currently selected mailbox.</param>        
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UndeleteMessageSeq_TaskAsync, $ComponentPro.Mail\Imap\Async\UndeleteMessageSeq_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronous marks all messages as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync(System.Object)">
            <summary>
            Asynchronous marks all messages as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync">
            <summary>
            Asynchronous marks all messages as not deleted. It has no effect on messages were purged using the <see cref="O:ComponentPro.Net.Mail.Imap.Purge"/> method.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessage(System.Int32,System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Downloads the message with the specified inbox index number and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <returns>The length of the message in bytes.</returns>
            <remarks>
            By default, this method marks the message as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.
            </remarks>
            <example source="$ComponentPro.Mail\Imap/DownloadMessageStream"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessage(System.String,System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Downloads the message with the specified unique ID and writes its data into a supplied stream.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <remarks>
            By default, this method marks the message as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.
            </remarks>
            <returns>The length of the message in bytes.</returns>
            <example source="$ComponentPro.Mail\Imap/DownloadMessageStream"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessage(System.Int32,System.IO.Stream)">
            <summary>
            Downloads the message with the specified message inbox index number and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="output">Stream that will receive the message.</param>
            <returns>The length of the message in bytes.</returns>
            <example source="$ComponentPro.Mail\Imap/DownloadMessageStream"/>
            <remarks>
            By default, this method marks the message as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessage(System.String,System.IO.Stream)">
            <summary>
            Downloads the message with the specified unique ID and writes its data into a supplied stream.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="output">Stream that will receive the message.</param>
            <remarks>
            By default, this method marks the message as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.
            </remarks>
            <returns>The length of the message in bytes.</returns>
            <example source="$ComponentPro.Mail\Imap/DownloadMessageStream"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessage(System.Int32,System.String,System.Int64,System.Int32)">
            <summary>
            Downloads the message with the specified inbox index number and writes its data into a local file.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <remarks>
            By default, this method marks the message as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.
            </remarks>
            <returns>The length of the message in bytes.</returns>
            <example source="$ComponentPro.Mail\Imap/DownloadMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessage(System.String,System.String,System.Int64,System.Int32)">
            <summary>
            Downloads the message with the specified unique ID and writes its data into a local file.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <remarks>
            By default, this method marks the message as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.
            </remarks>
            <returns>The length of the message in bytes.</returns>
            <example source="$ComponentPro.Mail\Imap/DownloadMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessage(System.Int32,System.String)">
            <summary>
            Downloads the message with the specified sequence number and writes its data into a local file.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <remarks>
            By default, this method marks the message as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.
            </remarks>
            <returns>The length of the message in bytes.</returns>
            <example source="$ComponentPro.Mail\Imap/DownloadMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessage(System.String,System.String)">
            <summary>
            Downloads the message with the specified unique ID and writes its data into a local file.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <remarks>
            By default, this method marks the message as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.
            </remarks>
            <returns>The length of the message in bytes.</returns>
            <example source="$ComponentPro.Mail\Imap/DownloadMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMailMessage(System.Int32)">
            <summary>
            Downloads the message with the specified sequence number
            and loads it into an instance of <see cref="T:ComponentPro.Net.Mail.MailMessage"/>.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <remarks>
            By default, this method marks the message as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.
            </remarks>
            <returns>A downloaded message.</returns>
            <example source="$ComponentPro.Mail\Imap/DownloadMailMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMailMessage(System.String)">
            <summary>
            Downloads the message with the specified unique ID
            and loads it into an instance of <see cref="T:ComponentPro.Net.Mail.MailMessage"/>.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <returns>A downloaded message.</returns>
            <remarks>
            By default, this method marks the message as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.
            </remarks>
            <example source="$ComponentPro.Mail\Imap/DownloadMailMessage,$ComponentPro.Mail\Imap/DownloadUnreadMailMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageHeaders(System.Int32,System.IO.Stream)">
            <summary>
            Downloads the headers of a message with the specified sequence number
            and writes it into a supplied stream.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="output">Stream that will receive the message headers.</param>
            <remarks>Uses IMAP FETCH command to retrieve the headers.</remarks>
            <returns>The length of the headers in bytes.</returns>
            <example source="$ComponentPro.Mail\Imap/DownloadMessageHeadersStream"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageHeaders(System.String,System.IO.Stream)">
            <summary>
            Downloads the headers of a message with the specified unique ID
            and writes it into a supplied stream.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="output">Stream that will receive the message headers.</param>
            <remarks>Uses IMAP FETCH command to retrieve the headers.</remarks>
            <returns>The length of the headers in bytes.</returns>
            <example source="$ComponentPro.Mail\Imap/DownloadMessageHeadersStream"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePart(System.Int32,System.String)">
            <summary>
            Downloads the specified part of the message. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <returns>Raw data of the specified message section.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePart(System.String,System.String)">
            <summary>
            Downloads the specified part of the message. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <returns>Raw data of the specified message section.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePart(System.Int32,System.String,System.IO.Stream)">
            <summary>
            Downloads the specified part of the message into the specified stream. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <param name="output">Stream that will receive the part data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePart(System.String,System.String,System.IO.Stream)">
            <summary>
            Downloads the specified part of the message into the specified stream. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <param name="output">Stream that will receive the part data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.Int32,ComponentPro.Net.Mail.ImapEnvelopeParts)">
            <summary>
            Gets information about a message with the specified sequence number.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="parts">Specifies the scope of information to determine about the message.</param>
            <remarks>
            <para>By default, this method marks the message as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.</para>
            </remarks>
            <returns>A message info.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)">
            <summary>
            Gets information about a message with the specified unique ID
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="parts">Specifies the scope of information to determine about the message.</param>
            <remarks>
            <para>By default, this method marks the message as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.</para>
            </remarks>
            <returns>A message info.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnDownloadMessageCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.DownloadMessageCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.Int32,System.IO.Stream,System.Int64,System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the message with the specified inbox index number and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.Int32,System.IO.Stream,System.Int64,System.Int32,System.Object)">
            <summary>
            Asynchronously downloads the message with the specified inbox index number and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.Int32,System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Asynchronously downloads the message with the specified inbox index number and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.String,System.IO.Stream,System.Int64,System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the message with the specified unique ID and writes its data into a supplied stream.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.String,System.IO.Stream,System.Int64,System.Int32,System.Object)">
            <summary>
            Asynchronously downloads the message with the specified unique ID and writes its data into a supplied stream.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.String,System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Asynchronously downloads the message with the specified unique ID and writes its data into a supplied stream.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.Int32,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the message with the specified message inbox index number and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.Int32,System.IO.Stream,System.Object)">
            <summary>
            Asynchronously downloads the message with the specified message inbox index number and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.Int32,System.IO.Stream)">
            <summary>
            Asynchronously downloads the message with the specified message inbox index number and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="output">Stream that will receive the message.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.String,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the message with the specified unique ID and writes its data into a supplied stream.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.String,System.IO.Stream,System.Object)">
            <summary>
            Asynchronously downloads the message with the specified unique ID and writes its data into a supplied stream.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.String,System.IO.Stream)">
            <summary>
            Asynchronously downloads the message with the specified unique ID and writes its data into a supplied stream.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="output">Stream that will receive the message.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.Int32,System.String,System.Int64,System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the message with the specified inbox index number and writes its data into a local file.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.Int32,System.String,System.Int64,System.Int32,System.Object)">
            <summary>
            Asynchronously downloads the message with the specified inbox index number and writes its data into a local file.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.Int32,System.String,System.Int64,System.Int32)">
            <summary>
            Asynchronously downloads the message with the specified inbox index number and writes its data into a local file.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.String,System.String,System.Int64,System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the message with the specified unique ID
            and writes its data into a local file.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.String,System.String,System.Int64,System.Int32,System.Object)">
            <summary>
            Asynchronously downloads the message with the specified unique ID
            and writes its data into a local file.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.String,System.String,System.Int64,System.Int32)">
            <summary>
            Asynchronously downloads the message with the specified unique ID
            and writes its data into a local file.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the message data to download.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer all data until an end of message is reached.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.Int32,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the message with the specified sequence number and writes its data into a local file.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.Int32,System.String,System.Object)">
            <summary>
            Asynchronously downloads the message with the specified sequence number and writes its data into a local file.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.Int32,System.String)">
            <summary>
            Asynchronously downloads the message with the specified sequence number and writes its data into a local file.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the message with the specified unique ID and writes its data into a local file.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously downloads the message with the specified unique ID and writes its data into a local file.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageAsync(System.String,System.String)">
            <summary>
            Asynchronously downloads the message with the specified unique ID and writes its data into a local file.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnDownloadMailMessageCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.MailMessage})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.DownloadMailMessageCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMailMessageAsync(System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.MailMessage},System.Object)">
            <summary>
            Asynchronously downloads the message with the specified sequence number
            and loads it into an instance of <see cref="T:ComponentPro.Net.Mail.MailMessage"/>.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMailMessageAsync(System.Int32,System.Object)">
            <summary>
            Asynchronously downloads the message with the specified sequence number
            and loads it into an instance of <see cref="T:ComponentPro.Net.Mail.MailMessage"/>.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMailMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMailMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMailMessageAsync(System.Int32)">
            <summary>
            Asynchronously downloads the message with the specified sequence number
            and loads it into an instance of <see cref="T:ComponentPro.Net.Mail.MailMessage"/>.
            </summary>
            <param name="messageInboxIndex">Message inbox index number.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMailMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMailMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMailMessageAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.MailMessage},System.Object)">
            <summary>
            Asynchronously downloads the message with the specified unique ID
            and loads it into an instance of <see cref="T:ComponentPro.Net.Mail.MailMessage"/>.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMailMessageAsync(System.String,System.Object)">
            <summary>
            Asynchronously downloads the message with the specified unique ID
            and loads it into an instance of <see cref="T:ComponentPro.Net.Mail.MailMessage"/>.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMailMessageAsync(System.String)">
            <summary>
            Asynchronously downloads the message with the specified unique ID
            and loads it into an instance of <see cref="T:ComponentPro.Net.Mail.MailMessage"/>.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnDownloadMessageHeadersCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.DownloadMessageHeadersCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageHeadersAsync(System.Int32,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the headers of a message with the specified sequence number
            and writes it into a supplied stream.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="output">Stream that will receive the message headers.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageHeadersAsync(System.Int32,System.IO.Stream,System.Object)">
            <summary>
            Asynchronously downloads the headers of a message with the specified sequence number
            and writes it into a supplied stream.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="output">Stream that will receive the message headers.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageHeadersAsync(System.Int32,System.IO.Stream)">
            <summary>
            Asynchronously downloads the headers of a message with the specified sequence number
            and writes it into a supplied stream.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="output">Stream that will receive the message headers.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageHeadersAsync(System.String,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the headers of a message with the specified unique ID
            and writes it into a supplied stream.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="output">Stream that will receive the message headers.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageHeadersAsync(System.String,System.IO.Stream,System.Object)">
            <summary>
            Asynchronously downloads the headers of a message with the specified unique ID
            and writes it into a supplied stream.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="output">Stream that will receive the message headers.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessageHeadersAsync(System.String,System.IO.Stream)">
            <summary>
            Asynchronously downloads the headers of a message with the specified unique ID
            and writes it into a supplied stream.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="output">Stream that will receive the message headers.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnDownloadMessagePartCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Object})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.DownloadMessagePartCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync(System.Int32,System.String,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Object},System.Object)">
            <summary>
            Asynchronously downloads the specified part of the message into the specified stream. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.MessageStructure"/> argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <param name="output">Stream that will receive the part data.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync(System.Int32,System.String,System.IO.Stream,System.Object)">
            <summary>
            Asynchronously downloads the specified part of the message into the specified stream. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.MessageStructure"/> argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <param name="output">Stream that will receive the part data.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync(System.Int32,System.String,System.IO.Stream)">
            <summary>
            Asynchronously downloads the specified part of the message into the specified stream. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.MessageStructure"/> argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <param name="output">Stream that will receive the part data.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync(System.String,System.String,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Object},System.Object)">
            <summary>
            Asynchronously downloads the specified part of the message into the specified stream. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <param name="output">Stream that will receive the part data.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync(System.String,System.String,System.IO.Stream,System.Object)">
            <summary>
            Asynchronously downloads the specified part of the message into the specified stream. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <param name="output">Stream that will receive the part data.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync(System.String,System.String,System.IO.Stream)">
            <summary>
            Asynchronously downloads the specified part of the message into the specified stream. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <param name="output">Stream that will receive the part data.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync(System.Int32,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Object},System.Object)">
            <summary>
            Asynchronously downloads the specified part of the message. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync(System.Int32,System.String,System.Object)">
            <summary>
            Asynchronously downloads the specified part of the message. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync(System.Int32,System.String)">
            <summary>
            Asynchronously downloads the specified part of the message. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Object},System.Object)">
            <summary>
            Asynchronously downloads the specified part of the message. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously downloads the specified part of the message. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync(System.String,System.String)">
            <summary>
            Asynchronously downloads the specified part of the message. Used to download separate attachments.
            Call <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/> with <see cref="T:ComponentPro.Net.Mail.ImapEnvelopeParts"/>.MessageStructure argument
            to download the list of sections and access it using <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/> method.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="partId">Message section (from <see cref="P:ComponentPro.Net.Mail.ImapMessagePart.Id"/>).</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnDownloadImapMessageCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.ImapMessage})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.DownloadImapMessageCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadImapMessageAsync(System.Int32,ComponentPro.Net.Mail.ImapEnvelopeParts,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapMessage},System.Object)">
            <summary>
            Asynchronously gets information about a message with the specified sequence number.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="parts">Specifies the scope of information to determine about the message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadImapMessageAsync(System.Int32,ComponentPro.Net.Mail.ImapEnvelopeParts,System.Object)">
            <summary>
            Asynchronously gets information about a message with the specified sequence number.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="parts">Specifies the scope of information to determine about the message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadImapMessageAsync(System.Int32,ComponentPro.Net.Mail.ImapEnvelopeParts)">
            <summary>
            Asynchronously gets information about a message with the specified sequence number.
            </summary>
            <param name="messageInboxIndex">Message sequence number.</param>
            <param name="parts">Specifies the scope of information to determine about the message.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadImapMessageAsync(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapMessage},System.Object)">
            <summary>
            Asynchronously gets information about a message with the specified unique ID
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="parts">Specifies the scope of information to determine about the message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadImapMessageAsync(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts,System.Object)">
            <summary>
            Asynchronously gets information about a message with the specified unique ID
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="parts">Specifies the scope of information to determine about the message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DownloadImapMessageAsync(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)">
            <summary>
            Asynchronously gets information about a message with the specified unique ID
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="parts">Specifies the scope of information to determine about the message.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnCommandResponse(System.Object,ComponentPro.Net.CommandResponseEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.CommandResponse"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.CommandResponseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnListProcessing(System.Object,ComponentPro.Net.Mail.ImapListProcessingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.ListProcessing"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.ImapListProcessingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnStateChanged(System.Object,ComponentPro.Net.Mail.MailClientStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.StateChanged"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.MailClientStateChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnProgress(System.Object,ComponentPro.Net.Mail.ImapProgressEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.StateChanged"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.MailClientStateChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnUpdate(System.Object,ComponentPro.Net.Mail.ImapUpdateEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.Update"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.ImapUpdateEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnCertificateReceived(System.Object,ComponentPro.Security.CertificateReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.CertificateReceived"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateReceivedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnCertificateRequired(System.Object,ComponentPro.Security.CertificateRequiredEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.CertificateRequired"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateRequiredEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapEnvelopeParts,ComponentPro.Net.Mail.ImapCriterion[])">
            <summary>
            Searches the current folder for messages that match the specified searching criteria and 
            fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            </summary>
            <param name="messageSet">A message set containing ordinal message numbers or UIDs.</param>
            <param name="parts">Specifies which message elements or attributes to fetch.</param>
            <param name="parameters">Searching criteria which may consist of one or more parameters. When more than one <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> are specified, 
            the results is the intersection (AND) of all the messages that match.
            </param>
            <returns>A collection of <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> objects that match the specified criteria.</returns>
            <example source="$ComponentPro.Mail\Imap\SearchMessages"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapEnvelopeParts,ComponentPro.Net.Mail.ImapCriterion[])">
            <summary>
            Searches the current folder for messages that match the specified searching criteria and 
            fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            </summary>
            <param name="fields">Specifies the scope of information to determine about each message.</param>
            <param name="parameters">Searching criteria which may consist of one or more parameters. When more than one <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> are specified, 
            the results is the intersection (AND) of all the messages that match.
            </param>
            <returns>A collection of <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> objects that match the specified criteria.</returns>
            <example source="$ComponentPro.Mail\Imap\SearchMessages,$ComponentPro.Mail\Imap\SearchMessagesNew"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapCriterion[])">
            <summary>
            Searches the current folder for messages that match the specified searching criteria and 
            fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            </summary>
            <param name="parameters">Searching criteria which may consist of one or more criteria. When more than one <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> are specified, 
            the results is the intersection (AND) of all the messages that match.
            </param>
            <returns>A collection of <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> objects that match the specified criteria.</returns>
            <example source="$ComponentPro.Mail\Imap\SearchMessages"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapEnvelopeParts)">
            <summary>
            Gets the list of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="parts">Specifies the scope of information to determine about each message.</param>
            <returns>A collection of <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> objects.</returns>
            <remarks>
            <p>
            This method represents IMAP FETCH command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\ListMessages"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapMessageSet)">
            <summary>
            Gets the list of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <returns>A collection of <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> objects.</returns>
            <remarks>
            <p>
            The returned list will contain the envelope information about each message.
            </p>
            <p>
            This method represents IMAP FETCH command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\ListMessages"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapEnvelopeParts)">
            <summary>
            Gets the list of messages in the current folder.
            </summary>
            <param name="parts">Specifies the scope of information to determine about each message.</param>
            <returns>A collection of <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> objects.</returns>
            <remarks>
            <p>
            This method represents IMAP FETCH command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\ListMessages"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessages">
            <summary>
            Gets the list of messages in the current folder.
            </summary>
            <returns>A collection of <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> objects.</returns>
            <remarks>
            <p>
            The returned list will contain the envelope information about each message.
            </p>
            <p>
            This method represents IMAP FETCH command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\ListMessages"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FolderExists(System.String)">
            <summary>
            Determines whether the specified folder exists on the server.
            </summary>
            <param name="folder">The path to the folder to check.</param>
            <returns>True if the folder exists; otherwise is false.</returns>
            <example source="$ComponentPro.Mail\Imap/FolderExists"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the list of sub-mailboxes in the specified folder.
            </summary>
            <param name="folder">The path to folder for which a list of sub-mailboxes is returned.</param>
            <param name="subscribedOnly">A boolean value indicating whether to return subscribed mailboxes only or all mailboxes.</param>
            <param name="recursive">Specifies whether to return the shole subfolder tree.</param>
            <returns>A list of sub-mailboxes.</returns>
            <remarks>
            <p>
            To subscribe and unsubscribe to a folder, you can use <see cref="M:ComponentPro.Net.Mail.Imap.Subscribe(System.String)"/> and <see cref="M:ComponentPro.Net.Mail.Imap.Unsubscribe(System.String)"/> methods.
            </p>
            <p>This method represents IMAP LIST and LSUB commands.</p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\ListFolders"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String,System.Boolean)">
            <summary>
            Gets the list of sub-mailboxes in the specified folder.
            </summary>
            <param name="folder">The path to folder for which a list of sub-mailboxes is returned.</param>
            <param name="subscribedOnly">A boolean value indicating whether to return subscribed mailboxes only or all mailboxes.</param>
            <returns>A list of sub-mailboxes.</returns>
            <remarks>
            To subscribe and unsubscribe to a folder, you can use <see cref="M:ComponentPro.Net.Mail.Imap.Subscribe(System.String)"/> and <see cref="M:ComponentPro.Net.Mail.Imap.Unsubscribe(System.String)"/> methods.
            </remarks>
            <example source="$ComponentPro.Mail\Imap\ListFolders"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String)">
            <summary>
            Returns the list of sub-mailboxes in the specified IMAP folder.
            </summary>
            <param name="folder">The path to folder. You can specify an empty string for listing root folder.</param>
            <returns>A list of <see cref="T:ComponentPro.Net.Mail.Folder"/>.</returns>
            <example source="$ComponentPro.Mail\Imap\ListFolders"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFolders">
            <summary>
            Returns the list of root subfolders.
            </summary>
            <returns>A list of <see cref="T:ComponentPro.Net.Mail.Folder"/>.</returns>
            <example source="$ComponentPro.Mail\Imap\ListFolders"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Deselect(System.Boolean)">
            <summary>
            Deselects the currently selected folder and permanently removes all messages marked as deleted 
            (by using <see cref="O:DeleteMessage"/>) from the current folder. After calling this method, <see cref="P:ComponentPro.Net.Mail.Imap.WorkingFolder"/> will be null.
            </summary>
            <param name="purgeDeleted">Indicates whether to permanently removes all messages marked as deleted.</param>
            <seealso cref="M:ComponentPro.Net.Mail.Imap.Select(System.String)"/> 
            <seealso cref="O:Purge"/>
            <remarks>
            <p>
            This method uses IMAP CLOSE command to purge the messages.
            No purging is performed if the current folder is selected as read-only.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/Deselect"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Deselect">
            <summary>
            Deselects the currently selected folder and permanently removes all messages marked as deleted 
            (by using <see cref="O:DeleteMessage"/>) from the current folder. After calling this method, <see cref="P:ComponentPro.Net.Mail.Imap.WorkingFolder"/> will be null.
            </summary>
            <seealso cref="M:ComponentPro.Net.Mail.Imap.Select(System.String)"/> 
            <seealso cref="O:Purge"/>
            <remarks>
            <p>
            This method uses IMAP CLOSE command to purge the messages.
            No purging is performed if the current folder is selected as read-only.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/Deselect"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Select(System.String,System.Boolean)">
            <summary>
            Selects the specified folder so that its messages can be accessed.
            </summary>
            <param name="folder">The full name of the folder to be selected.</param>
            <param name="readOnly">Specifies whether the folder is to be selected as read-only.</param>
            <remarks>
            <p>
            You should specify the full name of the folder (including all parent folders' names if the folder is subfolder of another existing folder).
            </p>
            <p>
            After calling this method, the <see cref="P:ComponentPro.Net.Mail.Imap.WorkingFolder"/> property will contain an instance of <see cref="T:ComponentPro.Net.Mail.Folder"/> representing the selected folder.
            </p>
            <p>
            Only one folder can be selected at a time for a single connection,
            and only the messages in currently selected folder can be accessed.
            Also, most <see cref="E:ComponentPro.Net.Mail.Imap.Update">notifications</see> only occur when a folder is selected.
            </p>
            <p>
            This method represents IMAP SELECT and EXAMINE commands.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\Select"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Select(System.String)">
            <summary>
            Selects the specified folder so that its messages can be accessed.
            </summary>
            <param name="folder">The full name of the folder to be selected.</param>
            <remarks>
            <p>
            You should specify the full name of the folder (including all parent folders' names if the folder is subfolder of another existing folder).
            </p>
            <p>
            After calling this method, the <see cref="P:ComponentPro.Net.Mail.Imap.WorkingFolder"/> property will contain an instance of <see cref="T:ComponentPro.Net.Mail.Folder"/> representing the selected folder.
            </p>
            <p>
            Only one folder can be selected at a time for a single connection,
            and only the messages in currently selected folder can be accessed.
            Also, most <see cref="E:ComponentPro.Net.Mail.Imap.Update">notifications</see> only occur when a folder is selected.
            </p>
            <p>
            This method represents IMAP SELECT and EXAMINE commands.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\Select"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CreateFolder(System.String)">
            <summary>
            Creates a new folder in the IMAP4 account.
            </summary>
            <param name="folder">The full name of the folder to be created.</param>
            <remarks>
            <p>
            This method represents IMAP CREATE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/CreateFolder"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteFolder(System.String)">
            <summary>
            Deletes a folder with the specified name.
            </summary>
            <param name="folder">Folder to be deleted.</param>
            <remarks>
            <p>
            This method represents IMAP DELETE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/DeleteFolder"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.RenameFolder(System.String,System.String)">
            <summary>
            Renames a specified folder to a new name.
            </summary>
            <param name="folderName">Folder to be renamed.</param>
            <param name="newFolderName">New folder name.</param>
            <remarks>
            <p>
            This method represents IMAP RENAME command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/RenameMailbox"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Subscribe(System.String)">
            <summary>
            Subscribes to the specified folder of the IMAP4 account, adding it to a list of active folders that
            appear in the folder <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String,System.Boolean)">listings</see> with <b>subscribedOnly</b> parameter set
            to <c>true</c>.
            </summary>
            <param name="folder">The full name of the folder to be subscribed.</param>
            <remarks>
            <p>
            This method adds the specified folder to the server's set of "active" or "subscribed" folders as returned by 
            <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String,System.Boolean)"/> method when <b>subscribedOnly</b> parameter is set to <c>true</c>.
            This has absolutely NOTHING to do
            with <see cref="E:ComponentPro.Net.Mail.Imap.Update">notifications</see>.
            </p>
            <p>
            You should specify the full name of the folder (including all parent folders' names if the folder is subfolder of another existing folder).
            </p>
            </remarks>
            <p>
            This method represents IMAP SUBSCRIBE command.
            </p>
            <example source="$ComponentPro.Mail\Imap/Subscribe"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Unsubscribe(System.String)">
            <summary>
            Unsubscribes the previously subscribed folder (using the <see cref="M:ComponentPro.Net.Mail.Imap.Subscribe(System.String)"/> method) of the IMAP4 account, removing it from the list of active folders that
            appear in the folder <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String,System.Boolean)">listings</see> with <b>subscribedOnly</b> parameter set
            to <c>true</c>.
            </summary>
            <param name="folder">The full name of the folder to be unsubscribed.</param>
            <remarks>
            <p>
            This method removes the specified folder from the server's set of "active" or "subscribed" 
            folders as returned by <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String,System.Boolean)"/> method when <b>subscribedOnly</b> parameter is set to <c>true</c>.
            This has absolutely NOTHING to do with <see cref="E:ComponentPro.Net.Mail.Imap.Update">notifications</see>.
            </p>
            <p>
            You should specify the full name of the folder (including all parent folders' names if the folder is subfolder of another existing folder).
            </p>
            <p>
            This method represents IMAP UNSUBSCRIBE command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/Subscribe"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.GetFolderInfo(System.String)">
            <summary>
            Gets folder information without selecting it. Only <see cref="P:ComponentPro.Net.Mail.Folder.TotalMessages"/>, 
            <see cref="P:ComponentPro.Net.Mail.Folder.RecentMessages"/>, <see cref="P:ComponentPro.Net.Mail.Folder.NotSeenMessages"/>, 
            <see cref="P:ComponentPro.Net.Mail.Folder.UidValidity"/>, and <see cref="P:ComponentPro.Net.Mail.Folder.UidNext"/> properties 
            of the <see cref="T:ComponentPro.Net.Mail.Folder"/> class are available after calling this method.
            </summary>
            <param name="folder">The folder name to get information about.</param>
            <returns>An <see cref="T:ComponentPro.Net.Mail.Folder"/> object.</returns>
            <remarks>
            <p>
            This method represents IMAP STATUS command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/GetFolderInfo"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SetMailboxCheckpoint">
            <summary>
            Requests a checkpoint of the currently selected mailbox.
            </summary>
            <remarks>
            <p>
            A checkpoint refers to any implementation-dependent
            housekeeping associated with the mailbox.
            </p>
            <p>
            This method represents IMAP CHECK command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/SetMailboxCheckpoint"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnListMessagesCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.ImapMessageCollection})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.ListMessagesCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapEnvelopeParts,ComponentPro.Net.Mail.ImapCriterion[],ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapMessageCollection},System.Object)">
            <summary>
            Asynchronously searches the current folder for messages that match the specified searching criteria and 
            fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            </summary>
            <param name="messageSet">A message set containing ordinal message numbers or UIDs.</param>
            <param name="parts">Specifies which message elements or attributes to fetch.</param>
            <param name="parameters">Searching criteria which may consist of one or more parameters. When more than one <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> are specified, 
            the results is the intersection (AND) of all the messages that match.
            </param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\ListMessages_TaskAsync, $ComponentPro.Mail\Imap\Async\ListMessages_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapEnvelopeParts,ComponentPro.Net.Mail.ImapCriterion[],System.Object)">
            <summary>
            Asynchronously searches the current folder for messages that match the specified searching criteria and 
            fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            </summary>
            <param name="messageSet">A message set containing ordinal message numbers or UIDs.</param>
            <param name="parts">Specifies which message elements or attributes to fetch.</param>
            <param name="parameters">Searching criteria which may consist of one or more parameters. When more than one <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> are specified, 
            the results is the intersection (AND) of all the messages that match.
            </param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\ListMessages_TaskAsync, $ComponentPro.Mail\Imap\Async\ListMessages_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapEnvelopeParts,ComponentPro.Net.Mail.ImapCriterion[])">
            <summary>
            Asynchronously searches the current folder for messages that match the specified searching criteria and 
            fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            </summary>
            <param name="messageSet">A message set containing ordinal message numbers or UIDs.</param>
            <param name="parts">Specifies which message elements or attributes to fetch.</param>
            <param name="parameters">Searching criteria which may consist of one or more parameters. When more than one <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> are specified, 
            the results is the intersection (AND) of all the messages that match.
            </param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\ListMessages_TaskAsync, $ComponentPro.Mail\Imap\Async\ListMessages_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapEnvelopeParts,ComponentPro.Net.Mail.ImapCriterion[],ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapMessageCollection},System.Object)">
            <summary>
            Asynchronously searches the current folder for messages that match the specified searching criteria and 
            fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            </summary>
            <param name="parts">Specifies which message elements or attributes to fetch.</param>
            <param name="parameters">Searching criteria which may consist of one or more parameters. When more than one <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> are specified, 
            the results is the intersection (AND) of all the messages that match.
            </param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapEnvelopeParts,ComponentPro.Net.Mail.ImapCriterion[],System.Object)">
            <summary>
            Asynchronously searches the current folder for messages that match the specified searching criteria and 
            fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            </summary>
            <param name="parts">Specifies which message elements or attributes to fetch.</param>
            <param name="parameters">Searching criteria which may consist of one or more parameters. When more than one <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> are specified, 
            the results is the intersection (AND) of all the messages that match.
            </param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapEnvelopeParts,ComponentPro.Net.Mail.ImapCriterion[])">
            <summary>
            Asynchronously searches the current folder for messages that match the specified searching criteria and 
            fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            </summary>
            <param name="parts">Specifies which message elements or attributes to fetch.</param>
            <param name="parameters">Searching criteria which may consist of one or more parameters. When more than one <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> are specified, 
            the results is the intersection (AND) of all the messages that match.
            </param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapCriterion[],ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapMessageCollection},System.Object)">
            <summary>
            Asynchronously searches the current folder for messages that match the specified searching criteria and 
            fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            </summary>
            <param name="parameters">Searching criteria which may consist of one or more parameters. When more than one <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> are specified, 
            the results is the intersection (AND) of all the messages that match.
            </param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapCriterion[],System.Object)">
            <summary>
            Asynchronously searches the current folder for messages that match the specified searching criteria and 
            fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            </summary>
            <param name="parameters">Searching criteria which may consist of one or more parameters. When more than one <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> are specified, 
            the results is the intersection (AND) of all the messages that match.
            </param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapCriterion[])">
            <summary>
            Asynchronously searches the current folder for messages that match the specified searching criteria and 
            fetches message envelopes, bodies, headers, flags, attributes, and other message-related information from the server.
            </summary>
            <param name="parameters">Searching criteria which may consist of one or more parameters. When more than one <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> are specified, 
            the results is the intersection (AND) of all the messages that match.
            </param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapEnvelopeParts,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapMessageCollection},System.Object)">
            <summary>
            Asynchronously gets the list of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="parts">Specifies the scope of information to determine about each message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapEnvelopeParts,System.Object)">
            <summary>
            Asynchronously gets the list of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="parts">Specifies the scope of information to determine about each message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapEnvelopeParts)">
            <summary>
            Asynchronously gets the list of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="parts">Specifies the scope of information to determine about each message.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapMessageCollection},System.Object)">
            <summary>
            Asynchronously gets the list of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapMessageSet,System.Object)">
            <summary>
            Asynchronously gets the list of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapMessageSet)">
            <summary>
            Asynchronously gets the list of messages in the current folder that belong to a specified message set.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapEnvelopeParts,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapMessageCollection},System.Object)">
            <summary>
            Asynchronously gets the list of messages in the current folder.
            </summary>
            <param name="parts">Specifies the scope of information to determine about each message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapEnvelopeParts,System.Object)">
            <summary>
            Asynchronously gets the list of messages in the current folder.
            </summary>
            <param name="parts">Specifies the scope of information to determine about each message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.Net.Mail.ImapEnvelopeParts)">
            <summary>
            Asynchronously gets the list of messages in the current folder.
            </summary>
            <param name="parts">Specifies the scope of information to determine about each message.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapMessageCollection},System.Object)">
            <summary>
            Asynchronously gets the list of messages in the current folder.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync(System.Object)">
            <summary>
            Asynchronously gets the list of messages in the current folder.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListMessagesAsync">
            <summary>
            Asynchronously gets the list of messages in the current folder.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnFolderExistsCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Boolean})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.FolderExistsCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FolderExistsAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Boolean},System.Object)">
            <summary>
            Asynchronously determines whether the specified folder exists on the server.
            </summary>
            <param name="folder">The path to the folder to check.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/TaskAsync/FolderExists_TaskAsync, $ComponentPro.Mail\Imap/Async/FolderExists_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FolderExistsAsync(System.String,System.Object)">
            <summary>
            Asynchronously determines whether the specified folder exists on the server.
            </summary>
            <param name="folder">The path to the folder to check.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/TaskAsync/FolderExists_TaskAsync, $ComponentPro.Mail\Imap/Async/FolderExists_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.FolderExistsAsync(System.String)">
            <summary>
            Asynchronously determines whether the specified folder exists on the server.
            </summary>
            <param name="folder">The path to the folder to check.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/TaskAsync/FolderExists_TaskAsync, $ComponentPro.Mail\Imap/Async/FolderExists_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnListFoldersCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.FolderCollection})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.ListFoldersCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFoldersAsync(System.String,System.Boolean,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.FolderCollection},System.Object)">
            <summary>
            Asynchronously gets the list of sub-mailboxes in the specified folder.
            </summary>
            <param name="folder">The path to folder for which a list of sub-mailboxes is returned.</param>
            <param name="subscribedOnly">A boolean value indicating whether to return subscribed mailboxes only or all mailboxes.</param>
            <param name="recursive">Specifies whether to return the shole subfolder tree.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFoldersAsync(System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Asynchronously gets the list of sub-mailboxes in the specified folder.
            </summary>
            <param name="folder">The path to folder for which a list of sub-mailboxes is returned.</param>
            <param name="subscribedOnly">A boolean value indicating whether to return subscribed mailboxes only or all mailboxes.</param>
            <param name="recursive">Specifies whether to return the shole subfolder tree.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFoldersAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously gets the list of sub-mailboxes in the specified folder.
            </summary>
            <param name="folder">The path to folder for which a list of sub-mailboxes is returned.</param>
            <param name="subscribedOnly">A boolean value indicating whether to return subscribed mailboxes only or all mailboxes.</param>
            <param name="recursive">Specifies whether to return the shole subfolder tree.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFoldersAsync(System.String,System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.FolderCollection},System.Object)">
            <summary>
            Asynchronously gets the list of sub-mailboxes in the specified folder.
            </summary>
            <param name="folder">The path to folder for which a list of sub-mailboxes is returned.</param>
            <param name="subscribedOnly">A boolean value indicating whether to return subscribed mailboxes only or all mailboxes.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFoldersAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously gets the list of sub-mailboxes in the specified folder.
            </summary>
            <param name="folder">The path to folder for which a list of sub-mailboxes is returned.</param>
            <param name="subscribedOnly">A boolean value indicating whether to return subscribed mailboxes only or all mailboxes.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFoldersAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously gets the list of sub-mailboxes in the specified folder.
            </summary>
            <param name="folder">The path to folder for which a list of sub-mailboxes is returned.</param>
            <param name="subscribedOnly">A boolean value indicating whether to return subscribed mailboxes only or all mailboxes.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFoldersAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.FolderCollection},System.Object)">
            <summary>
            Asynchronously gets the list of sub-mailboxes in the specified folder.
            </summary>
            <param name="folder">The path to folder for which a list of sub-mailboxes is returned.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFoldersAsync(System.String,System.Object)">
            <summary>
            Asynchronously gets the list of sub-mailboxes in the specified folder.
            </summary>
            <param name="folder">The path to folder for which a list of sub-mailboxes is returned.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFoldersAsync(System.String)">
            <summary>
            Asynchronously gets the list of sub-mailboxes in the specified folder.
            </summary>
            <param name="folder">The path to folder for which a list of sub-mailboxes is returned.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFoldersAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.FolderCollection},System.Object)">
            <summary>
            Asynchronously gets the list of sub-mailboxes in the current folder.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFoldersAsync(System.Object)">
            <summary>
            Asynchronously gets the list of sub-mailboxes in the current folder.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ListFoldersAsync">
            <summary>
            Asynchronously gets the list of sub-mailboxes in the current folder.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnCreateFolderCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.CreateFolderCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CreateFolderAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously creates a new folder in the IMAP4 account.
            </summary>
            <param name="folder">The full name of the folder to be created.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CreateFolder_TaskAsync, $ComponentPro.Mail\Imap\Async\CreateFolder_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CreateFolderAsync(System.String,System.Object)">
            <summary>
            Asynchronously creates a new folder in the IMAP4 account.
            </summary>
            <param name="folder">The full name of the folder to be created.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CreateFolder_TaskAsync, $ComponentPro.Mail\Imap\Async\CreateFolder_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CreateFolderAsync(System.String)">
            <summary>
            Asynchronously creates a new folder in the IMAP4 account.
            </summary>
            <param name="folder">The full name of the folder to be created.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CreateFolder_TaskAsync, $ComponentPro.Mail\Imap\Async\CreateFolder_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnDeleteFolderCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.DeleteFolderCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteFolderAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously deletes a folder with the specified name.
            </summary>
            <param name="folder">Folder to be deleted.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteFolder_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteFolder_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteFolderAsync(System.String,System.Object)">
            <summary>
            Asynchronously deletes a folder with the specified name.
            </summary>
            <param name="folder">Folder to be deleted.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteFolder_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteFolder_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeleteFolderAsync(System.String)">
            <summary>
            Asynchronously deletes a folder with the specified name.
            </summary>
            <param name="folder">Folder to be deleted.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteFolder_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteFolder_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnRenameFolderCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.RenameFolderCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.RenameFolderAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously renames a specified folder to a new name.
            </summary>
            <param name="folderName">Folder to be renamed.</param>
            <param name="newFolderName">New folder name.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\RenameMailbox_TaskAsync,$ComponentPro.Mail\Imap\Async\RenameMailbox_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.RenameFolderAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously renames a specified folder to a new name.
            </summary>
            <param name="folderName">Folder to be renamed.</param>
            <param name="newFolderName">New folder name.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\RenameMailbox_TaskAsync,$ComponentPro.Mail\Imap\Async\RenameMailbox_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.RenameFolderAsync(System.String,System.String)">
            <summary>
            Asynchronously renames a specified folder to a new name.
            </summary>
            <param name="folderName">Folder to be renamed.</param>
            <param name="newFolderName">New folder name.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\RenameMailbox_TaskAsync,$ComponentPro.Mail\Imap\Async\RenameMailbox_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnSubscribeCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.SubscribeCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SubscribeAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously subscribes to the specified folder of the IMAP4 account, adding it to a list of active folders that
            appear in the folder <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String,System.Boolean)">listings</see> with <b>subscribedOnly</b> parameter set
            to <c>true</c>.
            </summary>
            <param name="folder">The full name of the folder to be subscribed.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Subscribe_TaskAsync,$ComponentPro.Mail\Imap\Async\Subscribe_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SubscribeAsync(System.String,System.Object)">
            <summary>
            Asynchronously subscribes to the specified folder of the IMAP4 account, adding it to a list of active folders that
            appear in the folder <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String,System.Boolean)">listings</see> with <b>subscribedOnly</b> parameter set
            to <c>true</c>.
            </summary>
            <param name="folder">The full name of the folder to be subscribed.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Subscribe_TaskAsync,$ComponentPro.Mail\Imap\Async\Subscribe_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SubscribeAsync(System.String)">
            <summary>
            Asynchronously subscribes to the specified folder of the IMAP4 account, adding it to a list of active folders that
            appear in the folder <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String,System.Boolean)">listings</see> with <b>subscribedOnly</b> parameter set
            to <c>true</c>.
            </summary>
            <param name="folder">The full name of the folder to be subscribed.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Subscribe_TaskAsync,$ComponentPro.Mail\Imap\Async\Subscribe_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnUnsubscribeCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.UnsubscribeCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UnsubscribeAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously unsubscribes the previously subscribed folder (using the <see cref="M:ComponentPro.Net.Mail.Imap.Subscribe(System.String)"/> method) of the IMAP4 account, removing it from the list of active folders that
            appear in the folder <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String,System.Boolean)">listings</see> with <b>subscribedOnly</b> parameter set
            to <c>true</c>.
            </summary>
            <param name="folder">The full name of the folder to be unsubscribed.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\subscribe_TaskAsync, $ComponentPro.Mail\Imap\Async\subscribe_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UnsubscribeAsync(System.String,System.Object)">
            <summary>
            Asynchronously unsubscribes the previously subscribed folder (using the <see cref="M:ComponentPro.Net.Mail.Imap.Subscribe(System.String)"/> method) of the IMAP4 account, removing it from the list of active folders that
            appear in the folder <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String,System.Boolean)">listings</see> with <b>subscribedOnly</b> parameter set
            to <c>true</c>.
            </summary>
            <param name="folder">The full name of the folder to be unsubscribed.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\subscribe_TaskAsync, $ComponentPro.Mail\Imap\Async\subscribe_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UnsubscribeAsync(System.String)">
            <summary>
            Asynchronously unsubscribes the previously subscribed folder (using the <see cref="M:ComponentPro.Net.Mail.Imap.Subscribe(System.String)"/> method) of the IMAP4 account, removing it from the list of active folders that
            appear in the folder <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders(System.String,System.Boolean)">listings</see> with <b>subscribedOnly</b> parameter set
            to <c>true</c>.
            </summary>
            <param name="folder">The full name of the folder to be unsubscribed.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\subscribe_TaskAsync, $ComponentPro.Mail\Imap\Async\subscribe_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnGetFolderInfoCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.Folder})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.GetFolderInfoCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.GetFolderInfoAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.Folder},System.Object)">
            <summary>
            Asynchronously gets folder information without selecting it. Only <see cref="P:ComponentPro.Net.Mail.Folder.TotalMessages"/>, 
            <see cref="P:ComponentPro.Net.Mail.Folder.RecentMessages"/>, <see cref="P:ComponentPro.Net.Mail.Folder.NotSeenMessages"/>, 
            <see cref="P:ComponentPro.Net.Mail.Folder.UidValidity"/>, and <see cref="P:ComponentPro.Net.Mail.Folder.UidNext"/> properties 
            of the <see cref="T:ComponentPro.Net.Mail.Folder"/> class are available after calling this method.
            </summary>
            <param name="folder">The folder name to get information about.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\GetFolderInfo_TaskAsync, $ComponentPro.Mail\Imap\Async\GetFolderInfo_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.GetFolderInfoAsync(System.String,System.Object)">
            <summary>
            Asynchronously gets folder information without selecting it. Only <see cref="P:ComponentPro.Net.Mail.Folder.TotalMessages"/>, 
            <see cref="P:ComponentPro.Net.Mail.Folder.RecentMessages"/>, <see cref="P:ComponentPro.Net.Mail.Folder.NotSeenMessages"/>, 
            <see cref="P:ComponentPro.Net.Mail.Folder.UidValidity"/>, and <see cref="P:ComponentPro.Net.Mail.Folder.UidNext"/> properties 
            of the <see cref="T:ComponentPro.Net.Mail.Folder"/> class are available after calling this method.
            </summary>
            <param name="folder">The folder name to get information about.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\GetFolderInfo_TaskAsync, $ComponentPro.Mail\Imap\Async\GetFolderInfo_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.GetFolderInfoAsync(System.String)">
            <summary>
            Asynchronously gets folder information without selecting it. Only <see cref="P:ComponentPro.Net.Mail.Folder.TotalMessages"/>, 
            <see cref="P:ComponentPro.Net.Mail.Folder.RecentMessages"/>, <see cref="P:ComponentPro.Net.Mail.Folder.NotSeenMessages"/>, 
            <see cref="P:ComponentPro.Net.Mail.Folder.UidValidity"/>, and <see cref="P:ComponentPro.Net.Mail.Folder.UidNext"/> properties 
            of the <see cref="T:ComponentPro.Net.Mail.Folder"/> class are available after calling this method.
            </summary>
            <param name="folder">The folder name to get information about.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\GetFolderInfo_TaskAsync, $ComponentPro.Mail\Imap\Async\GetFolderInfo_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnSetMailboxCheckpointCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.SetMailboxCheckpointCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SetMailboxCheckpointAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously requests a checkpoint of the currently selected mailbox.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\SetMailboxCheckpoint_TaskAsync, $ComponentPro.Mail\Imap\Async\SetMailboxCheckpoint_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SetMailboxCheckpointAsync(System.Object)">
            <summary>
            Asynchronously requests a checkpoint of the currently selected mailbox.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\SetMailboxCheckpoint_TaskAsync, $ComponentPro.Mail\Imap\Async\SetMailboxCheckpoint_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SetMailboxCheckpointAsync">
            <summary>
            Asynchronously requests a checkpoint of the currently selected mailbox.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\SetMailboxCheckpoint_TaskAsync, $ComponentPro.Mail\Imap\Async\SetMailboxCheckpoint_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnSelectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.SelectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SelectAsync(System.String,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously selects the specified folder so that its messages can be accessed.
            </summary>
            <param name="folder">The full name of the folder to be selected.</param>
            <param name="readOnly">Specifies whether the folder is to be selected as read-only.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Select_TaskAsync, $ComponentPro.Mail\Imap\Async\Select_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SelectAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously selects the specified folder so that its messages can be accessed.
            </summary>
            <param name="folder">The full name of the folder to be selected.</param>
            <param name="readOnly">Specifies whether the folder is to be selected as read-only.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Select_TaskAsync, $ComponentPro.Mail\Imap\Async\Select_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SelectAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously selects the specified folder so that its messages can be accessed.
            </summary>
            <param name="folder">The full name of the folder to be selected.</param>
            <param name="readOnly">Specifies whether the folder is to be selected as read-only.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Select_TaskAsync, $ComponentPro.Mail\Imap\Async\Select_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SelectAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously selects the specified folder so that its messages can be accessed.
            </summary>
            <param name="folder">The full name of the folder to be selected.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Select_TaskAsync, $ComponentPro.Mail\Imap\Async\Select_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SelectAsync(System.String,System.Object)">
            <summary>
            Asynchronously selects the specified folder so that its messages can be accessed.
            </summary>
            <param name="folder">The full name of the folder to be selected.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Select_TaskAsync, $ComponentPro.Mail\Imap\Async\Select_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SelectAsync(System.String)">
            <summary>
            Asynchronously selects the specified folder so that its messages can be accessed.
            </summary>
            <param name="folder">The full name of the folder to be selected.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Select_TaskAsync, $ComponentPro.Mail\Imap\Async\Select_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnDeselectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.DeselectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeselectAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously deselects the currently selected folder and optionally removes all messages marked as deleted 
            (by using <see cref="O:DeleteMessage"/>) from the current folder. After calling this method, <see cref="P:ComponentPro.Net.Mail.Imap.WorkingFolder"/> will be null.
            </summary>
            <param name="purgeDeleted">Indicates whether to permanently removes all messages marked as deleted.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Deselect_TaskAsync, $ComponentPro.Mail\Imap\Async\Deselect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeselectAsync(System.Boolean,System.Object)">
            <summary>
            Asynchronously deselects the currently selected folder and optionally removes all messages marked as deleted 
            (by using <see cref="O:DeleteMessage"/>) from the current folder. After calling this method, <see cref="P:ComponentPro.Net.Mail.Imap.WorkingFolder"/> will be null.
            </summary>
            <param name="purgeDeleted">Indicates whether to permanently removes all messages marked as deleted.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Deselect_TaskAsync, $ComponentPro.Mail\Imap\Async\Deselect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeselectAsync(System.Boolean)">
            <summary>
            Asynchronously deselects the currently selected folder and optionally removes all messages marked as deleted 
            (by using <see cref="O:DeleteMessage"/>) from the current folder. After calling this method, <see cref="P:ComponentPro.Net.Mail.Imap.WorkingFolder"/> will be null.
            </summary>
            <param name="purgeDeleted">Indicates whether to permanently removes all messages marked as deleted.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Deselect_TaskAsync, $ComponentPro.Mail\Imap\Async\Deselect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeselectAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously deselects the currently selected folder and permanently removes all messages marked as deleted 
            (by using <see cref="O:DeleteMessage"/>) from the current folder. After calling this method, <see cref="P:ComponentPro.Net.Mail.Imap.WorkingFolder"/> will be null.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Deselect_TaskAsync, $ComponentPro.Mail\Imap\Async\Deselect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeselectAsync(System.Object)">
            <summary>
            Asynchronously deselects the currently selected folder and permanently removes all messages marked as deleted 
            (by using <see cref="O:DeleteMessage"/>) from the current folder. After calling this method, <see cref="P:ComponentPro.Net.Mail.Imap.WorkingFolder"/> will be null.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Deselect_TaskAsync, $ComponentPro.Mail\Imap\Async\Deselect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.DeselectAsync">
            <summary>
            Asynchronously deselects the currently selected folder and permanently removes all messages marked as deleted 
            (by using <see cref="O:DeleteMessage"/>) from the current folder. After calling this method, <see cref="P:ComponentPro.Net.Mail.Imap.WorkingFolder"/> will be null.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Deselect_TaskAsync, $ComponentPro.Mail\Imap\Async\Deselect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.Imap"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Cancel">
            <summary>
            Cancels the current operation.
            </summary>
            <example source="$ComponentPro.Mail\Imap/Cancel"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Connect(System.String)">
            <summary>
            Connects to an IMAP4 server on the standard IMAP4 port (143).
            </summary>
            <param name="serverName">Remote hostname or address in dot notation.</param>
            <returns>The welcome message returned by the remote IMAP server.</returns>
            <example source="$ComponentPro.Mail\Imap/Connect,$ComponentPro.Mail\Imap/Connect_Proxy"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Connect(System.String,System.Int32)">
            <summary>
            Connects to the IMAP server.
            </summary>
            <param name="serverName">Remote hostname or address in dot notation.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. The standard IMAP4 port is 143. For TLS/SSL connections, dedicated port is 993.</param>
            <returns>The welcome message returned by the server.</returns>
            <example source="$ComponentPro.Mail\Imap/Connect"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Connect(System.String,ComponentPro.Net.SecurityMode)">
            <summary>
            Connects to the IMAP server. Use a port corresponding to the specified security mode.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="security">Connection security.</param>
            <returns>The welcome message returned by the server.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Connect(System.String,System.Int32,ComponentPro.Net.SecurityMode)">
            <summary>
            Connects to the IMAP server.
            </summary>
            <param name="serverName">Remote hostname or address in dot notation.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. The standard IMAP4 port is 143. For TLS/SSL connections, dedicated port is 993.</param>
            <param name="securityMode">The security mode.</param>
            <returns>The welcome message returned by the server.</returns>
            <example source="$ComponentPro.Mail\Imap/Connect_Explicit, $ComponentPro.Mail\Imap/Connect_Implicit"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Disconnect">
            <summary>
            Disconnects from the IMAP server and returns exit message from the server.
            </summary>
            <returns>The exit message returned by the server.</returns>
            <example source="$ComponentPro.Mail\Imap/Connect,$ComponentPro.Mail\Imap/Connect_Explicit"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UpgradeConnection">
            <summary>
            Secures the connection with TLS/SSL using default parameters.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the specified user to the remote IMAP server with the specified credentials.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <remarks>
            UltimateMail will try to use the most secure method supported by the server.
            The order of preference: CRAM-MD5, DIGEST-MD5, PLAIN, LOGIN, ClearText, EXTERNAL, GSSAPI, NTLM.
            The NTLM, GSSAPI and EXTERNAL methods are only attempted if no other method is available.
            </remarks>
            <example source="$ComponentPro.Mail\Imap\Connect"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Authenticate(ComponentPro.Net.Mail.ImapAuthenticationMethod)">
            <summary>
            Authenticates the user to the remote IMAP server using the specified authentication method that 
            does not require credentials. Only NTLM, GSSAPI and External methods are supported.
            </summary>
            <param name="method">The authentication method.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Authenticate(System.String,System.String,ComponentPro.Net.Mail.ImapAuthenticationMethod)">
            <summary>
            Authenticates the specified user to the remote IMAP server with the specified credentials using the specified authentication method.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="method">The authentication method.</param>
            <example source="$ComponentPro.Mail\Imap/Connect_Ntlm"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.Authenticate(System.String,ComponentPro.Net.Mail.ImapAuthenticationMethod)">
            <summary>
            Authenticates the user to the IMAP server using an OAuth token.
            </summary>
            <param name="token">The authentication token.</param>
            <param name="method">Authentication method (only OAuth 2.0 is supported at the moment).</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CheckForUpdates(System.Int32)">
            <summary>
            Sends NOOP or IDLE command to the server and checks for IMAP server notifications in the specified amount of time.
            </summary>
            <param name="duration">Duration of the idle interval, in miliseconds.</param>
            <returns>If any new notifications were received, it returns <c>true</c> and <see cref="E:ComponentPro.Net.Mail.Imap.Update"/> event is fired; otherwise is <c>false</c>.</returns>
            <remarks>
            <p>
            The <see cref="M:ComponentPro.Net.Mail.Imap.CheckForUpdates(System.Int32)"/> method is useful when you want to check for any possible updates including message deleted, message flags changed, etc. from the server.
            See <see cref="T:ComponentPro.Net.Mail.ImapUpdateEvent"/> for a list of supported notifications.
            </p>
            <p>
            Typically, a client application will call <see cref="M:ComponentPro.Net.Mail.Imap.CheckForUpdates(System.Int32)"/> periodically while idle.
            </p>
            <p>
            This method represents IMAP NOOP or IDLE command. IDLE is used whenever the server supports this command. 
            NOOP command is always used when the duration is less than 10 milliseconds.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/Noop"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CheckForUpdates">
            <summary>
            Sends NOOP or IDLE command to the server and checks for IMAP server notifications.
            </summary>
            <returns>If any new notifications were received, it returns <c>true</c> and <see cref="E:ComponentPro.Net.Mail.Imap.Update"/> event is fired; otherwise is <c>false</c>.</returns>
            <remarks>
            <p>
            The <see cref="M:ComponentPro.Net.Mail.Imap.CheckForUpdates"/> method is useful when you want to check for any possible updates including message deleted, message flags changed, etc. from the server.
            See <see cref="T:ComponentPro.Net.Mail.ImapUpdateEvent"/> for a list of supported notifications.
            </p>
            <p>
            Typically, a client application will call <see cref="O:CheckForUpdates"/> periodically while idle.
            </p>
            <p>
            This method represents IMAP NOOP command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/Noop"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.SendCommand(System.String,System.Object[])">
            <summary>
            Sends user-defined command to the server.
            </summary>
            <param name="command">User-defined command text (without line terminator) (eg. "CAPABILITY").</param>
            <param name="parameters">List of parameters. Allowed types are <see cref="T:System.String"/> and a byte array.</param>
            <returns>The ID (tag in IMAP4 terms) of the message, or a null reference (Nothing in Visual Basic) if server does not support it.</returns>
            <remarks>
            <p>
            After calling this method. You need to call the <see cref="M:ComponentPro.Net.Mail.Imap.ReadResponse"/> method to read the response of the server for the command you have sent.
            </p>
            <p>
            If the specified parameters are string, they are sent without conversion. Byte array parameters are sent as literals - binary blocks of data.
            Having good understanding of IMAP protocol is strongly recommended when using this method.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\SendCommand"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ReadResponse">
            <summary>
            Returns the corresponding response of the IMAP server to the command that was sent using the <see cref="M:ComponentPro.Net.Mail.Imap.SendCommand(System.String,System.Object[])"/> method.
            </summary>
            <returns>Response of the IMAP server.</returns>
            <example source="$ComponentPro.Mail\Imap\SendCommand"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representing this object</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CopyMessage(ComponentPro.Net.Mail.ImapMessageSet,System.String)">
            <summary>
            Copies messages from the current folder that belong to a specified message set to the specified folder.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="destinationFolder">Name of the mailbox that will receive copies of messages.</param>
            <returns>A list of the target messages' unique IDs, or null (Nothing in Visual Basic) 
            if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            This method represents IMAP COPY command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/CopyMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CopyMessage(System.Int32,System.String)">
            <summary>
            Copies a message with the specified message inbox index to the specified folder.
            </summary>
            <param name="messageInboxIndex">Message inbox index.</param>
            <param name="destinationFolder">Folder that will receive copies of the message.</param>
            <returns>Unique ID of the target message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            This method represents IMAP COPY command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/CopyMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CopyMessage(System.String,System.String)">
            <summary>
            Copies a message with the specified unique ID to the specified folder.
            </summary>
            <param name="uniqueId">Message unique ID.</param>
            <param name="destinationFolder">Folder that will receive copies of the message.</param>
            <returns>Unique ID of the target message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            This method represents IMAP COPY command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap/CopyMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.MoveMessage(System.Int32,System.String)">
            <summary>
            Moves a message with the specified sequence number from the current mailbox to another mailbox.
            </summary>
            <param name="sequenceNumber">The message sequence number.</param>
            <param name="destinationFolder">The mailbox that messages will be moved to.</param>
            <remarks>
            This method represents IMAP COPY and IMAP STOR commands.
            </remarks>
            <example source="$ComponentPro.Mail\Imap/MoveMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.MoveMessage(System.String,System.String)">
            <summary>
            Moves a message with the specified message unique ID from the current mailbox to another mailbox.
            </summary>
            <param name="uniqueId">The message unique id.</param>
            <param name="destinationFolder">The mailbox that messages will be moved to.</param>
            <remarks>
            This method represents IMAP COPY and IMAP STOR commands.
            </remarks>
            <example source="$ComponentPro.Mail\Imap/MoveMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.MoveMessage(ComponentPro.Net.Mail.ImapMessageSet,System.String)">
            <summary>
            Moves messages (in the specified message set) from the current mailbox to the specified mailbox.
            </summary>
            <param name="messageSet">The message set.</param>
            <param name="destinationFolder">The mailbox that messages will be moved to.</param>
            <example source="$ComponentPro.Mail\Imap/MoveMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])">
            <summary>
            Uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="message">The mail message object.</param>
            <param name="flags">The message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            This method represents IMAP APPEND command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\UploadMailMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,System.String,System.String,System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])">
            <summary>
            Uploads the message to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="flags">Message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            This method represents IMAP APPEND command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\UploadMailMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])">
            <summary>
            Uploads the message read from the stream to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="input">The input stream.</param>
            <param name="flags">Message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            The data of the input stream be in MIME format. In order to upload an Outlook '.msg' message, load the message using the <see cref="O:ComponentPro.Net.Mail.MailMessage.Load"/> methods and 
            upload it using the <see cref="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])"/> method.
            </p>
            <p>
            This method represents IMAP APPEND command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\UploadMessageStream"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])">
            <summary>
            Uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="path">The path to the mail message file.</param>
            <param name="flags">The message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            The file content must be in MIME format. MIME files often have the '.eml' extension. 
            Outlook mail message '.msg' cannot be uploaded using this method. In order to upload an Outlook '.msg' message, load the message using the <see cref="O:ComponentPro.Net.Mail.MailMessage.Load"/> methods and 
            upload it using the <see cref="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])"/> method.
            </p>
            <p>
            This method represents IMAP APPEND command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\UploadMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,ComponentPro.Net.Mail.MailMessage)">
            <summary>
            Uploads the message to the specified folder.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="message">Message to upload.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension.</returns>
            <remarks>
            <p>
            This method represents IMAP APPEND command.
            </p>
            <p>
            Unique ID of the message will be returned if the server supports the <see cref="T:ComponentPro.Net.Mail.ImapFeatures"/>.UniqueIdPlus extension
            and it is enabled. See <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> and <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/>.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Uploads the message to the specified folder.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension.</returns>
            <remarks>
            <p>
            This method represents IMAP APPEND command.
            </p>
            <p>
            Unique ID of the message will be returned if the server supports the <see cref="T:ComponentPro.Net.Mail.ImapFeatures"/>.UniqueIdPlus extension
            and it is enabled. See <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> and <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/>.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,System.IO.Stream)">
            <summary>
            Uploads the message read from the stream to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="input">The input stream.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension.</returns>
            <remarks>
            <p>
            The stream must contain data in MIME format, other formats are not supported.
            MIME files often have the '.eml' extension and are produced by Outlook Express.
            In contrast, Outlook produces '.msg' files that are not MIME files and therefore
            cannot be uploaded using this method.
            </p>
            <p>
            This method represents IMAP APPEND command.
            </p>
            <p>
            Unique ID of the message will be returned if the server supports the <see cref="T:ComponentPro.Net.Mail.ImapFeatures"/>.UniqueIdPlus extension
            and it is enabled. See <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> and <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/>.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,System.String)">
            <summary>
            Uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="path">The path to the mail message file.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension.</returns>
            <remarks>
            <p>
            The file must be in MIME format, other formats are not supported.
            MIME files often have the '.eml' extension and are produced by Outlook Express.
            In contrast, Outlook produces '.msg' files that are not MIME files and therefore
            cannot be uploaded using this method.
            </p>
            <p>
            This method represents IMAP APPEND command.
            </p>
            <p>
            Unique ID of the message will be returned if the server supports the <see cref="T:ComponentPro.Net.Mail.ImapFeatures"/>.UniqueIdPlus extension
            and it is enabled. See <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> and <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/>.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="message">The mail message object.</param>
            <param name="flags">The message flags.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            This method represents IMAP APPEND command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\UploadMailMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,System.String,System.String,System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Uploads the message to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="flags">Message flags.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            This method represents IMAP APPEND command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\UploadMailMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Uploads the message read from the stream to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="input">The input stream.</param>
            <param name="flags">Message flags.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            The data of the input stream be in MIME format. In order to upload an Outlook '.msg' message, load the message using the <see cref="O:ComponentPro.Net.Mail.MailMessage.Load"/> methods and 
            upload it using the <see cref="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])"/> method.
            </p>
            <p>
            This method represents IMAP APPEND command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\UploadMessageStream"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="path">The path to the mail message file.</param>
            <param name="flags">The message flags.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            The file content must be in MIME format. MIME files often have the '.eml' extension. 
            Outlook mail message '.msg' cannot be uploaded using this method. In order to upload an Outlook '.msg' message, load the message using the <see cref="O:ComponentPro.Net.Mail.MailMessage.Load"/> methods and 
            upload it using the <see cref="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])"/> method.
            </p>
            <p>
            This method represents IMAP APPEND command.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Imap\UploadMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadRawMessage(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,ComponentPro.Net.Mail.MailDateTime)">
            <summary>
            Uploads a mail message inside the specified data stream to the specified folder, assigns the specified date and flags to this message.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="input">The input stream. This stream must contain data in MIME format.</param>
            <param name="flags">The message flags.</param>
            <param name="internalDate">The IMAP message date/time.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            The supplied stream must represent a valid MIME format message because the <see cref="O:UploadRawMessage"/> method does not 
            parse the message like <see cref="O:UploadMessage"/> methods. MIME files often have the '.eml' extension. 
            Outlook mail message '.msg' cannot be uploaded using this method. In order to upload an Outlook '.msg' message, load the message using the <see cref="O:ComponentPro.Net.Mail.MailMessage.Load"/> methods and 
            upload it using the <see cref="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])"/> method.
            </p>
            <p>
            This method represents IMAP APPEND command.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadRawMessage(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,ComponentPro.Net.Mail.MailDateTime,System.String[])">
            <summary>
            Uploads a mail message inside the specified data stream to the specified folder, assigns the specified date and flags to this message.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="input">The input stream. This stream must contain data in MIME format.</param>
            <param name="flags">The message flags.</param>
            <param name="internalDate">The IMAP message date/time.</param>
            <param name="keywords">Keywords to set.</param>
            <returns>Unique ID of the message, or null (Nothing in Visual Basic) if the server does not support the UIDPLUS extension (check in <see cref="P:ComponentPro.Net.Mail.Imap.SupportedFeatures"/> property) or not allowed in the <see cref="P:ComponentPro.Net.Mail.Imap.EnabledFeatures"/> property.</returns>
            <remarks>
            <p>
            The supplied stream must represent a valid MIME format message because the <see cref="O:UploadRawMessage"/> method does not 
            parse the message like <see cref="O:UploadMessage"/> methods. MIME files often have the '.eml' extension. 
            Outlook mail message '.msg' cannot be uploaded using this method. In order to upload an Outlook '.msg' message, load the message using the <see cref="O:ComponentPro.Net.Mail.MailMessage.Load"/> methods and 
            upload it using the <see cref="M:ComponentPro.Net.Mail.Imap.UploadMessage(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])"/> method.
            </p>
            <p>
            This method represents IMAP APPEND command.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnCopyMessageCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.ImapCopyMessageReference})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.CopyMessageCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CopyMessageAsync(ComponentPro.Net.Mail.ImapMessageSet,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapCopyMessageReference},System.Object)">
            <summary>
            Asynchronously copies messages from the current folder that belong to a specified message set to the specified folder.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="destinationFolder">Folder that will receive copies of messages.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CopyMultipleMessages_TaskAsync, $ComponentPro.Mail\Imap\Async\CopyMultipleMessages_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CopyMessageAsync(ComponentPro.Net.Mail.ImapMessageSet,System.String,System.Object)">
            <summary>
            Asynchronously copies messages from the current folder that belong to a specified message set to the specified folder.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="destinationFolder">Folder that will receive copies of messages.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CopyMultipleMessages_TaskAsync, $ComponentPro.Mail\Imap\Async\CopyMultipleMessages_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CopyMessageAsync(ComponentPro.Net.Mail.ImapMessageSet,System.String)">
            <summary>
            Asynchronously copies messages from the current folder that belong to a specified message set to the specified folder.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <param name="destinationFolder">Folder that will receive copies of messages.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CopyMultipleMessages_TaskAsync, $ComponentPro.Mail\Imap\Async\CopyMultipleMessages_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CopyMessageAsync(System.Int32,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapCopyMessageReference},System.Object)">
            <summary>
            Asynchronously copies a message with the specified sequence number to the specified folder.
            </summary>
            <param name="messageInboxIndex">The message inbox index number.</param>
            <param name="destinationFolder">Name of the folder that will receive copies of the message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CopySingleMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\CopySingleMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CopyMessageAsync(System.Int32,System.String,System.Object)">
            <summary>
            Asynchronously copies a message with the specified sequence number to the specified folder.
            </summary>
            <param name="messageInboxIndex">The message inbox index number.</param>
            <param name="destinationFolder">Name of the folder that will receive copies of the message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CopySingleMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\CopySingleMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CopyMessageAsync(System.Int32,System.String)">
            <summary>
            Asynchronously copies a message with the specified sequence number to the specified folder.
            </summary>
            <param name="messageInboxIndex">The message inbox index number.</param>
            <param name="destinationFolder">Name of the folder that will receive copies of the message.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CopySingleMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\CopySingleMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CopyMessageAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.ImapCopyMessageReference},System.Object)">
            <summary>
            Asynchronously copies a message with the specified unique ID to the specified folder.
            </summary>
            <param name="uniqueId">The message unique id.</param>
            <param name="destinationFolder">Name of the folder that will receive copies of the message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CopySingleMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\CopySingleMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CopyMessageAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously copies a message with the specified unique ID to the specified folder.
            </summary>
            <param name="uniqueId">The message unique id.</param>
            <param name="destinationFolder">Name of the folder that will receive copies of the message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CopySingleMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\CopySingleMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.CopyMessageAsync(System.String,System.String)">
            <summary>
            Asynchronously copies a message with the specified unique ID to the specified folder.
            </summary>
            <param name="uniqueId">The message unique id.</param>
            <param name="destinationFolder">Name of the folder that will receive copies of the message.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CopySingleMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\CopySingleMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnMoveMessageCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the MoveMessageCompleted event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.MoveMessageAsync(ComponentPro.Net.Mail.ImapMessageSet,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously moves the specified messages from the currently selected mailbox to the specified mailbox.
            </summary>
            <param name="messageSet">The message set.</param>
            <param name="destinationFolder">The folder that messages will be moved to.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns> An object that references the asynchronous operation. </returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.MoveMessageAsync(ComponentPro.Net.Mail.ImapMessageSet,System.String,System.Object)">
            <summary>
            Asynchronously moves the specified messages from the currently selected mailbox to the specified mailbox.
            </summary>
            <param name="messageSet">The message set.</param>
            <param name="destinationFolder">The folder that messages will be moved to.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>
            An object that references the asynchronous operation.
            </returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.MoveMessageAsync(ComponentPro.Net.Mail.ImapMessageSet,System.String)">
            <summary>
            Asynchronously moves the specified messages from the currently selected mailbox to the specified mailbox.
            </summary>
            <param name="messageSet">The message set.</param>
            <param name="destinationFolder">The folder that messages will be moved to.</param>
            <returns>
            An object that references the asynchronous operation.
            </returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.MoveMessageAsync(System.Int32,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins asynchronous Move operation.
            Copies a message with the specified sequence number to the specified folder.
            </summary>
            <param name="messageInboxIndex">The sequence number of the message in the currently selected mailbox.</param>
            <param name="destinationFolder">The folder that messages will be copied to.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>
            An object that references the asynchronous operation.
            </returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.MoveMessageAsync(System.Int32,System.String,System.Object)">
            <summary>
            Begins asynchronous Move operation.
            Copies a message with the specified sequence number to the specified folder.
            </summary>
            <param name="messageInboxIndex">The sequence number of the message in the currently selected mailbox.</param>
            <param name="destinationFolder">The folder that messages will be copied to.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>
            An object that references the asynchronous operation.
            </returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.MoveMessageAsync(System.Int32,System.String)">
            <summary>
            Begins asynchronous Move operation.
            Copies a message with the specified sequence number to the specified folder.
            </summary>
            <param name="messageInboxIndex">The sequence number of the message in the currently selected mailbox.</param>
            <param name="destinationFolder">The folder that messages will be copied to.</param>
            <returns>
            An object that references the asynchronous operation.
            </returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.MoveMessageAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins asynchronous Move operation.
            Copies a message with the specified unique ID to the specified folder.
            </summary>
            <param name="uniqueId">The unique id of the message in the currently selected mailbox.</param>
            <param name="destinationFolder">The folder that messages will be copied to.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>
            An object that references the asynchronous operation.
            </returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.MoveMessageAsync(System.String,System.String,System.Object)">
            <summary>
            Begins asynchronous Move operation.
            Copies a message with the specified unique ID to the specified folder.
            </summary>
            <param name="uniqueId">The unique id of the message in the currently selected mailbox.</param>
            <param name="destinationFolder">The folder that messages will be copied to.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>
            An object that references the asynchronous operation.
            </returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.MoveMessageAsync(System.String,System.String)">
            <summary>
            Begins asynchronous Move operation.
            Copies a message with the specified unique ID to the specified folder.
            </summary>
            <param name="uniqueId">The unique id of the message in the currently selected mailbox.</param>
            <param name="destinationFolder">The folder that messages will be copied to.</param>
            <returns>
            An object that references the asynchronous operation.
            </returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnUploadRawMessageCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.UploadRawMessageCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadRawMessageAsync(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,ComponentPro.Net.Mail.MailDateTime,System.String[],ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads a mail message inside the specified data stream to the specified folder, assigns the specified date and flags to this message.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="input">The input stream. This stream must contain data in MIME format.</param>
            <param name="flags">The message flags.</param>
            <param name="internalDate">The IMAP message date/time.</param>
            <param name="keywords">Keywords to set.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadRawMessageAsync(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,ComponentPro.Net.Mail.MailDateTime,System.String[],System.Object)">
            <summary>
            Asynchronously uploads a mail message inside the specified data stream to the specified folder, assigns the specified date and flags to this message.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="input">The input stream. This stream must contain data in MIME format.</param>
            <param name="flags">The message flags.</param>
            <param name="internalDate">The IMAP message date/time.</param>
            <param name="keywords">Keywords to set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadRawMessageAsync(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,ComponentPro.Net.Mail.MailDateTime,System.String[])">
            <summary>
            Asynchronously uploads a mail message inside the specified data stream to the specified folder, assigns the specified date and flags to this message.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="input">The input stream. This stream must contain data in MIME format.</param>
            <param name="flags">The message flags.</param>
            <param name="internalDate">The IMAP message date/time.</param>
            <param name="keywords">Keywords to set.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadRawMessageAsync(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,ComponentPro.Net.Mail.MailDateTime,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads a mail message inside the specified data stream to the specified folder, assigns the specified date and flags to this message.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="input">The input stream. This stream must contain data in MIME format.</param>
            <param name="flags">The message flags.</param>
            <param name="internalDate">The IMAP message date/time.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadRawMessageAsync(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,ComponentPro.Net.Mail.MailDateTime,System.Object)">
            <summary>
            Asynchronously uploads a mail message inside the specified data stream to the specified folder, assigns the specified date and flags to this message.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="input">The input stream. This stream must contain data in MIME format.</param>
            <param name="flags">The message flags.</param>
            <param name="internalDate">The IMAP message date/time.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadRawMessageAsync(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,ComponentPro.Net.Mail.MailDateTime)">
            <summary>
            Asynchronously uploads a mail message inside the specified data stream to the specified folder, assigns the specified date and flags to this message.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="input">The input stream. This stream must contain data in MIME format.</param>
            <param name="flags">The message flags.</param>
            <param name="internalDate">The IMAP message date/time.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.OnUploadMessageCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.UploadMessageCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags,System.String[],ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="message">The mail message object.</param>
            <param name="flags">The message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags,System.String[],System.Object)">
            <summary>
            Asynchronously uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="message">The mail message object.</param>
            <param name="flags">The message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])">
            <summary>
            Asynchronously uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="message">The mail message object.</param>
            <param name="flags">The message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="message">The mail message object.</param>
            <param name="flags">The message flags.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags,System.Object)">
            <summary>
            Asynchronously uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="message">The mail message object.</param>
            <param name="flags">The message flags.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Asynchronously uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="message">The mail message object.</param>
            <param name="flags">The message flags.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,ComponentPro.Net.Mail.MailMessage,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads the message to the specified folder.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="message">The mail message object.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,ComponentPro.Net.Mail.MailMessage,System.Object)">
            <summary>
            Asynchronously uploads the message to the specified folder.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="message">The mail message object.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,ComponentPro.Net.Mail.MailMessage)">
            <summary>
            Asynchronously uploads the message to the specified folder.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="message">The mail message object.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,System.String,System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags,System.String[],ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads the message to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="flags">Message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,System.String,System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags,System.String[],System.Object)">
            <summary>
            Asynchronously uploads the message to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="flags">Message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,System.String,System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])">
            <summary>
            Asynchronously uploads the message to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="flags">Message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,System.String,System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads the message to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="flags">Message flags.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,System.String,System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags,System.Object)">
            <summary>
            Asynchronously uploads the message to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="flags">Message flags.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,System.String,System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Asynchronously uploads the message to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="flags">Message flags.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,System.String,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads the message to the specified folder.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Asynchronously uploads the message to the specified folder.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Asynchronously uploads the message to the specified folder.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,System.String[],ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads the message read from the stream to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="input">The input stream.</param>
            <param name="flags">Message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,System.String[],System.Object)">
            <summary>
            Asynchronously uploads the message read from the stream to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="input">The input stream.</param>
            <param name="flags">Message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])">
            <summary>
            Asynchronously uploads the message read from the stream to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="input">The input stream.</param>
            <param name="flags">Message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads the message read from the stream to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="input">The input stream.</param>
            <param name="flags">Message flags.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags,System.Object)">
            <summary>
            Asynchronously uploads the message read from the stream to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="input">The input stream.</param>
            <param name="flags">Message flags.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.IO.Stream,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Asynchronously uploads the message read from the stream to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="input">The input stream.</param>
            <param name="flags">Message flags.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads the message read from the stream to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="input">The input stream.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.IO.Stream,System.Object)">
            <summary>
            Asynchronously uploads the message read from the stream to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="input">The input stream.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.IO.Stream)">
            <summary>
            Asynchronously uploads the message read from the stream to the specified folder and sets its flags.
            </summary>
            <param name="folder">Folder that will receive the message.</param>
            <param name="input">The input stream.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags,System.String[],ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="path">The path to the mail message file.</param>
            <param name="flags">The message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags,System.String[],System.Object)">
            <summary>
            Asynchronously uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="path">The path to the mail message file.</param>
            <param name="flags">The message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags,System.String[])">
            <summary>
            Asynchronously uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="path">The path to the mail message file.</param>
            <param name="flags">The message flags.</param>
            <param name="keywords">Keywords to set.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="path">The path to the mail message file.</param>
            <param name="flags">The message flags.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags,System.Object)">
            <summary>
            Asynchronously uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="path">The path to the mail message file.</param>
            <param name="flags">The message flags.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Asynchronously uploads the message read from a local file and sets its flags.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="path">The path to the mail message file.</param>
            <param name="flags">The message flags.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously uploads the message read from a local file.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="path">The path to the mail message file.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously uploads the message read from a local file.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="path">The path to the mail message file.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Imap.UploadMessageAsync(System.String,System.String)">
            <summary>
            Asynchronously uploads the message read from a local file.
            </summary>
            <param name="folder">The full name of the folder to upload the message to.</param>
            <param name="path">The path to the mail message file.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.AuthenticateCompleted">
            <summary>
            Occurs when an <see cref="O:ComponentPro.Net.Mail.Imap.AuthenticateAsync">asynchronous authentication operation</see> completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.ConnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.ConnectAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.DisconnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.DisconnectAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Imap\Async\Connect_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.UpgradeConnectionCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.UpgradeConnectionAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.ReadResponseCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.ReadResponseAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Imap\Async\SendCommand_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.SendCommandCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.SendCommandAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Imap\Async\SendCommand_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.CheckForUpdatesCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.CheckForUpdatesAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Noop_TaskAsync, $ComponentPro.Mail\Imap\Async\Noop_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.PurgeCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.PurgeAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Purge_TaskAsync, $ComponentPro.Mail\Imap\Async\Purge_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.FlagCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.FlagAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Flag_TaskAsync, $ComponentPro.Mail\Imap\Async\Flag_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.DeleteMessageCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.DeleteMessageAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteMessageIdSet_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteMessageIdSet_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.UndeleteMessageCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.UndeleteMessageAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UndeleteMessageIdSet_TaskAsync, $ComponentPro.Mail\Imap\Async\UndeleteMessageIdSet_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.DownloadMessageCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.DownloadMessageAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMessage_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.DownloadMailMessageCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.DownloadMailMessageAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DownloadMailMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\DownloadMailMessage_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.DownloadMessageHeadersCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.DownloadMessageHeadersAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.DownloadMessagePartCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.DownloadMessagePartAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.DownloadImapMessageCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.DownloadImapMessageAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.CommandResponse">
            <summary>
            Occurs when a command has been sent to or a response is received from the server.
            </summary>
            <example source="$ComponentPro.Mail\Imap\Events\CommandResponse"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.ListProcessing">
            <summary>
            Occurs when a response line from the IMAP server is processed.
            </summary>
            <example source="$ComponentPro.Mail\Imap/Events/ListProcessing"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:ComponentPro.Net.Mail.Imap"/> object is changed.
            </summary>
            <example source="$ComponentPro.Mail\Imap/Events/StateChanged"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.Progress">
            <summary>
            Occurs when data is send or received.
            </summary>
            <example source="$ComponentPro.Mail\Imap/Events/Progress"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.Update">
            <summary>
            Occurs when a notification message is received.
            </summary>
            <example source="$ComponentPro.Mail\Imap/Events/Update,$ComponentPro.Mail\Imap/Noop"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.CertificateReceived">
            <summary>
            Occurs when an IMAP server's certificate was received and verified.
            </summary>
            <example source="$ComponentPro.Mail\Imap/Events/CertificateReceived"/>
            <seealso cref="E:ComponentPro.Net.Mail.Imap.CertificateRequired"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.CertificateRequired">
            <summary>
            Occurs when a client certificate is required by the IMAP server, or the one provided was not accepted.
            </summary>
            <example source="$ComponentPro.Mail\Imap/Events/CertificateRequired"/>
            <seealso cref="E:ComponentPro.Net.Mail.Imap.CertificateReceived"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.ListMessagesCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.ListMessagesAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\ListMessages_TaskAsync, $ComponentPro.Mail\Imap\Async\ListMessages_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.FolderExistsCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.FolderExistsAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap/TaskAsync/FolderExists_TaskAsync, $ComponentPro.Mail\Imap/Async/FolderExists_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.ListFoldersCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.ListFoldersAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap/Taskasync/ListFolders_TaskAsync, $ComponentPro.Mail\Imap/async/ListFolders_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.CreateFolderCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.CreateFolderAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CreateFolder_TaskAsync, $ComponentPro.Mail\Imap\Async\CreateFolder_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.DeleteFolderCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.DeleteFolderAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\DeleteFolder_TaskAsync, $ComponentPro.Mail\Imap\Async\DeleteFolder_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.RenameFolderCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.RenameFolderAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\RenameMailbox_TaskAsync,$ComponentPro.Mail\Imap\Async\RenameMailbox_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.SubscribeCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.SubscribeAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Subscribe_TaskAsync,$ComponentPro.Mail\Imap\Async\Subscribe_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.UnsubscribeCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.UnsubscribeAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\subscribe_TaskAsync, $ComponentPro.Mail\Imap\Async\subscribe_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.GetFolderInfoCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.GetFolderInfoAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\GetFolderInfo_TaskAsync, $ComponentPro.Mail\Imap\Async\GetFolderInfo_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.SetMailboxCheckpointCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.SetMailboxCheckpointAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\SetMailboxCheckpoint_TaskAsync, $ComponentPro.Mail\Imap\Async\SetMailboxCheckpoint_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.SelectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.SelectAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Select_TaskAsync, $ComponentPro.Mail\Imap\Async\Select_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.DeselectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.DeselectAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\Deselect_TaskAsync, $ComponentPro.Mail\Imap\Async\Deselect_Async"/>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.UserName">
            <summary>
            Gets the authenticated user name, if available.
            </summary>
            <value>User name, or null (Nothing in VB.NET).</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.ServerName">
            <summary>
            Gets the server name, if available.
            </summary>
            <value>Server name, or null (Nothing in VB.NET).</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.ServerPort">
            <summary>
            Gets the server port, if available.
            </summary>
            <value>server port, or 0.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.WorkingFolder">
            <summary>
            Gets the currently selected <see cref="T:ComponentPro.Net.Mail.Folder"/>, or null reference (or Nothing in VB.NET) if no mailbox is selected.
            </summary>
            <value>The Currently selected mailbox.</value>
            <remarks>
            Use <see cref="M:ComponentPro.Net.Mail.Imap.Select(System.String)"/> to select a mailbox and <see cref="O:Deselect"/> to deselect it.
            </remarks>
            <seealso cref="M:ComponentPro.Net.Mail.Imap.Select(System.String)"/>
            <seealso cref="O:Deselect"/>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.Proxy">
            <summary>
            Gets or sets the <see cref="T:ComponentPro.Net.WebProxyEx">server proxy</see>, if any, used to connect to the remote IMAP server.
            </summary>
            <value>The <see cref="T:ComponentPro.Net.WebProxyEx">server proxy</see>, if any, used to connect to the remote IMAP server.</value>
            <example source="$ComponentPro.Mail\Imap/Connect_Proxy"/>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> that is used to encode commands sent to the server, and decode replies from the server.
            </summary>
            <value>An <see cref="T:System.Text.Encoding">Encoding</see> value representing the encoding format. 
            By default, <see cref="T:System.Text.Encoding">Encoding.Default</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.Config">
            <summary>
            Gets or sets IMAP object settings.
            </summary>
            <value>IMAP object settings.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.SupportedFeatures">
            <summary>
            Gets the bit field specifying the extensions supported by the server.
            </summary>
            <value>Extensions supported by the server.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.EnabledFeatures">
            <summary>
            Gets or sets the bit field specifying the enabled extensions.
            </summary>
            <value>Enabled extensions.</value>
            <remarks>
            Enabled extensions will be used when appropriate.
            By default, all extensions are enabled.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.SupportedAuthenticationMethods">
            <summary>
            Gets the list of supported authentication methods.
            </summary>
            <returns>The list of supported authentication methods</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.IsConnectionSecured">
            <summary>
            Gets a boolean value indicating whether the current connection (if any) is secured with TLS/SSL layer.
            </summary>
            <value><c>true</c> if the current connection is TLS/SSL; <c>false</c> if the connection is not secure.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.Timeout">
            <summary>
            Gets or sets a value, in milliseconds, indicating after what period of time an IMAP operation 
            (sending commands, waiting for responses or time between data buffer transfers) should timeout. 
            </summary>
            <remarks>
            By default, this property is set to 60000 (60 seconds). Minimal value is 1000. 
            A value of -1 or 0 indicates that the request does not timeout.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.AbortTimeout">
            <summary>
            Gets or sets a value, in milliseconds, indicating after what period of time a IMAP <see cref="M:ComponentPro.Net.Mail.Imap.Cancel">abort operation</see> should timeout. 
            </summary>
            <remarks>
            By default, this property is set to 3000 (3 seconds). Minimal value is 1000.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.State">
            <summary>
            Gets the current state of the <see cref="T:ComponentPro.Net.Mail.Imap"/> object.
            </summary>
            <value>The current state.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.LocalEndPoint">
            <summary>
            Gets the local client <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The <see cref="T:System.Net.EndPoint"/> that the component is using for communications.</value>
            <remarks>
            The <see cref="P:ComponentPro.Net.Mail.Imap.LocalEndPoint"/> property gets an <see cref="T:System.Net.EndPoint"/> that contains the local IP address and port number to which your Socket is bound. 
            You must cast this <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. 
            You can then call the <see cref="P:System.Net.IPEndPoint.Address"/> method to retrieve the local <see cref="T:System.Net.IPAddress"/>, and the <see cref="P:System.Net.IPEndPoint.Port"/> method to retrieve the local port number.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.RemoteEndPoint">
            <summary>
            Gets the remote server <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The <see cref="T:System.Net.EndPoint"/> with which the Socket is communicating.</value>
            <remarks>
            If you are using a connection-oriented protocol, the RemoteEndPoint property gets the EndPoint that contains the remote 
            IP address and port number to which the Socket is connected. If you are using a connectionless protocol, 
            RemoteEndPoint contains the default remote IP address and port number with which the Socket will communicate. 
            You must cast this <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. 
            You can then call the <see cref="P:System.Net.IPEndPoint.Address"/> method to retrieve the remote <see cref="T:System.Net.IPAddress"/>, and the <see cref="P:System.Net.IPEndPoint.Port"/> method to retrieve the remote port number.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.IsConnected">
            <summary>
            Gets a boolean value indicating whether the connection has been established.
            </summary>
            <value><c>true</c> if the session is connected; otherwise is <c>false</c>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.IsAuthenticated">
            <summary>
            Gets a boolean value indicating whether the session is authenticated. 
            This is used to check whether the session has been automatically preauthenticated prior to calling the <see cref="O:Authenticate"/> method.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.ClearTextLoginDisabled">
            <summary>
            Returns a value indicating whether the clear text login is disabled.
            </summary>
            <remarks>
            Either use one of the more secure authentication methods, or upgrade
            to TLS/SSL if you wish to perform clear text login.
            </remarks>
            <value>A value indicating whether the clear text login is disabled.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Imap.IsBusy">
            <summary>
            Gets a value indicating whether the component is performing a lengthy operation.
            </summary>
            <value>A bool value indicating whether the component is busy because it's doing some work.</value>
            <returns><c>true</c> if there is any operation in progress; <c>false</c> otherwise.</returns>
            <remarks>
            When an operation is still in progress, it's not possible to start another operation.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.CopyMessageCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.CopyMessageAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\CopyMultipleMessages_TaskAsync, $ComponentPro.Mail\Imap\Async\CopyMultipleMessages_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.MoveMessageCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.MoveMessageAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.UploadRawMessageCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.UploadRawMessageAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.Imap.UploadMessageCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Imap.UploadMessageAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Imap\TaskAsync\UploadMessage_TaskAsync, $ComponentPro.Mail\Imap\Async\UploadMessage_Async"/>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapListProcessingType">
            <summary>
            Specifies the list type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapListProcessingType.MessageList">
            <summary>
            Processing message list.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapListProcessingType.FolderList">
            <summary>
            Processing IMAP folder list.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapListProcessingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.Mail.Imap.ListProcessing"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:ComponentPro.Net.Mail.ImapListProcessingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapListProcessingEventArgs">
            <summary>
            Provides data for the asynchronous method completed events.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapListProcessingEventArgs.Line">
            <summary>
            Gets the response line.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapListProcessingEventArgs.Command">
            <summary>
            Gets the IMAP command.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapListProcessingEventArgs.ListType">
            <summary>
            Gets the List Type.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapListProcessingEventArgs.ProcessedLines">
            <summary>
            Gets the number of processed lines.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapUpdateEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.Mail.Imap.Update"/> event of an <see cref="T:ComponentPro.Net.Mail.Imap"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.ImapUpdateEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapUpdateEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Mail.Imap.Update"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapUpdateEventArgs.Event">
            <summary>
            Gets the notification type.
            </summary>
            <value>Notification type.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapUpdateEventArgs.Response">
            <summary>
            Gets the IMAP response containing the notification.
            </summary>
            <value>IMAP response.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapUpdateEventArgs.Line">
            <summary>
            Gets the index of the line in response that contains this notification.
            </summary>
            <value>Index of the line in response that contains this notification.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapUpdateEventArgs.Solicited">
            <summary>
            Gets the value indicating whether the notification is a standard response to the requested command.
            </summary>
            <value>True if the notification was solicited, false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapUpdateEventArgs.Number">
            <summary>
            Gets the contents of the response line if it 
            was composed of a single integer number. Otherwise, zero is returned.
            </summary>
            <value>The contents of the response line if there was a number.</value>
            <remarks>
            This property will be set for <see cref="F:ComponentPro.Net.Mail.ImapUpdateEvent.MessageCount"/>, 
            <see cref="F:ComponentPro.Net.Mail.ImapUpdateEvent.RecentMessages"/> and
            <see cref="F:ComponentPro.Net.Mail.ImapUpdateEvent.MessageRemoved"/> notifications.
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapCopyMessageReference">
            <summary>
            Represents a result of the <see cref="M:ComponentPro.Net.Mail.Imap.CopyMessage(ComponentPro.Net.Mail.ImapMessageSet,System.String)">CopyMessage</see> method. It contains the source and new unique IDs and can map between them.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCopyMessageReference.GetTargetMessageSet">
            <summary>
            Gets a message set comprised of the new unique IDs.
            </summary>
            <returns>Message set.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCopyMessageReference.GetSourceMessageSet">
            <summary>
            Gets a message set comprised of the original unique IDs.
            </summary>
            <returns>Message set.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCopyMessageReference.GetSourceUniqueId(System.String)">
            <summary>
            Returns a unique ID of the source message corresponding to the specified target message unique ID.
            </summary>
            <param name="targetUniqueId">Target message unique ID.</param>
            <returns>Source message unique ID, or null if not present.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCopyMessageReference.GetTargetUniqueId(System.String)">
            <summary>
            Returns a unique ID of the target message corresponding to the specified source message unique ID.
            </summary>
            <param name="sourceUniqueId">Source message unique ID.</param>
            <returns>Target message unique ID, or null if not present.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCopyMessageReference.NewUniqueIds">
            <summary>
            Gets an array of the new unique IDs.
            </summary>
            <returns>Array of unique IDs.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCopyMessageReference.SourceUniqueIds">
            <summary>
            Gets an array of the original unique IDs.
            </summary>
            <returns>Array of unique IDs.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCopyMessageReference.CopiedMessageCount">
            <summary>
            Returns the number of copied messages.
            </summary>
            <value>The number of copied messages.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapSearchParameterType">
            <summary>
            Type of the <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> node.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapSearchParameterType.And">
            <summary>
            <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> node is AND inner node.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapSearchParameterType.Or">
            <summary>
            <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> node is OR inner node.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapSearchParameterType.Not">
            <summary>
            <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> node is NOT inner node.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapSearchParameterType.Leaf">
            <summary>
            <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> node is leaf node.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapCriterion">
            <summary>
            Represents a single IMAP search criterion for the <see cref="O:ComponentPro.Net.Mail.Imap.ListMessages"/> methods.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.ToString">
            <summary>
            Returns a string representing this IMAP search criterion.
            </summary>
            <returns>A string representing this IMAP search criterion.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.op_BitwiseOr(ComponentPro.Net.Mail.ImapCriterion,ComponentPro.Net.Mail.ImapCriterion)">
            <summary>
            Represents a logical OR operation on a set of <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> objects.
            </summary>
            <param name="a">The left criterion.</param>
            <param name="b">The right criterion.</param>
            <returns>An aggregate search criterion.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.op_BitwiseAnd(ComponentPro.Net.Mail.ImapCriterion,ComponentPro.Net.Mail.ImapCriterion)">
            <summary>
            Represents a logical AND operation on a set of <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> objects.
            </summary>
            <param name="a">The left criterion.</param>
            <param name="b">The right criterion.</param>
            <returns>An aggregate search criterion.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.op_Addition(ComponentPro.Net.Mail.ImapCriterion,ComponentPro.Net.Mail.ImapCriterion)">
            <summary>
            Represents a logical AND operation on a set of <see cref="T:ComponentPro.Net.Mail.ImapCriterion"/> objects.
            </summary>
            <param name="a">The left criterion.</param>
            <param name="b">The right criterion.</param>
            <returns>An aggregate search criterion.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.And(ComponentPro.Net.Mail.ImapCriterion[])">
            <summary>
            Multiple criteria combined using the AND operator - only messages that match all the criteria are matched.
            </summary>
            <param name="parameters">List of search parameters.</param>
            <returns>An aggregate search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.Or(ComponentPro.Net.Mail.ImapCriterion[])">
            <summary>
            Multiple criteria combined using the OR operator - messages that match any of the criteria are matched.
            </summary>
            <param name="parameters">List of search parameters.</param>
            <returns>An aggregate search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.Not(ComponentPro.Net.Mail.ImapCriterion)">
            <summary>
            Only match messages that don't match the specified criteria.
            </summary>
            <param name="parameter">Parameter not to match.</param>
            <returns>An aggregate search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.ArrivedOn(System.DateTime)">
            <summary>
            Messages that arrived on the specified date (disregarding time).
            </summary>
            <param name="on">Date. Time and time zone are ignored.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.ArrivedBetween(System.DateTime,System.DateTime)">
            <summary>
            Messages that arrived in the specified date interval (disregarding time).
            </summary>
            <param name="since">The lower bound of the date interval, or <see cref="F:System.DateTime.MinValue"/>. Time and time zone are ignored.</param>
            <param name="before">The upper bound of the date interval, or <see cref="F:System.DateTime.MaxValue"/>. Time and time zone are ignored.</param>
            <returns>A search parameter.</returns>
            <remarks>
            The bounds are also included in the interval.
            Time and time zone are ignored.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.SentOn(System.DateTime)">
            <summary>
            Messages that were sent on the specified date (disregarding time).
            </summary>
            <param name="on">Date. Time and time zone are ignored.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.SentBetween(System.DateTime,System.DateTime)">
            <summary>
            Messages that were sent in the specified date interval (disregarding time).
            </summary>
            <param name="since">The lower bound of the date interval, or <see cref="F:System.DateTime.MinValue"/>.</param>
            <param name="before">The upper bound of the date interval, or <see cref="F:System.DateTime.MaxValue"/>.</param>
            <returns>A search parameter.</returns>
            <remarks>
            The bounds are also included in the interval.
            Time and time zone are ignored.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.SizeBetween(System.Int64,System.Int64)">
            <summary>
            Messages with a size within the specified interval.
            </summary>
            <param name="min">The lower bound of interval, or 0. In bytes.</param>
            <param name="max">The upper bound of interval, or <see cref="F:System.Int64.MaxValue"/>. In bytes.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.SubjectHas(System.String)">
            <summary>
            Messages that contain the specified string in its subject field.
            </summary>
            <param name="queryTerm">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.BodyOrHeadersContain(System.String)">
            <summary>
            Messages that contain the specified string in its headers or body.
            </summary>
            <param name="queryTerm">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.BodyContains(System.String)">
            <summary>
            Messages that contain the specified string in its body.
            </summary>
            <param name="queryTerm">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.HeaderContains(System.String,System.String)">
            <summary>
            Messages that contain the specified string in the specified header.
            </summary>
            <param name="headerName">Header name to search, or an empty string to search all headers.</param>
            <param name="queryTerm">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.From(System.String)">
            <summary>
            Messages that contain the specified string in its From field.
            </summary>
            <param name="address">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.To(System.String)">
            <summary>
            Messages that contain the specified string in its To field.
            </summary>
            <param name="address">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.Cc(System.String)">
            <summary>
            Messages that contain the specified string in its CC field.
            </summary>
            <param name="address">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.Bcc(System.String)">
            <summary>
            Messages that contain the specified string in its Bcc field.
            </summary>
            <param name="address">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.Keyword(System.String)">
            <summary>
            Messages with the specified keyword flag set.
            </summary>
            <param name="keyword">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.NotKeyword(System.String)">
            <summary>
            Messages that do not have the specified keyword flag set.
            </summary>
            <param name="keyword">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.MessageSet(ComponentPro.Net.Mail.ImapMessageSet)">
            <summary>
            Messages which belong to a specified message set.
            </summary>
            <param name="messageSet">A set of messages.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.NotFrom(System.String)">
            <summary>
            Messages that do not contain the specified string in its From field.
            </summary>
            <param name="address">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.NotTo(System.String)">
            <summary>
            Messages that do not contain the specified string in its To field.
            </summary>
            <param name="address">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.NotCc(System.String)">
            <summary>
            Messages that do not contain the specified string in its CC field.
            </summary>
            <param name="address">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.NotBcc(System.String)">
            <summary>
            Messages that do not contain the specified string in its Bcc field.
            </summary>
            <param name="address">String to search for. Cannot be empty.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.HasFlags(ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Messages with all the specified flags set.
            </summary>
            <param name="flags">Flags that have to be set.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapCriterion.DontHaveFlags(ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Messages with none of the specified flags set.
            </summary>
            <param name="flags">Flags that must not be set.</param>
            <returns>A search parameter.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCriterion.Type">
            <summary>
            Gets a type of the current node.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCriterion.ChildCount">
            <summary>
            Gets a count of the child nodes.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCriterion.Item(System.Int32)">
            <summary>
            Gets a child node at the specified index.
            </summary>
            <param name="index">Index of the child node.</param>
            <returns>A child node.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCriterion.Name">
            <summary>
            Gets a name (keyword of the search criteria) of the current leaf node. Calling on the inner node returns null (Nothing in VB.NET).
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCriterion.Value">
            <summary>
            Gets a value (argument of the search criteria) of the current leaf node. Calling on the inner node returns null (Nothing in VB.NET).
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCriterion.Recent">
            <summary>
            Messages that have the <see cref="F:ComponentPro.Net.Mail.ImapMessageFlags.Recent">Recent</see> flag set.
            </summary>
            <value>A search parameter.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCriterion.Deleted">
            <summary>
            Messages that have the <see cref="F:ComponentPro.Net.Mail.ImapMessageFlags.Deleted">Deleted</see> flag set.
            </summary>
            <value>A search parameter.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCriterion.New">
            <summary>
            Messages that have the <see cref="F:ComponentPro.Net.Mail.ImapMessageFlags.Recent">Recent</see> flag set
            and <see cref="F:ComponentPro.Net.Mail.ImapMessageFlags.Seen">Seen</see> flag not set.
            </summary>
            <value>A search parameter.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCriterion.NotRecent">
            <summary>
            Messages that don't have the <see cref="F:ComponentPro.Net.Mail.ImapMessageFlags.Recent">Recent</see> flag set.
            </summary>
            <value>A search parameter.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCriterion.NotSeen">
            <summary>
            Messages that don't have the <see cref="F:ComponentPro.Net.Mail.ImapMessageFlags.Seen">Seen</see> flag set. Equivalent to <see cref="P:ComponentPro.Net.Mail.ImapCriterion.Unread"/>
            </summary>
            <value>A search parameter.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCriterion.Unread">
            <summary>
            Messages that don't have the <see cref="F:ComponentPro.Net.Mail.ImapMessageFlags.Seen">Seen</see> flag set. Equivalent to <see cref="P:ComponentPro.Net.Mail.ImapCriterion.NotSeen"/>
            </summary>
            <value>A search parameter.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapCriterion.All">
            <summary>
            All messages.
            </summary>
            <value>A search parameter.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapException">
            <summary>
            The exception that is thrown when an error occurs while using Imap component.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.ImapException"/> class.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message">Message</see> property of the new instance to a message that describes the general error.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.ImapException"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapException.#ctor(System.String,ComponentPro.Net.Mail.MailClientExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.ImapException"/> class with the specified error message and status.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus"/> values.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.ImapException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapException.#ctor(System.String,System.Exception,ComponentPro.Net.Mail.MailClientExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.ImapException"/> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus"/> values.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapException.#ctor(ComponentPro.Net.Mail.ImapResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.ImapException"/> class with the specified <see cref="T:ComponentPro.Net.Mail.ImapResponse"/>.
            </summary>
            <param name="response">The <see cref="T:ComponentPro.Net.Mail.ImapResponse"/>.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapException.Status">
            <summary>
            Gets the status of the response.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus"/> values.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapException.Response">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.Mail.ImapResponse"/> if the exception.
            </summary>
            <value>The <see cref="T:ComponentPro.Net.Mail.ImapResponse"/> if <see cref="P:ComponentPro.Net.Mail.ImapException.Status"/> is <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus">ProtocolError</see>; <b>null</b> reference otherwise.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapMessage">
            <summary>
            Contains information about a single mail message on the IMAP server.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessage.GetRawHeaders">
            <summary>
            Returns the raw data of the message headers, if available.
            </summary>
            <value>Raw message headers; or null if not available.</value>
            <remarks>
            This field is only set if the <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.FullHeaders"/> 
            options was specified in a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapEnvelopeParts)"/> or <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/>.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessage.GetKeywords">
            <summary>
            Gets the list of keywords (custom flags) associated with the message.
            </summary>
            <returns>List of keywords.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessage.GetParts">
            <summary>
            Returns a list of message parts. This includes body views, attachments and linked resources.
            </summary>
            <returns>List of message parts.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.ValidFields">
            <summary>
            Returns a bit mask specifying which fields are valid.
            </summary>
            <value>A bit mask.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.HeadersParsingError">
            <summary>
            Gets an error that occurredduring message headers parsing.
            </summary>
            <value>An error that occurred during message headers parsing.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.BodyParsingError">
            <summary>
            Gets an error that occurred during message body parsing.
            </summary>
            <value>An error that occurred during message body parsing.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.MessageInboxIndex">
            <summary>
            Gets the message inbox index.
            </summary>
            <value>The message inbox index.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.UniqueId">
            <summary>
            Gets the message unique ID (case-sensitive string). 
            Note that it can contain a slash '/' - unsuitable to be used as a filename.
            </summary>
            <value>Unique ID.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.Flags">
            <summary>
            Gets the message flags.
            </summary>
            <value>Message flags.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.IsAnswered">
            <summary>
            Returns true if the <see cref="P:ComponentPro.Net.Mail.ImapMessage.Flags"/> property contains the <see cref="P:ComponentPro.Net.Mail.ImapMessage.Flags">Answered</see> flag.
            </summary>
            <value>True if answered.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.IsDeleted">
            <summary>
            Returns true if the <see cref="P:ComponentPro.Net.Mail.ImapMessage.Flags"/> property contains the <see cref="P:ComponentPro.Net.Mail.ImapMessage.Flags">Deleted</see> flag.
            </summary>
            <value>True if deleted.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.IsDraft">
            <summary>
            Returns true if the <see cref="P:ComponentPro.Net.Mail.ImapMessage.Flags"/> property contains the <see cref="P:ComponentPro.Net.Mail.ImapMessage.Flags">Draft</see> flag.
            </summary>
            <value>True if draft.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.IsFlagged">
            <summary>
            Returns true if the <see cref="P:ComponentPro.Net.Mail.ImapMessage.Flags"/> property contains the <see cref="P:ComponentPro.Net.Mail.ImapMessage.Flags">Flagged</see> flag.
            </summary>
            <value>True if flagged.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.IsRecent">
            <summary>
            Returns true if the <see cref="T:ComponentPro.Net.Mail.ImapMessageFlags"/> property contains the <see cref="F:ComponentPro.Net.Mail.ImapMessageFlags.Recent"/> flag.  
            This flag is set if the message has arrived during the current session and it is the first active session to see the message.
            </summary>
            <value>True if recent.</value>
            <remarks>
            Subsequent sessions won't see the flag (unless the folder was selected as read-only during the
            first session). This flag cannot be altered by the client.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.IsSeen">
            <summary>
            Returns true if the <see cref="P:ComponentPro.Net.Mail.ImapMessage.Flags"/> property contains the <see cref="P:ComponentPro.Net.Mail.ImapMessage.Flags">Seen</see> flag.
            This flag is set if the message has been read.
            </summary>
            <value>True if seen (read).</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.Size">
            <summary>
            Gets the length of the message.
            </summary>
            <value>Message length.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.Date">
            <summary>
            Gets the origination date of this message.
            </summary>
            <value>The origination date.</value>
            <remarks>
            The origination date specifies the date and time at which the creator
            of the message indicated that the message was complete and ready to enter
            the mail delivery system.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.ReceivedDate">
            <summary>
            Gets the received date of this message.
            </summary>
            <value>The received date.</value>
            <remarks>
            The received date specifies the date and time at which the message
            was receied.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.From">
            <summary>
            Gets the list of authors of this message.
            </summary>
            <value>The list of authors.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.Sender">
            <summary>
            Gets the sender of this message. May be null.
            </summary>
            <value>The sender of this message.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.ReplyTo">
            <summary>
            Gets the list of addresses that should receive replies
            to this message.
            </summary>
            <value>The list of addresses that should receive replies.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.To">
            <summary>
            Gets the list of addresses of primary recipients of the message.
            </summary>
            <value>The list of primary recipients.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.CC">
            <summary>
            Gets the list of addresses of others who are to receive the message.
            </summary>
            <value>The list of other recipients.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.Bcc">
            <summary>
            Gets the list of addresses of recipients that are not to be revealed to other recipients of the message.
            </summary>
            <value>The list of recipients.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.MessageIdentifier">
            <summary>
            Gets the unique identifier of the message.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.InReplyTo">
            <summary>
            Gets the list of identifiers of messages to which the message is a reply.
            </summary>
            <value>The list of message identifiers.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.Subject">
            <summary>
            Gets the subject of the message.
            </summary>
            <value>The subject.</value>
            <remarks>
            This property contains a short string identifying the topic
            of the message.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.Headers">
            <summary>
            Gets the list of headers of this entity.
            </summary>
            <value>The list of headers.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.HasBodyHtml">
            <summary>
            Gets the value indicating whether the HTML body of the message was retrieved.
            </summary>
            <value>A value indicating whether the HTML body of the message was retrieved.</value>
            <remarks>
            This field is only set if the <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.Body"/> options
            was specified in a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapEnvelopeParts)"/> or <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.HasBodyText">
            <summary>
            Gets the value indicating whether the text body of the message was retrieved.
            </summary>
            <value>A value indicating whether the text body of the message was retrieved.</value>
            <remarks>
            This field is only set if the <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.Body"/> options
            was specified in a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapEnvelopeParts)"/> or <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.BodyHtml">
            <summary>
            Gets the HTML body of the message, or an empty string if no HTML body was retrieved
            </summary>
            <value>The HTML body of the message.</value>
            <remarks>
            This field is only set if the <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.Body"/> options
            was specified in a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapEnvelopeParts)"/> or <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.BodyText">
            <summary>
            Gets the text body of the message, or an empty string if no text bodywas retrieved.
            </summary>
            <value>The text body of the message.</value>
            <remarks>
            This field is only set if the <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.Body"/> options
            was specified in a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapEnvelopeParts)"/> or <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.HasAttachment">
            <summary>
            Returns a value indicating whether the message has an attachment (or more attachments).
            </summary>
            <value>True if message has attachment; false if no attachments.</value>
            <remarks>
            This field is only set if the <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.AttachmentInfo"/> option
            was specified in a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapEnvelopeParts)"/> or <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.HasResources">
            <summary>
            Returns a value indicating whether the message has a linked resource (or more linked resources).
            </summary>
            <value>True if message has linked resource; false if no linked resources.</value>
            <remarks>
            This field is only set if the <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.AttachmentInfo"/> option
            was specified in a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapEnvelopeParts)"/> or <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessage.IsSignedOrEncrypted">
            <summary>
            Returns a value indicating whether the message is signed or encrypted.
            </summary>
            <value>True if message is signed or encrypted; false if not signed or encrypted.</value>
            <remarks>
            This field is only set if the <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.AttachmentInfo"/> option
            was specified in a call to <see cref="M:ComponentPro.Net.Mail.Imap.ListMessages(ComponentPro.Net.Mail.ImapEnvelopeParts)"/> or <see cref="M:ComponentPro.Net.Mail.Imap.DownloadImapMessage(System.String,ComponentPro.Net.Mail.ImapEnvelopeParts)"/>.
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapMessagePartKind">
            <summary>
            Specifies IMAP message part kind.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessagePartKind.Text">
            <summary>
            Text view (body).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessagePartKind.LinkedResource">
            <summary>
            Linked resource.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessagePartKind.Attachment">
            <summary>
            Attachment.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapMessagePart">
            <summary>
            Represents information about message part (body view, attachment or linked resource).
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessagePart.ContentId">
            <summary>
            Gets part's content ID, if available.
            </summary>
            <value>Content ID or null.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessagePart.FileName">
            <summary>
            Gets part's file name, if available.
            </summary>
            <value>File name or null.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessagePart.Size">
            <summary>
            Part's length.
            </summary>
            <value>Length.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessagePart.Kind">
            <summary>
            Gets a value indicating the part's kind.
            </summary>
            <value>Part kind.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessagePart.ContentType">
            <summary>
            Gets part's content type.
            </summary>
            <value>Content type.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessagePart.Id">
            <summary>
            Gets part ID. This is used by <see cref="M:ComponentPro.Net.Mail.Imap.DownloadMessagePart(System.String,System.String)"/>.
            </summary>
            <value>Part ID.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapMessageCollection">
            <summary>
            Provides a container for a collection of <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.</returns>
            <remarks>
            A shallow copy of a collection copies only the elements
            of the collection, whether they are reference types or value
            types, but it does not copy the objects that the references
            refer to. The references in the new collection point to the same
            objects that the references in the original collection point to.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>.</returns>
            <remarks>GetEnumerator is the method that implements the foreach statement (For Each in Visual Basic). You should not need to call this method directly.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Insert(System.Int32,ComponentPro.Net.Mail.ImapMessage)">
            <summary>
            Inserts the <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> at the specified position in the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the item is to be inserted.</param>
            <param name="item">The <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to be inserted to the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Add(ComponentPro.Net.Mail.ImapMessage)">
            <summary>
            Adds the <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to be added to the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.System#Collections#Generic#ICollection{ComponentPro#Net#Mail#ImapMessage}#Remove(ComponentPro.Net.Mail.ImapMessage)">
            <summary>
            Removes the specified <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> from the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to remove from the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.</param>
            <returns>True if removed, false if not found.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Remove(ComponentPro.Net.Mail.ImapMessage)">
            <summary>
            Removes the specified <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> from the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to remove from the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Remove(System.String)">
            <summary>
            Removes <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> from the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/> having specified unique id.
            </summary>
            <param name="uniqueId">Unique id of the <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to remove from the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Remove(System.Int32)">
            <summary>
            Removes <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> from the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/> having specified sequence number.
            </summary>
            <param name="messageInboxIndex">Sequence number of the <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to remove from the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> at the specified index from the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to remove.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Find(System.String)">
            <summary>
            Returns the <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> of the specified unique id.
            </summary>
            <param name="uniqueId">The unique ID of the <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to get.</param>
            <returns><see cref="T:ComponentPro.Net.Mail.ImapMessage"/> of the specified name.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Find(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> of the specified id.
            </summary>
            <param name="messageInboxIndex">The ID of the <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to get.</param>
            <returns><see cref="T:ComponentPro.Net.Mail.ImapMessage"/> of the specified name.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.ToUniqueIdMessageSet">
            <summary>
            Returns an <see cref="T:ComponentPro.Net.Mail.ImapMessageSet"/> that contains unique IDs of messages in this collection.
            </summary>
            <returns>IMAP message set.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.ToSequenceNumberMessageSet">
            <summary>
            Returns an <see cref="T:ComponentPro.Net.Mail.ImapMessageSet"/> that contains sequence numbers of messages in this collection.
            </summary>
            <returns>IMAP message set.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Sort">
            <summary>
            Sorts the messages in the entire <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/> by sequence number ascending.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/> using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, or a null reference to sort by sequence number ascending.</param>
            <remarks>This method uses <see cref="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)"/>, which uses QuickSort algorithm. See its description for more information.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a section of <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, or a null reference to sort by sequence number ascending.</param>
            <remarks>This method uses <see cref="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)"/>, which uses QuickSort algorithm. See its description for more information.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.CopyTo(ComponentPro.Net.Mail.ImapMessage[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/> to a one-dimensional
            <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> array that is the destination of the elements copied from the collection.</param>
            <param name="arrayIndex">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.IndexOf(ComponentPro.Net.Mail.ImapMessage)">
            <summary>
            Returns a zero-based index of the specified item within the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>, or -1 if not found.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to locate.</param>
            <returns>Zero-based index of the specified item within the collection, or -1.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageCollection.Contains(ComponentPro.Net.Mail.ImapMessage)">
            <summary>
            Determines whether the specified item is present in the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to locate.</param>
            <returns>True if present, false otherwise.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessageCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessageCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection"/>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessageCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> to get.</param>
            <value><see cref="T:ComponentPro.Net.Mail.ImapMessage"/> of the specified index.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessageCollection.System#Collections#Generic#ICollection{ComponentPro#Net#Mail#ImapMessage}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>True if read-only, false if read-write.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapMessageComparisonMethod">
            <summary>
            List of possible compare types for the <see cref="T:ComponentPro.Net.Mail.ImapMessageComparer"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageComparisonMethod.MessageInboxIndex">
            <summary>
            Message inbox index number.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageComparisonMethod.OriginationDate">
            <summary>
            Origination date.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageComparisonMethod.ReceivedDate">
            <summary>
            Received date.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageComparisonMethod.From">
            <summary>
            From.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageComparisonMethod.To">
            <summary>
            To.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageComparisonMethod.Subject">
            <summary>
            Subject.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapMessageComparer">
            <summary>
            Class used to compare <see cref="T:ComponentPro.Net.Mail.ImapMessage"/> objects. 
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageComparer.#ctor">
            <summary>
            Creates a new instance of ImapMessageComparer with default sorting by sequence number name and with ascending sort mode.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageComparer.#ctor(ComponentPro.Net.Mail.ImapMessageComparisonMethod)">
            <summary>
            Creates a new instance of ImapMessageComparer with specified comparer type and ascending sort mode.
            </summary>
            <param name="comparerType">Type of comparer.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageComparer.#ctor(ComponentPro.Net.Mail.ImapMessageComparisonMethod,System.Boolean)">
            <summary>
            Creates a new instance of ImapMessageComparer with specified comparer type and sort mode.
            </summary>
            <param name="comparerType">Type of comparer.</param>
            <param name="ascending">Sort order to use.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer interface implementation. Compares two instances of ImapMessageInfo.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>Value greater than zero when x is greater then y, zero when they are equal a or less than zero when x is lesser than y.</returns>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapMessageSet">
            <summary>
            Represents either a set of message unique IDs or a set of sequence numbers.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageSet.ToString">
            <summary>
            Returns a string representation of this message set.
            </summary>
            <returns>String representation of this message set.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageSet.Add(System.Int32)">
            <summary>
            Adds a message with the specified sequence number to the message set.
            </summary>
            <param name="messageInboxIndex">Sequence number.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageSet.Add(System.String)">
            <summary>
            Adds a message with the specified unique ID to the message set.
            </summary>
            <param name="uniqueId">Unique ID.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageSet.AddRange(System.Int32,System.Int32)">
            <summary>
            Adds the message in the specified sequence number range to the message set.
            </summary>
            <param name="from">Lower bound of the range.</param>
            <param name="to">Upper bound of the range (or Int32.MaxValue if all messages above 'from' are to be included).</param>
            <remarks>Bounds are also a part of the range.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageSet.AddRange(System.String,System.String)">
            <summary>
            Adds the message in the specified unique ID range to the message set.
            </summary>
            <param name="first">Lower bound of the range.</param>
            <param name="last">Upper bound of the range.</param>
            <remarks>Bounds are also a part of the range.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageSet.#ctor">
            <summary>
            Creates an empty message ID set.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageSet.#ctor(System.Int32[])">
            <summary>
            Creates a new message ID set that contains all messages in the specified array.
            </summary>
            <param name="sequenceNumbers">An array of message sequence numbers.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageSet.ParseUniqueId(System.String,System.Int64@,System.Int64@)">
            <summary>
            Converts the combined 'unique ID' value used by ComponentPro IMAP into its distinct parts. Please consult the IMAP RFC for details on unique ID and validity ID.
            </summary>
            <param name="uniqueId">Unique ID string.</param>
            <param name="validity">Folder validity ID.</param>
            <param name="id">Message unique ID.</param>
            <returns>True if parsed successfully; false if unable to parse.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageSet.BuildUniqueId(System.Int64,System.Int64)">
            <summary>
            Converts the two distinct message ID parts into the combined 'unique ID' used by ComponentPro IMAP. Please consult the IMAP RFC for details on unique ID and validity ID.
            </summary>
            <param name="validity">Folder validity ID.</param>
            <param name="id">Message unique ID.</param>
            <returns>Combined 'unique ID' value.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapMessageSet.#ctor(System.String[])">
            <summary>
            Creates a new message ID set that contains all messages in the specified array.
            </summary>
            <param name="uniqueIds">An array of message unique IDs.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessageSet.AllMessages">
            <summary>
            Returns a message set that specifies all messages in a folder.
            </summary>
            <value>Message set that contains all messages.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessageSet.IsUniqueIdSet">
            <summary>
            Returns a value indicating whether this is a unique ID set.
            </summary>
            <value>True if this is a unique ID set; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapMessageSet.Count">
            <summary>
            Gets the number of items.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapFeatures">
            <summary>
            Represents the IMAP extensions.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFeatures.UniqueIdPlus">
            <summary>
            UIDPLUS extension support. If this extension is supported, <see cref="O:ComponentPro.Net.Mail.Imap.UploadMessage"/> methods
            will return unique ID of the message on the server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFeatures.LiteralPlus">
            <summary>
            LITERAL+ extension support.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFeatures.Idle">
            <summary>
            IDLE/DONE command support.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFeatures.Xlist">
            <summary>
            XLIST command support. This is an extension created by Google for GMail's IMAP.
            It is used to retrieve information about folder purpose using the <see cref="M:ComponentPro.Net.Mail.Imap.ListFolders"/> method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFeatures.Compression">
            <summary>
            Deflate compression (COMPRESS=DEFLATE) extension support.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFeatures.All">
            <summary>
            All extensions.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapFolderPurpose">
            <summary>
            Specifies special use flags for extended LIST command (RFC 6154) or XLIST extension.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFolderPurpose.None">
            <summary>No special use.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFolderPurpose.Inbox">
            <summary>The folder is an inbox.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFolderPurpose.All">
            <summary>The folder presents all messages in the user's message store (with a possible exception of trash and junk mail). It is usually a virtual folder.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFolderPurpose.Archive">
            <summary>The folder is used to archive messages.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFolderPurpose.Drafts">
            <summary>Thes folder is used to hold draft messages - messages that are being composed but have not yet been sent.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFolderPurpose.Flagged">
            <summary>The folder presents all messages marked in some way as 'important'. It is usually a virtual folder.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFolderPurpose.Junk">
            <summary>The folder is where messages deemed to be junk (spam) mail are held.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFolderPurpose.Sent">
            <summary>The folder is used to hold copies of messages that have been sent. Some server implementations might put messages here automatically.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFolderPurpose.Trash">
            <summary>The folder is used to hold messages that have been deleted. Alternatively, it might be a virtual folder that presentes messages marked for deletion.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFolderPurpose.Important">
            <summary>The folder presents all messages marked by the server as 'important'. It is usually a virtual folder.</summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapAuthenticationMethod">
            <summary>
            IMAP authentication methods.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapAuthenticationMethod.Auto">
            <summary>
            Choose automatically.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapAuthenticationMethod.SaslPlain">
            <summary>
            RFC 2595 TLS plaintext authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapAuthenticationMethod.SaslDigestMD5">
            <summary>
            RFC 2831 DIGEST-MD5 authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapAuthenticationMethod.SaslCramMD5">
            <summary>
            RFC 2195 CRAM-MD5 authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapAuthenticationMethod.SaslLogin">
            <summary>
            Login authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapAuthenticationMethod.ClearText">
            <summary>
            Clear text USER/PASS login.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapAuthenticationMethod.External">
            <summary>
            External authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapAuthenticationMethod.OAuth20">
            <summary>
            OAuth 2.0 authentication defined by https://developers.google.com/google-apps/gmail/xoauth2_protocol#imap_protocol_exchange
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapConfig">
            <summary>
            Represents the IMAP configuration.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapConfig.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of the current instance.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapConfig.AcceptInvalidHeaders">
            <summary>
            Indicates wherher to accept invalid/unparsable headers when parsing mail message.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapConfig.AcceptInvalidMime">
            <summary>
            Indicates wherher to accept invalid/unparsable S/MIME messages signature entities when parsing mail message.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload">
            <summary>
            Gets or sets a boolean value indicating whether to use BODY.PEEK instead of BODY when downloading messages with <see cref="O:ComponentPro.Net.Mail.Imap.DownloadMailMessage"/> or <see cref="O:ComponentPro.Net.Mail.Imap.DownloadMessage"/> method. 
            </summary>
            <remarks>
            The Seen flag will not be set when downloading messages if this property is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapMessageFlags">
            <summary>
            IMAP message flags.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageFlags.None">
            <summary>None.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageFlags.Seen">
            <summary>Message has been read.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageFlags.Answered">
            <summary>Message has been answered.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageFlags.Flagged">
            <summary>Message is flagged for special attention.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageFlags.Deleted">
            <summary>Message is marked as deleted for removal by <see cref="M:ComponentPro.Net.Mail.Imap.Purge"/>.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageFlags.Draft">
            <summary>Message is a draft - not fully composed yet.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageFlags.Recent">
            <summary>
            Message has recently arrived and this is the first and only session notified about this.
            This flag cannot be modified by the client.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapMessageFlags.Keywords">
            <summary>
            Message may have keyword (custom flags).
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapFlagModifier">
            <summary>
            Specifies possible actions of <see cref="M:ComponentPro.Net.Mail.Imap.Flag(ComponentPro.Net.Mail.ImapMessageSet,ComponentPro.Net.Mail.ImapFlagModifier,ComponentPro.Net.Mail.ImapMessageFlags)"/> method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFlagModifier.Add">
            <summary>Adds the specified flags to the message.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFlagModifier.Remove">
            <summary>Removes the specified flags from the message.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapFlagModifier.Replace">
            <summary>Replace the message flags by the specified flags.</summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapEnvelopeParts">
            <summary>
            Specifies what information to include in a <see cref="T:ComponentPro.Net.Mail.ImapMessageCollection">message list</see>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapEnvelopeParts.MessageInboxIndex">
            <summary>Sequence number. Only valid during the current session.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapEnvelopeParts.UniqueId">
            <summary>Unique ID. Does not change between sessions.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapEnvelopeParts.Size">
            <summary>Message size in bytes.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapEnvelopeParts.Flags">
            <summary>Message flags.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapEnvelopeParts.ReceivedDate">
            <summary>Date and time at which the message was received by the mail server.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapEnvelopeParts.Fast">
            <summary>Sequence number, unique ID, length, flags and received date.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapEnvelopeParts.Envelope">
            <summary>Envelope (date, subject, from, sender, reply-to, to, cc), sequence number, unique ID, length, flags and received date.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapEnvelopeParts.FullHeaders">
            <summary>All message headers, sequence number, unique ID, length, flags and received date.</summary>
            <remarks>
            <para>
            Same as <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.Fast"/>, but also downloads complete message headers of each message.
            </para>
            <para>
            This variant is the most verbose, but also the slowest, and in fact seldom needed, because nearly 
            all interesting information about the message is already returned by <see cref="F:ComponentPro.Net.Mail.ImapEnvelopeParts.Envelope"/>. 
            </para>
            </remarks>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapEnvelopeParts.Body">
            <summary>Text and HTML bodies.</summary>
            <remarks>
            Retrieving the message body marks unread messages as read. To prevent this behavior, set the <see cref="P:ComponentPro.Net.Mail.ImapConfig.DontSetSeenFlagAfterDownload"/> to <c>true</c>.
            </remarks>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapEnvelopeParts.AttachmentInfo">
            <summary>Deprecated. Same as MessageStructure.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapEnvelopeParts.MessageStructure">
            <summary>Information about the message structure including attachment names. To retrieve the info, use <see cref="M:ComponentPro.Net.Mail.ImapMessage.GetParts"/>.</summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapUpdateEvent">
            <summary>
            Defines notification messages that can be received from the server using the <see cref="E:ComponentPro.Net.Mail.Imap.Update"/> event.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapUpdateEvent.None">
            <summary>
            Represents the empty state.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapUpdateEvent.MessageCount">
            <summary>
            Message count was received. Represents EXISTS response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapUpdateEvent.RecentMessages">
            <summary>
            Recent message count was received Represents RECENT response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapUpdateEvent.MessageRemoved">
            <summary>
            Message was removed from the folder. Represents EXPUNGE response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapUpdateEvent.MessageInfo">
            <summary>
            Message info changed. Represents FETCH response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapUpdateEvent.Failure">
            <summary>
            Failure. Represents NO response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapUpdateEvent.ProtocolError">
            <summary>
            Protocol error occurred. Represents BAD response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapUpdateEvent.Success">
            <summary>
            Success. Represents OK response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapUpdateEvent.ClosingConnection">
            <summary>
            Connection is being closed. Represents BYE response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapUpdateEvent.Alert">
            <summary>
            Alert. Represents ALERT response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapUpdateEvent.ValidityId">
            <summary>
            Folder validity ID was received. Represents OK UIDVALIDITY response.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapResponseCode">
            <summary>
            Represents possible IMAP response codes.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapResponseCode.Unknown">
            <summary>Indicates an unknown response code.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapResponseCode.Ok">
            <summary>Indicates success.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapResponseCode.ContinuationRequest">
            <summary>Continuation request.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapResponseCode.Unsolicited">
            <summary>Unsolicited and untagged response.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapResponseCode.No">
            <summary>Indicates failure.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ImapResponseCode.Bad">
            <summary>Indicates a protocol error such as unrecognized command or syntax error.</summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapResponseLine">
            <summary>
            Contains a single line of the IMAP response.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapResponseLine.Raw">
            <summary>
            Gets the raw unparsed data of the response line.
            </summary>
            <value>Raw unparsed line.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapResponseLine.Code">
            <summary>
            Gets the response code.
            </summary>
            <value>Response code.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapResponseLine.OptionalCode">
            <summary>
            Gets the optional response code.
            </summary>
            <value>Optional response code, or null if there isn't any.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapResponseLine.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>Parameters.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapResponseLine.Description">
            <summary>
            Gets the description.
            </summary>
            <value>Description.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapResponse">
            <summary>
            Contains the response of the IMAP server.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.ImapResponse.GetLines">
            <summary>
            Gets all the untagged IMAP response lines that were part of this response.
            </summary>
            <returns>Untagged IMAP responses.</returns>
            <remarks>A single line represents a single response.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapResponse.Description">
            <summary>
            Gets the description of the IMAP response.
            </summary>
            <value>The description of the IMAP response.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapResponse.RawResponse">
            <summary>
            Gets the raw response from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapResponse.Code">
            <summary>
            Gets the IMAP response code.
            </summary>
            <value>IMAP response code.</value>
        </member>
        <member name="M:c_LVG.c_CWG(System.Int32@)">
            <summary>
            Reads a line from server (blocking until the server sends it).
            </summary>
            <remarks>
            If the server doesn't send anything at all in <see cref="T:System.Threading.Timeout"/>
            milliseconds, this method throws.</remarks>
            <returns>An array (never null) of at least 2 bytes ending with CR LF.
            </returns>
        </member>
        <member name="T:c_XTG">
            <summary>
            Utility function for client server communication.
            </summary>
        </member>
        <member name="M:c_XTG.c_YTG(System.String)">
            <summary>
            Convert from default enconding to modified UTF7.
            </summary>
            <param name="data">
            String in default encoding.
            </param>
            <returns>
            String in mod UTF7 encoding.
            </returns>
        </member>
        <member name="M:c_XTG.c_FWG(System.String)">
            <summary>
            Convert from modified UTF7 encoding to default.
            </summary>
            <param name="data">
            Array byte in default encoding.
            </param>
            <returns>
            Bytes in default encoding.
            </returns>
            <example>
            Change all byte '0x26 -&gt; 0x2b'
            ampersant ( Default) -&gt; 2b 41 43 59 2d (UTF7) -&gt; 26 2d ( mod UTF7 )'
            <see cref="!:ConvertFromModUTF7"></see>
            </example>
        </member>
        <member name="M:c_XTG.c_TWG(ComponentPro.Net.Mail.ImapMessageFlags)">
            <summary>
            Build flag-list for command.
            RFC 3510 - Formal syntax flag-list.
            </summary>
            <param name="flags">Composition of message flag.</param>
            <returns>Flag-list string.</returns>
        </member>
        <member name="T:c_DXG">
            <summary>
            Implementation of CRAM-MD5 function according to RFC 2195 and 2104.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.AlternateView">
            <summary>
            Represents a single alternate form of an e-mail message body.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.AttachmentBase">
            <summary>
            The base class thet represents an e-mail attachment.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentBase.GetContentStream(System.Boolean)">
            <summary>
            Returns the stream representing a content of this attachment.
            </summary>
            <param name="writable">Specifies whether to return a writable or read-only stream.</param>
            <returns>The stream representing a content of this attachment.</returns>
            <remarks>
            <p>
            To set the content of this entity, it is recommended to use one of <see cref="M:ComponentPro.Net.Mail.AttachmentBase.SetContent(System.String)"/>
            or SetContentFromFile methods.
            </p>
            <p>
            Please note that it is not currently possible to get a writable content stream of an embedded message.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentBase.GetContentStream">
            <summary>
            Returns the read-only stream representing a content of this attachment.
            </summary>
            <returns>The read-only stream representing a content of this attachment.</returns>
            <remarks>
            To set the content of this attachment, use one of <see cref="M:ComponentPro.Net.Mail.AttachmentBase.SetContent(System.String)"/>
            or SetContentFromFile methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentBase.GetContentLength">
            <summary>
            Gets the length of the attachment.
            </summary>
            <returns>The length of the attachment.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentBase.SetContent(System.String)">
            <summary>
            Sets the content of this attachment to the specified text.
            </summary>
            <param name="text">Content to set.</param>
            <remarks>
            Media type is set to 'text/plain'.
            Character set and transfer encoding are determined automatically.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentBase.SetContent(System.String,System.String)">
            <summary>
            Sets the content of this attachment to the specified text and media type.
            </summary>
            <param name="text">Content to set.</param>
            <param name="mediaType">Media type.</param>
            <remarks>
            Character set and transfer encoding are determined automatically.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentBase.SetContent(System.String,System.String,System.Text.Encoding)">
            <summary>
            Sets the content of this attachment to the specified text, media type and character set.
            </summary>
            <param name="text">Content to set.</param>
            <param name="mediaType">Media type.</param>
            <param name="charset">Character set to use for encoding the text.</param>
            <remarks>
            Transfer encoding is determined automatically.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentBase.SetContent(System.String,System.String,System.Text.Encoding,ComponentPro.Net.Mail.TransferEncoding)">
            <summary>
            Sets the content of this attachment to the specified text, media type and character set.
            </summary>
            <param name="text">Content to set.</param>
            <param name="mediaType">Media type.</param>
            <param name="charset">Character set to use for encoding the text.</param>
            <param name="transferEncoding">Transfer encoding.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentBase.Save(System.String)">
            <summary>
            Writes the content of the attachment or view into a supplied file.
            </summary>
            <param name="fileName">Path to the file to write the content to.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentBase.Save(System.IO.Stream)">
            <summary>
            Writes the content of the attachment into the supplied stream.
            </summary>
            <param name="output">Stream to write the content to.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentBase.#ctor">
            <summary>
            Initializes an instance of <see cref="T:ComponentPro.Net.Mail.AttachmentBase"/> class.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentBase.TransferEncoding">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Net.Mail.AttachmentBase.TransferEncoding"/> of the content of this attachment.
            </summary>
            <value>
            <see cref="P:ComponentPro.Net.Mail.AttachmentBase.TransferEncoding"/> of the content.
            </value>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentBase.ContentType">
            <summary>
            Gets the content type of this attachment.
            </summary>
            <value>Content type.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentBase.MediaType">
            <summary>
            Gets the media type of this attachment.
            </summary>
            <value>Media type.</value>
            <remarks>This is equivalent to calling <see cref="P:ComponentPro.Net.Mail.AttachmentBase.ContentType"/>.MediaType.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentBase.ContentDisposition">
            <summary>
            Gets the content disposition of this attachment.
            </summary>
            <value>Content disposition.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentBase.ContentDescription">
            <summary>
            Gets or sets the content description of this attachment.
            </summary>
            <value>Content description .</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentBase.ContentIdentifier">
            <summary>
            Gets or sets the content ID of this attachment.
            </summary>
            <value>Content ID.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentBase.ContentLocation">
            <summary>
            Gets or sets the absolute or relative URI of this message part.
            </summary>
            <value>URI.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentBase.ContentString">
            <summary>
            Gets the content string of this attachment.
            </summary>
            <value>The content string of this attachment; or null if the content cannot be represented as string.</value>
            <remarks>
            <p>
            To set the content of this attachment, use one of <see cref="M:ComponentPro.Net.Mail.AttachmentBase.SetContent(System.String)"/>
            or SetContentFromFile methods.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentBase.Charset">
            <summary>
            Gets the charset (<see cref="T:System.Text.Encoding"/>) of the content of this attachment.
            </summary>
            <value>
            The charset of the content; or null if it has no charset or unknown charset.
            </value>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateView.SetContentFromFile(System.String,System.String)">
            <summary>
            Sets the content of this view to data read from the specified file and sets media type.
            </summary>
            <param name="fileName">Path to the file to read data from.</param>
            <param name="mediaType">Media type.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateView.SetContentFromFile(System.String)">
            <summary>
            Sets the content of this view to data read from the specified file.
            </summary>
            <param name="fileName">Path to the file to read data from.</param>
            <remarks>Media type is set to 'text/plain'.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateView.SetContent(System.IO.Stream,System.String)">
            <summary>
            Sets the content of this view to data read from the specified stream and sets media type.
            </summary>
            <param name="contentStream">Stream from which the data will be read.</param>
            <param name="mediaType">Media type.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateView.SetContent(System.IO.Stream)">
            <summary>
            Sets the content of this view to data read from the specified stream.
            </summary>
            <param name="contentStream">Stream from which the data will be read.</param>
            <remarks>Media type is set to 'text/plain'.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateView.#ctor">
            <summary>
            Initializes a new empty instance of a <see cref="T:ComponentPro.Net.Mail.AlternateView"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateView.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.AlternateView"/>
            with the content of the specified file and with media type.
            </summary>
            <param name="fileName">Path to the file to provide data for the view.</param>
            <param name="mediaType">A MIME media type of the file.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateView.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.AlternateView"/>
            with the content of the specified file.
            </summary>
            <param name="fileName">Path to the file to provide data for the view.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateView.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.AlternateView"/>
            with the content of the supplied stream and with a media type.
            </summary>
            <param name="contentStream">Stream from which the data will be read.</param>
            <param name="mediaType">A MIME media type of the file.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateView.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.AlternateView"/>
            with the content of the supplied stream.
            </summary>
            <param name="contentStream">Stream from which the data will be read.</param>
        </member>
        <member name="T:ComponentPro.Net.Mail.AlternateViewCollection">
            <summary>
            Represents the collection of alternate mail message views.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateViewCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.AlternateViewCollection"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateViewCollection.Insert(System.Int32,ComponentPro.Net.Mail.AlternateView)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">A zero-based index at which an item should be inserted.</param>
            <param name="value">An alternate view to be inserted.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateViewCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the list.
            </summary>
            <param name="index">A zero-based index of an item to remove.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateViewCollection.Add(ComponentPro.Net.Mail.AlternateView)">
            <summary>
            Adds an item to the end of the list.
            </summary>
            <param name="value">An alternate view to be added.</param>
            <returns>Index of the newly added item.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateViewCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds a range of items contained in the specified collection.
            </summary>
            <param name="collection">Collection of alternate views to be added.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateViewCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateViewCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:ComponentPro.Net.Mail.AlternateViewCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.AlternateViewCollection.CopyTo(ComponentPro.Net.Mail.AlternateView[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Net.Mail.AlternateViewCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Net.Mail.AttachmentCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.AlternateViewCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <value>The number of items is the collection.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.AlternateViewCollection.Item(System.Int32)">
            <summary>
            Gets or sets the list item at the specified index.
            </summary>
            <param name="index">The zero-based index of the list item to get or set.</param>
            <value>An alternate view to get or set.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.AlternateViewCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to <see cref="T:ComponentPro.Net.Mail.AlternateViewCollection"/> is synchronized (thread-safe).
            </summary>
            <value>A value indicating whether access to <see cref="T:ComponentPro.Net.Mail.AlternateViewCollection"/> is synchronized.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.AlternateViewCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to <see cref="T:ComponentPro.Net.Mail.AlternateViewCollection"/> object.
            </summary>
            <value>an object that can be used to synchronize access to <see cref="T:ComponentPro.Net.Mail.AlternateViewCollection"/> object.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.Attachment">
            <summary>
            Represents an e-mail attachment.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.SetContentFromFile(System.String,System.String,System.String)">
            <summary>
            Sets the content of this attachment to data read from the specified file and sets media type and file name.
            </summary>
            <param name="fileName">Path to the file to read data from.</param>
            <param name="mediaType">Media type.</param>
            <param name="name">File name to assign to the content.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.SetContentFromFile(System.String,System.String)">
            <summary>
            Sets the content of this attachment to data read from the specified file and sets file name.
            </summary>
            <param name="fileName">Path to the file to read data from.</param>
            <param name="name">File name to assign to the content.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.SetContentFromFile(System.String)">
            <summary>
            Sets the content of this attachment to data read from the specified file.
            </summary>
            <param name="fileName">Path to the file to read data from.</param>
            <remarks>
            File name is determined from the path.
            Media type is set to 'application/octet-stream'.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.SetContent(System.IO.Stream,System.String,System.String)">
            <summary>
            Sets the content of this attachment to data read from the specified stream and sets media type and file name.
            </summary>
            <param name="source">Source stream to read data from.</param>
            <param name="name">File name to assign to the content.</param>
            <param name="mediaType">Media type.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.SetContent(System.IO.Stream,System.String)">
            <summary>
            Sets the content of this attachment to data read from the specified stream and sets file name.
            </summary>
            <param name="source">Source stream to read data from.</param>
            <param name="name">File name to assign to the content.</param>
            <remarks>Media type is set to 'application/octet-stream'.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.#ctor">
            <summary>
            Initializes a new empty instance of a <see cref="T:ComponentPro.Net.Mail.Attachment"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.#ctor(ComponentPro.Net.Mail.MailMessage)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.Attachment"/>
            that represents an attached e-mail message.
            </summary>
            <param name="message">E-mail message to be used as an attachment.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.Attachment"/>
            with the content of the specified file.
            </summary>
            <param name="fileName">Path to the file to provide data for the attachment.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.Attachment"/>
            with the content of the specified file and with a suggested name.
            </summary>
            <param name="fileName">Path to the file to provide data for the attachment.</param>
            <param name="name">A suggested name of the attachment.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.Attachment"/>
            with the content of the specified file and with a media type and suggested name.
            </summary>
            <param name="fileName">Path to the file to provide data for the attachment.</param>
            <param name="name">A suggested name of the attachment.</param>
            <param name="mediaType">A MIME media type of the file.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.Attachment"/>
            with the content of the supplied stream and with suggested name.
            </summary>
            <param name="contentStream">Stream from which the data will be read.</param>
            <param name="name">A suggested name of the attachment.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.Attachment"/>
            with the content of the supplied stream and with a media type and suggested name.
            </summary>
            <param name="contentStream">Stream from which the data will be read.</param>
            <param name="name">A suggested name of the attachment.</param>
            <param name="mediaType">A MIME media type of the file.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.Attachment"/>
            with the content of the supplied byte array and with suggested name.
            </summary>
            <param name="content">Byte array from which the data will be read.</param>
            <param name="name">A suggested name of the attachment.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Attachment.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.Attachment"/>
            with the content of the supplied byte array and with a media type and suggested name.
            </summary>
            <param name="content">Byte array from which the data will be read.</param>
            <param name="name">A suggested name of the attachment.</param>
            <param name="mediaType">A MIME media type of the file.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.Attachment.Name">
            <summary>
            Gets the friendly name of the attachment. 
            </summary>
            <value>A string containing the "friendly name" (or "display name") of the attachment, or an empty string if the friendly name is not available.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Attachment.FileName">
            <summary>
            Gets the suggested file name of this attachment.
            </summary>
            <value>A suggested file name.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Attachment.ContentMessage">
            <summary>
            Gets the inner message of this attachment if it is an attached message of "message/rfc822" content type.
            </summary>
            <value>The inner message of this attachment; or null if not available.</value>
            <remarks>
            <p>
            To set the content of this attachment, use one of <see cref="M:ComponentPro.Net.Mail.Attachment.SetContent(System.IO.Stream,System.String)"/>
            or <see cref="M:ComponentPro.Net.Mail.Attachment.SetContentFromFile(System.String)"/> methods.
            </p>
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.Mail.AttachmentCollection">
            <summary>
            Represents the collection of mail message attachments.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.AttachmentCollection"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the list.
            </summary>
            <param name="index">A zero-based index of an item to remove.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentCollection.Add(ComponentPro.Net.Mail.Attachment)">
            <summary>
            Adds an item to the end of the list.
            </summary>
            <param name="value">Item to be added.</param>
            <returns>Index of the newly added item.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentCollection.Add(System.String)">
            <summary>
            Adds an attachment file to the list.
            </summary>
            <param name="fileName">file to be added.</param>
            <returns>Index of the newly added item.</returns>
            <exception cref="T:System.ArgumentNullException">fileName is null.</exception>
            <exception cref="T:ComponentPro.Net.Mail.MailException">Mail message is read-only.</exception>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds a range of items contained in the specified collection.
            </summary>
            <param name="collection">Collection of items to be added.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:ComponentPro.Net.Mail.AttachmentCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.AttachmentCollection.CopyTo(ComponentPro.Net.Mail.Attachment[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Net.Mail.AttachmentCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Net.Mail.AttachmentCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <value>The number of items is the collection.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentCollection.Item(System.Int32)">
            <summary>
            Gets or sets the list item at the specified index.
            </summary>
            <param name="index">The zero-based index of the list item to get or set.</param>
            <value>An item.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to <see cref="T:ComponentPro.Net.Mail.AttachmentCollection"/> is synchronized (thread-safe).
            </summary>
            <value>A value indicating whether access to <see cref="T:ComponentPro.Net.Mail.AttachmentCollection"/> is synchronized.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.AttachmentCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to <see cref="T:ComponentPro.Net.Mail.AttachmentCollection"/> object.
            </summary>
            <value>an object that can be used to synchronize access to <see cref="T:ComponentPro.Net.Mail.AttachmentCollection"/> object.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.LinkedResource">
            <summary>
            Represents an embedded resource such as an image or a CSS file referenced from the message views.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResource.SetContentFromFile(System.String,System.String)">
            <summary>
            Sets the content of this resource to data read from the specified file and sets media type.
            </summary>
            <param name="fileName">Path to the file to read data from.</param>
            <param name="mediaType">Media type.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResource.SetContent(System.IO.Stream,System.String)">
            <summary>
            Sets the content of this resource to data read from the specified stream and sets media type.
            </summary>
            <param name="contentStream">Stream from which the data will be read.</param>
            <param name="mediaType">Media type.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResource.#ctor">
            <summary>
            Initializes a new empty instance of a <see cref="T:ComponentPro.Net.Mail.LinkedResource"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.LinkedResource"/>
            with the content of the specified file and with media type.
            </summary>
            <param name="fileName">Path to the file to provide data for the resource.</param>
            <param name="mediaType">A MIME media type of the file.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResource.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.LinkedResource"/>
            with the content of the supplied stream and with a media type.
            </summary>
            <param name="contentStream">Stream from which the data will be read.</param>
            <param name="mediaType">A MIME media type of the file.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResource.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:ComponentPro.Net.Mail.LinkedResource"/>
            with the content of the supplied stream and with a media type and suggested name.
            </summary>
            <param name="contentStream">Stream from which the data will be read.</param>
            <param name="name">A suggested name of the resource.</param>
            <param name="mediaType">A MIME media type of the file.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.LinkedResource.FileName">
            <summary>
            Gets the suggested file name of this attachment.
            </summary>
            <value>A suggested file name.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.LinkedResourceCollection">
            <summary>
            Represents the collection of embedded resources referred by a <see cref="T:ComponentPro.Net.Mail.AlternateView"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResourceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.LinkedResourceCollection"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResourceCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the list.
            </summary>
            <param name="index">A zero-based index of an item to remove.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResourceCollection.Add(ComponentPro.Net.Mail.LinkedResource)">
            <summary>
            Adds an item to the end of the list.
            </summary>
            <param name="value">Item to be added.</param>
            <returns>Index of the newly added item.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResourceCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds a range of items contained in the specified collection.
            </summary>
            <param name="collection">Collection of items to be added.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResourceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResourceCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:ComponentPro.Net.Mail.LinkedResourceCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.LinkedResourceCollection.CopyTo(ComponentPro.Net.Mail.LinkedResource[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Net.Mail.LinkedResourceCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Net.Mail.AttachmentCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.LinkedResourceCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <value>The number of items is the collection.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.LinkedResourceCollection.Item(System.Int32)">
            <summary>
            Gets or sets the list item at the specified index.
            </summary>
            <param name="index">The zero-based index of the list item to get or set.</param>
            <value>An item.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.LinkedResourceCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to <see cref="T:ComponentPro.Net.Mail.LinkedResourceCollection"/> is synchronized (thread-safe).
            </summary>
            <value>A value indicating whether access to <see cref="T:ComponentPro.Net.Mail.LinkedResourceCollection"/> is synchronized.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.LinkedResourceCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to <see cref="T:ComponentPro.Net.Mail.LinkedResourceCollection"/> object.
            </summary>
            <value>an object that can be used to synchronize access to <see cref="T:ComponentPro.Net.Mail.LinkedResourceCollection"/> object.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailException">
            <summary>
            The exception that is thrown when an e-mail related error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MailException"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MailException"/> with the specified message.
            </summary>
            <param name="message">Message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MailException"/> with the specified message and inner exception.
            </summary>
            <param name="message">Message that describes the error.</param>
            <param name="inner">The exception that was the cause of this exception.</param>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailMessage">
            <summary>
            Represents an e-mail message that can be saved, loaded, processed or sent.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Clone">
            <summary>
            Creates a copy of this message.
            </summary>
            <returns>A new message.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.CreateReply(ComponentPro.Net.Mail.MailAddress,ComponentPro.Net.Mail.ReplyBodyTransformation)">
            <summary>
            Creates a new message that is a reply to the current message.
            </summary>
            <param name="sender">The sender of the reply.</param>
            <param name="transformation">Transformation mode for the original message body.</param>
            <returns>A new message.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.CreateReply(ComponentPro.Net.Mail.MailAddress,ComponentPro.Net.Mail.ReplyBodyTransformation,System.Boolean)">
            <summary>
            Creates a new message that is a reply to the current message.
            </summary>
            <param name="sender">The sender of the reply.</param>
            <param name="transformation">Transformation mode for the original message body.</param>
            <param name="replyToAll">True if the reply is to be sent to all e-mail addresses
            that were in the original 'From', 'Reply-To', 'To' and 'CC' fields.</param>
            <returns>A new message.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.#ctor">
            <summary>
            Initializes an instance of an empty e-mail message.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.MailMessage"/> from the specified mail message file.
            </summary>
            <param name="fileName">The mail message file path. It can either be in EML or Outlook format.</param>
            <example source="$ComponentPro.Mail\MailLoad"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.MailMessage"/> from the specified mail message stream.
            </summary>
            <param name="stream">The mail message stream. The content of the stream can either be in EML or Outlook format.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Load(System.IO.Stream)">
            <summary>
            Loads a mail message from the supplied stream.
            </summary>
            <param name="input">Stream to load the message from.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Load(System.String)">
            <summary>
            Loads a mail message from the supplied file.
            </summary>
            <param name="fileName">Path to the file to load the message from.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Load(System.Byte[])">
            <summary>
            Loads a mail message from its byte array representation.
            </summary>
            <param name="data">Byte array representation of the mail message.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Save(System.IO.Stream)">
            <summary>
            Saves the mail message to the supplied stream in MIME format.
            </summary>
            <param name="output">Stream to save the message to.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Save(System.String)">
            <summary>
            Saves the mail message to the supplied file in MIME format.
            </summary>
            <param name="fileName">Path to the file to save the message to.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Save(System.IO.Stream,ComponentPro.Net.Mail.MailFormat)">
            <summary>
            Saves the mail message to the supplied stream.
            </summary>
            <param name="output">Stream to save the message to.</param>
            <param name="format">Format of the saved message.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Save(System.String,ComponentPro.Net.Mail.MailFormat)">
            <summary>
            Saves the mail message to the supplied file.
            </summary>
            <param name="fileName">Path to the file to save the message to.</param>
            <param name="format">Format of the saved message.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.ToByteArray">
            <summary>
            Returns a byte array representation of the mail message.
            This is the same as the content of a file saved using the <see cref="M:ComponentPro.Net.Mail.MailMessage.Save(System.String)"/> message.
            </summary>
            <returns>Byte array representation of the mail message.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Decrypt">
            <summary>
            Decrypts an encrypted message, making the content accessible.
            </summary>
            <remarks>
            <p>
            For a successful decryption, a recipient's private key must be available -
            see the <see cref="P:ComponentPro.Net.Mail.MailMessage.Decryptable"/> property.
            </p>
            <p>
            Unless the message is signed as well, this will make it possible to modify
            the resulting message.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.RemoveSignature">
            <summary>
            Removes a signature from a signed message.
            </summary>
            <remarks>
            Unless the message is encrypted as well, this will make it possible to modify
            the resulting message.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Encrypt(System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Encrypts a message.
            </summary>
            <param name="recipients">The list of recipients' certificates. At least one must be specified.</param>
            <remarks>
            Encrypting the message will make its content inaccessible until it is decrypted.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Encrypt(System.Security.Cryptography.X509Certificates.X509Certificate2[])">
            <summary>
            Encrypts a message.
            </summary>
            <param name="recipients">The list of recipients' certificates. At least one must be specified.</param>
            <remarks>
            Encrypting the message will make its content inaccessible until it is decrypted.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Encrypt(ComponentPro.Net.Mail.MessageEncryptionAlgorithm,System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Encrypts a message.
            </summary>
            <param name="encryptionAlgorithm">An encryption algorithm to use.</param>
            <param name="recipients">The list of recipients' certificates. At least one must be specified.</param>
            <remarks>
            Encrypting the message will make its content inaccessible until it is decrypted.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Encrypt(ComponentPro.Net.Mail.MessageEncryptionAlgorithm,System.Security.Cryptography.X509Certificates.X509Certificate2[])">
            <summary>
            Encrypts a message.
            </summary>
            <param name="encryptionAlgorithm">An encryption algorithm to use.</param>
            <param name="recipients">The list of recipients' certificates. At least one must be specified.</param>
            <remarks>
            Encrypting the message will make its content inaccessible until it is decrypted.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Sign(System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Signs a message.
            </summary>
            <param name="signers">The list of signers' certificates. At least one must be specified. Also, private keys for the certificates must be available.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Sign(System.Security.Cryptography.X509Certificates.X509Certificate2[])">
            <summary>
            Signs a message.
            </summary>
            <param name="signers">The list of signers' certificates. At least one must be specified. Also, private keys for the certificates must be available.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Sign(ComponentPro.Security.Certificates.HashAlgorithmType,System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Signs a message.
            </summary>
            <param name="signers">The list of signers' certificates. At least one must be specified. Also, private keys for the certificates must be available.</param>
            <param name="algorithm">Message digest algorithm.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Sign(ComponentPro.Security.Certificates.HashAlgorithmType,System.Security.Cryptography.X509Certificates.X509Certificate2[])">
            <summary>
            Signs a message.
            </summary>
            <param name="signers">The list of signers' certificates. At least one must be specified. Also, private keys for the certificates must be available.</param>
            <param name="algorithm">Message digest algorithm.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Sign(ComponentPro.Security.Certificates.HashAlgorithmType,ComponentPro.Net.Mail.MailSignatureStyle,System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Signs a message.
            </summary>
            <param name="signers">The list of signers' certificates. At least one must be specified. Also, private keys for the certificates must be available.</param>
            <param name="style">Signature style.</param>
            <param name="algorithm">Message digest algorithm.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.Sign(ComponentPro.Security.Certificates.HashAlgorithmType,ComponentPro.Net.Mail.MailSignatureStyle,System.Security.Cryptography.X509Certificates.X509Certificate2[])">
            <summary>
            Signs a message.
            </summary>
            <param name="signers">The list of signers' certificates. At least one must be specified. Also, private keys for the certificates must be available.</param>
            <param name="style">Signature style.</param>
            <param name="algorithm">Message digest algorithm.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.ValidateSignature">
            <summary>
            Validates all digital signatures on a signed message
            and validates all the signers' certificates.
            </summary>
            <returns>Validation result.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.c_KLH(System.Boolean,c_VYA)">
            <summary>
            Validates all digital signatures on a signed message.
            Optionally, no signers' certificates are not validated, and the specified validation
            options are taken into account.
            </summary>
            <param name="verifySignatureOnly">Specifies whether to only verify the signatures, skipping the certificate validation.</param>
            <param name="options">Certificate validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailMessage.c_KLH(System.Boolean,c_VYA,c_D5C)">
            <summary>
            Validates all digital signatures on a signed message.
            Optionally, no signers' certificates are not validated, and the specified validation
            options are taken into account.
            </summary>
            <param name="verifySignatureOnly">Specifies whether to only verify the signatures, skipping the certificate validation.</param>
            <param name="options">Certificate validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <param name="certificateEngine">Certificate chain engine.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.c_SXD">
            <summary>
            Gets or sets the <see cref="!:ICertificateFinder"/> to be used to find certificates
            used to encrypt or sign the message.
            </summary>
            <value>The certificate finder.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Silent">
            <summary>
            Gets or sets a value indicating whether Cryptographic Service Provider (CSP) operations
            are permitted to display any user interface.
            </summary>
            <value>A value indicating whether CSP can display UI.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.ReadOnly">
            <summary>
            Gets a value indicating whether the message is read-only.
            </summary>
            <value>A value indicating whether the message is read-only.</value>
            <remarks>
            Any message that is either signed or encrypted is read-only.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.IsSigned">
            <summary>
            Gets a value indicating whether the message is signed.
            </summary>
            <value>A value indicating whether the message is signed.</value>
            <remarks>
            <p>
            Signers of a signed message are accessible through <see cref="P:ComponentPro.Net.Mail.MailMessage.Signers"/> collection.
            The signature can be validated using <see cref="M:ComponentPro.Net.Mail.MailMessage.ValidateSignature"/> method or removed
            using <see cref="M:ComponentPro.Net.Mail.MailMessage.RemoveSignature"/> method. It is created using <see cref="M:ComponentPro.Net.Mail.MailMessage.Sign(System.Security.Cryptography.X509Certificates.X509Certificate2[])"/> method.
            </p>
            <p>
            Please note that messages that are encrypted might also be signed, but because the signature
            itself is also encrypted as well, this fact will not be known until the message is decrypted.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.IsEncrypted">
            <summary>
            Gets a value indicating whether the message is encrypted.
            </summary>
            <value>A value indicating whether the message is encrypted.</value>
            <remarks>
            <p>
            Recipients of an encrypted message are accessible through <see cref="P:ComponentPro.Net.Mail.MailMessage.Recipients"/> collection.
            The message can be decrypted using <see cref="M:ComponentPro.Net.Mail.MailMessage.Decrypt"/> method. To encrypt a message,
            use <see cref="M:ComponentPro.Net.Mail.MailMessage.Encrypt(System.Security.Cryptography.X509Certificates.X509Certificate2[])"/> method.
            </p>
            <p>
            Until an encrypted message is decrypted, its content is inaccessible.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Decryptable">
            <summary>
            Gets a value indicating whether the message can be decrypted.
            </summary>
            <value>A value indicating whether the message can be decrypted.</value>
            <remarks>
            An encrypted message can only be decrypted if the corresponding private key are available.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.EncryptionAlgorithm">
            <summary>
            Gets an encryption algorithm used to encrypt an encrypted message.
            </summary>
            <value>An encryption algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Recipients">
            <summary>
            Gets the collection of recipients of an encrypted message.
            </summary>
            <value>A collection of recipients.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Signers">
            <summary>
            Gets the collection of signers of a signed message.
            </summary>
            <value>A collection of signers.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Date">
            <summary>
            Gets or sets the origination date of this message.
            If origination date is not available, return the date specified by the first 'Received' header.
            </summary>
            <value>The origination date.</value>
            <remarks>
            The origination date specifies the date and time at which the creator
            of the message indicated that the message was complete and ready to enter
            the mail delivery system.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.ReceivedDate">
            <summary>
            Gets the received date of this message.
            </summary>
            <value>The received date.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.From">
            <summary>
            Gets or sets the list of authors of this message.
            </summary>
            <value>The list of authors.</value>
            <remarks>
            <p>
            This property specifies the the list of authors
            of the message.
            </p>
            <p>
            If this field contains multiple authors, the '<see cref="P:ComponentPro.Net.Mail.MailMessage.Sender"/>'
            field must be set to specify the agent responsible for the transmission
            of the message
            </p>
            <p>
            If this field contains a single author that is also the sender
            of the message, the '<see cref="P:ComponentPro.Net.Mail.MailMessage.Sender"/>' field should not be set.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Sender">
            <summary>
            Gets or sets the sender of this message.
            </summary>
            <value>The sender of this message.</value>
            <remarks>
            <p>
            This property specifies the agent responsible for the transmission
            of the message. Use <see cref="P:ComponentPro.Net.Mail.MailMessage.From"/> to specify the list of authors
            of the message.
            </p>
            <p>
            This field must be set if the '<see cref="P:ComponentPro.Net.Mail.MailMessage.From"/>' field contains multiple
            authors.
            </p>
            <p>
            This field should not be set if the '<see cref="P:ComponentPro.Net.Mail.MailMessage.From"/> field contains
            a single author that is also the sender of the message.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.ReplyTo">
            <summary>
            Gets or sets the list of addresses that should receive replies
            to this message.
            </summary>
            <value>The list of addresses that should receive replies.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.To">
            <summary>
            Gets or sets the list of addresses of primary recipients of the message.
            </summary>
            <value>The list of primary recipients.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Cc">
            <summary>
            Gets the list of addresses of others who are to receive the message.
            </summary>
            <value>The list of other recipients.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Bcc">
            <summary>
            Gets or sets the list of addresses of recipients that are not to be revealed to other recipients of the message.
            </summary>
            <value>The list of recipients.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.MessageIdentifier">
            <summary>
            Gets or sets the unique identifier of the message.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.InReplyTo">
            <summary>
            Gets or sets the list of identifiers of messages to which the message is a reply.
            </summary>
            <value>The list of message identifiers.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Subject">
            <summary>
            Gets or sets the subject of the message.
            </summary>
            <value>The subject.</value>
            <remarks>
            This property contains a short string identifying the topic
            of the message.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Headers">
            <summary>
            Gets the list of headers of this entity.
            </summary>
            <value>The list of headers.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Attachments">
            <summary>
            Gets the collection of attachments of this message.
            </summary>
            <value>A collection of attachments of this message.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.AlternateViews">
            <summary>
            Gets the collection of alternate forms of the message body.
            </summary>
            <value>A collection of alternate forms of the message body.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.LinkedResources">
            <summary>
            Gets the collection of embedded resources referred by message views.
            </summary>
            <value>A collection of embedded resources.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.EnvelopeId">
            <summary>
            Gets or sets the envelope identifier to be transmitted along with the message
            and included in any DSNs issued.
            </summary>
            <value>The envelope identifier.</value>
            <remarks>
            <p>
            The purpose of the envelope identifier is to allow the sender of a message
            to identify the transaction for which the DSN was issued.
            </p>
            <p>
            Please note that the envelope ID is not a part of a mail message and is not saved with it.
            Its purpose is to be used while sending the message.
            </p>
            <p>
            Envelope ID must be an ASCII string up to 100 characters in length.
            Characters &lt; 33 and character '+', '=' and character 127 are represented as three characters.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Priority">
            <summary>
            Gets or sets the priority of the message.
            </summary>
            <value>Message priority.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.c_AQH">
            <summary>
            Gets or sets the importance of the message.
            </summary>
            <value>Message importance.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.HasBodyHtml">
            <summary>
            Gets the value indicating whether the message has a HTML body.
            </summary>
            <value>A value indicating whether the message has a HTML body.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.HasBodyText">
            <summary>
            Gets the value indicating whether the message has a text body.
            </summary>
            <value>A value indicating whether the message has a text body.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.BodyHtml">
            <summary>
            Gets the HTML body of the message, or an empty string if it has no HTML body.
            </summary>
            <value>The HTML body of the message.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.BodyText">
            <summary>
            Gets the text body of the message, or an empty string if it has no text body.
            </summary>
            <value>The text body of the message.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.DefaultCharset">
            <summary>
            Gets or sets the default charset for MIME body and headers.
            </summary>
            <value>Default charset.</value>
            <remarks>
            Only set this if you want to specify your own charset instead of letting the build-in automatic charset detector do its work.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailMessage.Config">
            <summary>
            Gets or sets the mail message options.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.MailMessage.UnparsableHeader">
            <summary>
            Occurs when an unparsable header is encountered while parsing a MIME message.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailMessage.c_EFH">
            <summary>
            Mail message importance.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailMessage.c_EFH.c_FFH">
            <summary>
            The message has low importance.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailMessage.c_EFH.c_GFH">
            <summary>
            The message has normal importance.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailMessage.c_EFH.c_HFH">
            <summary>
            The message has high importance.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MessageEncryptionAlgorithm">
            <summary>
            Defines the encryption algorithm used to encrypt mail.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MessageEncryptionAlgorithm.None">
            <summary>
            No encryption algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MessageEncryptionAlgorithm.Unsupported">
            <summary>
            Unsupported encryption algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MessageEncryptionAlgorithm.TripleDES">
            <summary>
            3DES.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MessageEncryptionAlgorithm.DES">
            <summary>
            DES.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MessageEncryptionAlgorithm.RC2">
            <summary>
            RC2.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MessageEncryptionAlgorithm.GOST_28147_89">
            <summary>
            GOST 28147-89. Experimental support.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MessageEncryptionAlgorithm.AES128">
            <summary>
            AES (128bit).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MessageEncryptionAlgorithm.AES192">
            <summary>
            AES (128bit).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MessageEncryptionAlgorithm.AES256">
            <summary>
            AES (128bit).
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ReplyBodyTransformation">
            <summary>
            Defines how to process the original message body when creating a reply.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ReplyBodyTransformation.None">
            <summary>
            Use a blank body in the new message.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ReplyBodyTransformation.KeepOriginal">
            <summary>
            Copy the original body into the new message.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.ReplyBodyTransformation.Attachment">
            <summary>
            Add the original body as an attachment into the new message.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailSignatureStyle">
            <summary>
            Specifies the style of signed content.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailSignatureStyle.None">
            <summary>No signed content.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailSignatureStyle.Detached">
            <summary>
            Detached signature - the mail message will be readable even by clients
            that don't support S/MIME.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailSignatureStyle.Enveloped">
            <summary>
            Enveloped signature - the mail message will only be readable by clients
            that support S/MIME.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailFormat">
            <summary>
            Specifies mail message file format.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailFormat.Mime">
            <summary>
            Represents a MIME (*.eml) mail message.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailFormat.OutlookMsg">
            <summary>
            Represents an Outlook (*.msg) mail message.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailPriority">
            <summary>
            Mail message priority.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailPriority.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailPriority.Normal">
            <summary>
            Normal priority.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailPriority.High">
            <summary>
            High priority.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailSignatureStatus">
            <summary>
            Mail signature status.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailSignatureStatus.CertificateNotValid">
            <summary>The certificate is not valid.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailSignatureStatus.CertificateNotAvailable">
            <summary>Certificate is not available.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailSignatureStatus.SignatureNotValid">
            <summary>The signature is not valid./// </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailSignatureStatus.MissingSender">
            <summary>There was not sender in the message.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailSignatureStatus.SenderSignatureMissing">
            <summary>A signature for a sender is missing.</summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailSignatureValidationResult">
            <summary>
            Represents the result of message signature validation.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailSignatureValidationResult.Status">
            <summary>
            Gets the validity status mask.
            </summary>
            <value>Vvalidity status mask.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailSignatureValidationResult.SignatureValidationStatus">
            <summary>
            Gets the signature validity status mask.
            </summary>
            <value>Signature validity status mask.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailSignatureValidationResult.CertificateValidationStatus">
            <summary>
            Gets the certificate validation status mask.
            </summary>
            <value>Certificate validation status mask.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailSignatureValidationResult.Valid">
            <summary>
            Gets the certificate chain validity status.
            </summary>
            <value>True if valid, false if not valid.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailSignatureValidationResult.MissingSignatureEmails">
            <summary>
            Returns a list of e-mail addresses whose signatures are missing.
            </summary>
            <value>A list of e-mail addresses whose signatures are missing.</value>
        </member>
        <member name="T:c_NSH">
            <summary>
            Represents mail server type.
            </summary>
        </member>
        <member name="F:c_NSH.c_HD">
            <summary>No server.</summary>
        </member>
        <member name="F:c_NSH.c_OSH">
            <summary>Microsoft IIS SMTP server.</summary>
        </member>
        <member name="T:c_LSH">
            <summary>
            Utility class that contains mail server spool related static methods.
            </summary>
        </member>
        <member name="M:c_LSH.c_LHA(c_NSH,ComponentPro.Net.Mail.MailMessage,System.String)">
            <summary>
            Sends the message by submitting it into the MS IIS SMTP service's pickup directory.
            </summary>
            <param name="message">Message to be sent.</param>
            <param name="serverType">Server type.</param>
            <param name="pickupDirectory">The pickup directory to submit the message to, or null to detect automatically.</param>
            <remarks>
            Microsoft SMTP service must be running at the computer where the code runs in order for this method to work.
            </remarks>
        </member>
        <member name="M:c_LSH.c_LHA(c_NSH,ComponentPro.Net.Mail.MailMessage)">
            <summary>
            Sends the message by submitting it into the MS IIS SMTP service's pickup directory.
            </summary>
            <param name="message">Message to be sent.</param>
            <param name="serverType">Server type.</param>
            <remarks>
            Microsoft SMTP service must be running at the computer where the code runs in order for this method to work.
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.Mail.MediaTypeNames">
            <summary>
            Specifies the media type information for an e-mail message attachment.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MediaTypeNames.Application">
            <summary>
            Specifies the kind of application data in an e-mail message attachment. This contains string representations of the common subtypes of 'application' type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Application.Octet">
            <summary>Specifies that the Application data is not interpreted.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Application.Zip">
            <summary>Specifies that the Application data is compressed.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Application.Pdf">
            <summary>Specifies that the Application data is in Portable Document Format (PDF).</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Application.Rtf">
            <summary>Specifies that the Application data is in Rich Text Format (RTF).</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Application.Soap">
            <summary>Specifies that the Application data is a SOAP document.</summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MediaTypeNames.Image">
            <summary>
            Specifies the type of image data in an e-mail message attachment. This contains string representations of the common subtypes of 'image' type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Image.Png">
            <summary>Specifies that the Image data is in Portable Network Graphics (PNG).</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Image.Jpeg">
            <summary>Specifies that the Image data is in Joint Photographic Experts Group (JPEG) format.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Image.Gif">
            <summary>Specifies that the Image data is in Graphics Interchange Format (GIF).</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Image.Tiff">
            <summary>Specifies that the Image data is in Tagged Image File Format (TIFF).</summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MediaTypeNames.Text">
            <summary>
            Specifies the type of text data in an e-mail message attachment. This contains string representations of the common subtypes of 'text' type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Text.Plain">
            <summary>Specifies that the Text data is in plain text format.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Text.Html">
            <summary>Specifies that the Text data is in HTML format.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Text.Xml">
            <summary>Specifies that the Text data is in XML format.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Text.Rtf">
            <summary>Specifies that the Text data is in Rich Text Format (RTF).</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Text.Enriched">
            <summary>"text/enriched"</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Text.RichText">
            <summary>"text/richtext"</summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MediaTypeNames.Multipart">
            <summary>
            Contains string representations of the common subtypes of 'multipart' type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Multipart.Mixed">
            <summary>"multipart/mixed"</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Multipart.Alternative">
            <summary>"multipart/alternative"</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Multipart.Digest">
            <summary>"multipart/digest"</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Multipart.Related">
            <summary>"multipart/related"</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Multipart.Parallel">
            <summary>"multipart/parallel"</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Multipart.Report">
            <summary>"multipart/report"</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Multipart.Signed">
            <summary>"multipart/signed"</summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MediaTypeNames.Message">
            <summary>
            Contains string representations of the common subtypes of 'message' type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Message.Rfc822">
            <summary>"message/rfc822"</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MediaTypeNames.Message.Partial">
            <summary>"message/partial"</summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.SubjectInfo">
            <summary>
            Represents a message signer or an encrypted message recipient.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SubjectInfo.Identifier">
            <summary>
            Gets the identifier of the signer or recipient
            </summary>
            <value>Identifier of the signer or recipient.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SubjectInfo.Certificate">
            <summary>
            Gets the certificate associated with the signer or recipient, or null if not available.
            </summary>
            <remarks>The signer's/recipient's certificate, or null.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.SubjectInfo.CertificateChain">
            <summary>
            Gets the certificate chain associated with the signer or recipient, or null if not available.
            </summary>
            <remarks>The signer's/recipient's certificate chain, or null.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.SubjectInfo.DigestAlgorithm">
            <summary>
            Gets the digest algorithm used to produce a signature. Only set for signers, not for recipients.
            </summary>
            <value>Digest algorithm.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.SubjectInfoCollection">
            <summary>
            Represents the collection of alternate mail message views.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.SubjectInfoCollection.#ctor(c_KWD)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.SubjectInfoCollection"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.SubjectInfoCollection.#ctor(c_P5D)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.SubjectInfoCollection"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.SubjectInfoCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.SubjectInfoCollection.System#Collections#Generic#IEnumerable{ComponentPro#Net#Mail#SubjectInfo}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:ComponentPro.Net.Mail.SubjectInfoCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.SubjectInfoCollection.CopyTo(ComponentPro.Net.Mail.SubjectInfo[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Net.Mail.SubjectInfoCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Net.Mail.SubjectInfoCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.SubjectInfoCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <value>The number of items is the collection.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SubjectInfoCollection.Item(System.Int32)">
            <summary>
            Gets the list item at the specified index.
            </summary>
            <param name="index">The zero-based index of the list item to get or set.</param>
            <value>An item.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SubjectInfoCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to <see cref="T:ComponentPro.Net.Mail.SubjectInfoCollection"/> is synchronized (thread-safe).
            </summary>
            <value>A value indicating whether access to <see cref="T:ComponentPro.Net.Mail.SubjectInfoCollection"/> is synchronized.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SubjectInfoCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to <see cref="T:ComponentPro.Net.Mail.SubjectInfoCollection"/> object.
            </summary>
            <value>an object that can be used to synchronize access to <see cref="T:ComponentPro.Net.Mail.SubjectInfoCollection"/> object.</value>
        </member>
        <member name="M:c_HGH.c_R1(ComponentPro.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            Check whether the message has a TNEF attachment and parses it, adding any bodies and attachment to the respective collections.
            </summary>
            <param name="message">Message to process.</param>
            <param name="treatBodyTextAsAttachments">Specifies whether to treat RTF body parts as attachments. If true, bodies are added to Attachments collection; if false, they are added to AlternateViews collections.</param>
            <returns>True if TNEF attachment found and processed; false otherwise</returns>
        </member>
        <member name="M:c_TFH.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:CompoundFile"/> class.
            </summary>
            <param name="filePath">Path to a compound file.</param>
        </member>
        <member name="M:c_TFH.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="!:CompoundFile"/> class.
            </summary>
            <param name="fileStream">Stream where to write/read the data of compound file.</param>
            <param name="leaveOpen">True to leave <paramref name="fileStream"/> opened after calling the <see cref="!:CompoundFile.Close()"/> method; 
            false to close also <paramref name="fileStream"/>.</param>
        </member>
        <member name="M:c_TFH.c_GYH(System.String)">
            <summary>
            Gets an associated Stream for reading the data from the specified file item.
            Note that same stream is returned for one particular item always.
            </summary>
            <param name="path">Path to a file item.</param>
            <returns>A Stream for reading the data.</returns>
        </member>
        <member name="M:c_TFH.c_HYH(System.String)">
            <summary>
            Gets an array of child items of the specified directory item.
            </summary>
            <param name="path">Path to a directory item.</param>
            <returns>An array of child items.</returns>
        </member>
        <member name="M:c_TFH.c_TA(System.String)">
            <summary>
            Gets the specified item.
            </summary>
            <param name="path">Path to an item.</param>
            <returns>An initialized CompoundFileItem; or null reference (Nothing in Visual Basic) if no such item exists.</returns>
        </member>
        <member name="M:c_TFH.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the CompoundFile and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:c_TFH.c_RHA">
            <summary>
            Closes the current CompoundFile and releases any associated resources.
            </summary>
        </member>
        <member name="P:c_TFH.Item(System.String)">
            <summary>
            Gets the specified item.
            </summary>
            <param name="path">Path to an item.</param>
            <returns>An initialized CompoundFileItem; or null reference (Nothing in Visual Basic) if no such item exists.</returns>
        </member>
        <member name="T:c_WFH">
            <summary>
            The exception that is thrown when an error related to a compound file occurs.
            </summary>
        </member>
        <member name="M:c_WFH.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="!:CompoundFileException"/> with the specified message.
            </summary>
            <param name="message">Message that describes the error.</param>
        </member>
        <member name="M:c_WFH.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="!:CompoundFileException"/> with the specified message and inner exception.
            </summary>
            <param name="message">Message that describes the error.</param>
            <param name="innerException">The exception that was the cause of this exception.</param>
        </member>
        <member name="T:c_EYH">
            <summary>
            Represents a directory or file within a compound file.
            </summary>
        </member>
        <member name="M:c_EYH.c_GYH">
            <summary>
            Gets an associated Stream for reading the data from this file item.
            Note that same stream is returned for one particular item always.
            </summary>
            <returns>A Stream for reading the data.</returns>
        </member>
        <member name="M:c_EYH.c_HYH">
            <summary>
            Gets an array of child items of this directory item.
            </summary>
            <returns>An array of child items.</returns>
        </member>
        <member name="M:c_EYH.ToString">
            <summary>
            Returns a string that represents the current item.
            </summary>
            <returns>A string that represents the current item.</returns>
        </member>
        <member name="P:c_EYH.c_DOB">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:c_EYH.c_KN">
            <summary>
            Gets the full path of the item.
            </summary>
        </member>
        <member name="P:c_EYH.c_PUA">
            <summary>
            Gets the length of the file item (zero for directories).
            </summary>
        </member>
        <member name="P:c_EYH.c_U0H">
            <summary>
            Gets a value indicating whether the item is a file.
            </summary>
        </member>
        <member name="P:c_EYH.c_M1H">
            <summary>
            Gets a value indicating whether the item is a directory.
            </summary>
        </member>
        <member name="P:c_EYH.c_D1H">
            <summary>
            Gets or sets the CLSID (a GUID representing an object class) of the directory item.
            </summary>
            <remarks>
            This field contains an object class GUID, if this entry is a storage or root storage. 
            If there is no object class GUID set on this object, then the field MUST be set to all zeroes. 
            In a stream object, this field MUST be set to all zeroes. If not NULL, the object class GUID can be used as a parameter to launch applications.
            </remarks>
        </member>
        <member name="T:c_XZH">
            <summary>
            Object for reading compound files.
            </summary>
        </member>
        <member name="M:c_XZH.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:CompoundFileReader"/> class with the data from specified file.
            </summary>
            <param name="filePath">Path to a compound file to read data from.</param>
        </member>
        <member name="M:c_XZH.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="!:CompoundFileReader"/> class with the data from specified stream.
            </summary>
            <param name="fileStream">Stream containing data of compound file.</param>
            <param name="leaveOpen">True to leave <paramref name="fileStream"/> opened after calling the <see cref="!:CompoundFile.Close()"/> method; 
            false to close also <paramref name="fileStream"/>.</param>
        </member>
        <member name="T:c_SZH">
            <summary>
            Object for writing compound files.
            </summary>
        </member>
        <member name="M:c_SZH.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:CompoundFileWriter"/> class.
            </summary>
            <param name="filePath">Path to a compound file to write data to.</param>
        </member>
        <member name="M:c_SZH.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="!:CompoundFileWriter"/> class.
            </summary>
            <param name="fileStream">Stream to write compound file data to.</param>
            <param name="leaveOpen">True to leave <paramref name="fileStream"/> opened after calling the <see cref="!:CompoundFile.Close()"/> method; 
            false to close also <paramref name="fileStream"/>.</param>
        </member>
        <member name="M:c_SZH.c_EJ(System.String)">
            <summary>
            Creates a directory item within the compound file.
            </summary>
            <param name="path">Path of the directory to create.</param>
            <returns>Newly created directory item.</returns>
        </member>
        <member name="M:c_SZH.c_OW(System.String,System.Byte[])">
            <summary>
            Add specified data in new file within the compound file.
            </summary>
            <param name="path">Path to a file to create.</param>
            <param name="buffer">Data to write.</param>
        </member>
        <member name="M:c_SZH.c_OW(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add specified data in new file within the compound file.
            </summary>
            <param name="path">Path to a file to create.</param>
            <param name="buffer">Data to write.</param>
            <param name="offset">Zero-based offset within the buffer where to start.</param>
            <param name="count">Count of the data to write.</param>
        </member>
        <member name="M:c_SZH.c_OW(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Add data from specified stream in new file within the compound file.
            </summary>
            <param name="path">Path to a file to create.</param>
            <param name="stream">Stream containing the data to write.</param>
            <param name="maxCount">Max count of data to write from the stream.</param>
        </member>
        <member name="M:c_SZH.c_O4B">
            <summary>
            Saves the compound file (writes headers/structures to the underlying stream).
            </summary>
        </member>
        <member name="M:c_ABH.c_A6H(ComponentPro.Net.Mail.MimeUnparsableHeaderEventArgs)">
            <summary>
            Raises the <see cref="!:UnparsableHeader"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.MimeUnparsableHeaderEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:c_ABH.#ctor">
            <summary>
            Initializes a new instance of <see cref="!:MimeEntity"/>.
            </summary>
        </member>
        <member name="M:c_ABH.c_HH">
            <summary>
            Creates a copy of this entity.
            </summary>
            <returns>A new entity.</returns>
            <remarks><see cref="!:Parent"/> of the new entity will be set to null.</remarks>
        </member>
        <member name="M:c_ABH.c_PBH">
            <summary>
            Coverts the <see cref="!:MimeEntity"/> into a <see cref="!:MimeMessage"/>.
            </summary>
        </member>
        <member name="M:c_ABH.c_SWD(c_ABH)">
            <summary>
            Sets the parent of this entity.
            </summary>
            <param name="parent">The new parent of this entity.</param>
        </member>
        <member name="M:c_ABH.c_T3H(System.Int32)">
            <returns>
            A non-empty string of at most 70 ASCII characters
            such that no line in any child
            entity starts with it. Implementations of this
            method must not return null.
            </returns>
        </member>
        <member name="M:c_ABH.c_S3H">
            <summary>
            Generates appropriate boundaries for this entity
            and all entites in its subtree.
            </summary>
        </member>
        <member name="M:c_ABH.c_F6H(System.IO.Stream)">
            <summary>
            Starts writig the content of this entity in an appropriately encoded form.
            </summary>
            <returns>An object to pass to WriteNext.</returns>
        </member>
        <member name="M:c_ABH.c_ECH(System.Boolean)">
            <summary>
            Returns the stream representing a content of this entity.
            </summary>
            <param name="writable">Specifies whether to return a writable or read-only stream.</param>
            <returns>The stream representing a content of this entity.</returns>
            <remarks>
            To set the content of this entity, it is recommended to use one of <see cref="!:SetContent(string)"/>
            or <see cref="!:SetContentFromFile(string)"/> methods.
            </remarks>
        </member>
        <member name="M:c_ABH.c_ECH">
            <summary>
            Returns the read-only stream representing a content of this entity.
            </summary>
            <returns>The read-only stream representing a content of this entity.</returns>
            <remarks>
            To set the content of this entity, use one of <see cref="!:SetContent(string)"/>
            or <see cref="!:SetContentFromFile(string)"/> methods.
            </remarks>
        </member>
        <member name="M:c_ABH.c_B8H">
            <summary>
            Returns the read-only stream representing a raw content of this entity.
            Only available for messages that were parsed with <see cref="!:MimeOptions"/>.KeepRawEntityBody flag.
            You probably need to use <see cref="!:GetContentStream(bool)"/> instead.
            </summary>
            <returns>The read-only stream representing a raw content of this entity; or null if not available.</returns>
        </member>
        <member name="M:c_ABH.c_WVD(System.String)">
            <summary>
            Sets the content of this entity to the specified text.
            </summary>
            <param name="text">Content to set.</param>
            <remarks>
            Media type is set to 'text/plain'.
            Character set and transfer encoding are determined automatically.
            </remarks>
        </member>
        <member name="M:c_ABH.c_WVD(System.String,System.String)">
            <summary>
            Sets the content of this entity to the specified text and media type.
            </summary>
            <param name="text">Content to set.</param>
            <param name="mediaType">Media type.</param>
            <remarks>
            Character set and transfer encoding are determined automatically.
            </remarks>
        </member>
        <member name="M:c_ABH.c_WVD(System.String,System.String,System.Text.Encoding)">
            <summary>
            Sets the content of this entity to the specified text, media type and character set.
            </summary>
            <param name="text">Content to set.</param>
            <param name="mediaType">Media type.</param>
            <param name="charset">Character set to use for encoding the text.</param>
            <remarks>
            Transfer encoding is determined automatically.
            </remarks>
        </member>
        <member name="M:c_ABH.c_WVD(System.String,System.String,System.Text.Encoding,ComponentPro.Net.Mail.TransferEncoding)">
            <summary>
            Sets the content of this entity to the specified text, media type and character set.
            </summary>
            <param name="text">Content to set.</param>
            <param name="mediaType">Media type.</param>
            <param name="charset">Character set to use for encoding the text.</param>
            <param name="transferEncoding">Transfer encoding.</param>
        </member>
        <member name="M:c_ABH.c_WVD(c_ABH)">
            <summary>
            Sets the inner message of this entity to the specified message.
            </summary>
            <param name="entity">Entity.</param>
            <remarks>
            Media type is set to 'message/rfc822'.
            </remarks>
        </member>
        <member name="M:c_ABH.c_FLH(c_ABH,c_TPA[])">
            <summary>
            Sets the content of this entity to the specified enveloped entity.
            </summary>
            <param name="entity">Entity to be enveloped.</param>
            <param name="recipients">The list of recipients' certificates.</param>
            <remarks>
            <p>
            The purpose of enveloped content is to be encrypted.
            Call the <see cref="!:Encrypt"/> method prior to saving or sending the message.
            </p>
            </remarks>
        </member>
        <member name="M:c_ABH.c_FLH(c_ABH,System.String,System.Int32,c_TPA[])">
            <summary>
            Sets the content of this entity to the specified enveloped entity.
            </summary>
            <param name="entity">Entity to be enveloped.</param>
            <param name="recipients">The list of recipients' certificates.</param>
            <param name="encryptionAlgorithm">Encryption algorithm OID.</param>
            <param name="keyLength">The key length in bits (only used by RC2 algorithm).</param>
            <remarks>
            <p>
            The purpose of enveloped content is to be encrypted.
            Call the <see cref="!:Encrypt"/> method prior to saving or sending the message.
            </p>
            <p>
            Currently, 3DES ("1.2.840.113549.3.7"), 
            AES ("2.16.840.1.101.3.4.1.2" for 128-bit, "2.16.840.1.101.3.4.1.22" for 192-bit and "2.16.840.1.101.3.4.1.42" for 256-bit),
            DES ("1.3.14.3.2.7") and RC2 ("1.2.840.113549.3.2") encryption algorithms are supported.
            </p>
            </remarks>
        </member>
        <member name="M:c_ABH.c_JLH(c_ABH,c_TPA[])">
            <summary>
            Sets the content of this entity to the specified signed entity.
            </summary>
            <param name="entity">Entity to be added as signed content.</param>
            <param name="signers">The list of signers' certificates with private keys to sign the content.</param>
            <remarks>
            Note: Due to a bug in MS Outlook Express, the <see cref="!:Epilogue"/> of the signed content will be set
            to null by this method.
            </remarks>
        </member>
        <member name="M:c_ABH.c_JLH(c_ABH,c_MBH,c_TPA[])">
            <summary>
            Sets the content of this entity to the specified signed content.
            </summary>
            <param name="entity">Entity to be added as signed content.</param>
            <param name="style">Signed content style.</param>
            <param name="signers">The list of signers' certificates with private keys to sign the content.</param>
            <remarks>
            Note: Due to a bug in MS Outlook Express, the <see cref="!:Epilogue"/> of the signed content will be set
            to null by this method.
            </remarks>
        </member>
        <member name="M:c_ABH.c_JLH(c_ABH,c_MBH,ComponentPro.Security.Certificates.HashAlgorithmType,c_TPA[])">
            <summary>
            Sets the content of this entity to the specified signed content.
            </summary>
            <param name="entity">Entity to be added as signed content.</param>
            <param name="style">Signed content style.</param>
            <param name="algorithm">Digest algorithm.</param>
            <param name="signers">The list of signers' certificates with private keys to sign the content.</param>
            <remarks>
            Note: Due to a bug in MS Outlook Express, the <see cref="!:Epilogue"/> of the signed content will be set
            to null by this method.
            </remarks>
        </member>
        <member name="M:c_ABH.c_WVD(System.IO.Stream,System.String,System.String,ComponentPro.Net.Mail.TransferEncoding)">
            <summary>
            Sets the content of this entity to data read from the specified stream and sets media type, file name and transfer encoding.
            </summary>
            <param name="source">Source stream to read data from.</param>
            <param name="mediaType">Media type.</param>
            <param name="name">File name to assign to the content.</param>
            <param name="transferEncoding">Transfer encoding.</param>
        </member>
        <member name="M:c_ABH.c_WVD(System.IO.Stream,System.String,System.String)">
            <summary>
            Sets the content of this entity to data read from the specified stream and sets media type and file name.
            </summary>
            <param name="source">Source stream to read data from.</param>
            <param name="mediaType">Media type.</param>
            <param name="name">File name to assign to the content, or null if no file name is to be assigned.</param>
        </member>
        <member name="M:c_ABH.c_WVD(System.IO.Stream,System.String)">
            <summary>
            Sets the content of this entity to data read from the specified stream and sets media type and file name.
            </summary>
            <param name="source">Source stream to read data from.</param>
            <param name="name">File name to assign to the content, or null if no file name is to be assigned.</param>
            <remarks>Media type is set to 'application/octet-stream'.</remarks>
        </member>
        <member name="M:c_ABH.c_WVD(System.IO.Stream)">
            <summary>
            Sets the content of this entity to data read from the specified stream.
            </summary>
            <param name="source">Source stream to read data from.</param>
            <remarks>
            File name is not set automatically. Set it manually using <see cref="!:Name"/> if needed.
            Media type is set to 'application/octet-stream'.
            </remarks>
        </member>
        <member name="M:c_ABH.c_CBH(System.String,System.String,System.String,ComponentPro.Net.Mail.TransferEncoding)">
            <summary>
            Sets the content of this entity to data read from the specified file and sets media type, file name and transfer encoding.
            </summary>
            <param name="fileName">Path to the file to read data from.</param>
            <param name="mediaType">Media type.</param>
            <param name="name">File name to assign to the content, or null if no file name is to be assigned.</param>
            <param name="transferEncoding">Transfer encoding.</param>
        </member>
        <member name="M:c_ABH.c_CBH(System.String,System.String,System.String)">
            <summary>
            Sets the content of this entity to data read from the specified file and sets media type and file name.
            </summary>
            <param name="fileName">Path to the file to read data from.</param>
            <param name="mediaType">Media type.</param>
            <param name="name">File name to assign to the content, or null if no file name is to be assigned.</param>
        </member>
        <member name="M:c_ABH.c_CBH(System.String,System.String)">
            <summary>
            Sets the content of this entity to data read from the specified file and sets file name.
            </summary>
            <param name="fileName">Path to the file to read data from.</param>
            <param name="name">File name to assign to the content, or null if no file name is to be assigned.</param>
            <remarks>
            Media type is set to 'application/octet-stream'.
            </remarks>
        </member>
        <member name="M:c_ABH.c_CBH(System.String)">
            <summary>
            Sets the content of this entity to data read from the specified file.
            </summary>
            <param name="fileName">Path to the file to read data from.</param>
            <remarks>
            File name is not set automatically. Set it manually using <see cref="!:Name"/> if needed.
            Media type is set to 'application/octet-stream'.
            </remarks>
        </member>
        <member name="M:c_ABH.c_MUA">
            <summary>
            Decrypts the contents of an enveloped entity.
            This method is only intended for entities with enveloped content.
            </summary>
            <remarks>For a successful decryption, a recipient's private key must be available.</remarks>
        </member>
        <member name="M:c_ABH.c_KUA">
            <summary>
            Encrypts the contents of an enveloped entity.
            This method is only intended for entities with enveloped content.
            </summary>
        </member>
        <member name="M:c_ABH.c_RHB">
            <summary>
            Creates signatures for all signers that do not have one yet.
            This method is only intended for entities with signed content.
            </summary>
        </member>
        <member name="M:c_ABH.c_KLH">
            <summary>
            Validates all digital signatures on this CMS/PKCS #7 signed message
            and validates all the signers' certificates.
            This method is only intended for entities with signed content.
            </summary>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_ABH.c_KLH(System.Boolean,c_VYA)">
            <summary>
            Validates all digital signatures on this CMS/PKCS #7 signed message.
            Optionally, no signers' certificates are not validated, and the specified validation
            options are taken into account.
            This method is only intended for entities with signed content.
            </summary>
            <param name="verifySignatureOnly">Specifies whether to only verify the signatures, skipping the certificate validation.</param>
            <param name="options">Certificate validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_ABH.c_KLH(System.Boolean,c_VYA,c_D5C)">
            <summary>
            Validates all digital signatures on this CMS/PKCS #7 signed message.
            Optionally, no signers' certificates are not validated, and the specified validation
            options are taken into account.
            This method is only intended for entities with signed content.
            </summary>
            <param name="verifySignatureOnly">Specifies whether to only verify the signatures, skipping the certificate validation.</param>
            <param name="options">Certificate validation options (not supported by CertificateChainEngine.Native engine on Xamarin.iOS and Xamarin.Android).</param>
            <param name="certificateEngine">Certificate chain engine.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:c_ABH.c_C9H">
            <summary>
            Gets the signature entity if available. This can return this entity for signatures with inlined content.
            </summary>
            <value>Signature entity.</value>
        </member>
        <member name="M:c_ABH.c_F4B(System.String)">
            <summary>
            Loads the MIME entity from the specified file.
            </summary>
            <param name="fileName">The file from which to read the entity.</param>
        </member>
        <member name="M:c_ABH.c_F4B(System.IO.Stream)">
            <summary>
            Loads the MIME entity from the specified stream.
            </summary>
            <param name="input">The stream from which to read the entity.</param>
            <remarks>This method will close the stream when it is done.</remarks>
        </member>
        <member name="M:c_ABH.c_O4B(System.String)">
            <summary>
            Saves the MIME entity to the specified file.
            </summary>
            <param name="fileName">The file to which to save the entity.</param>
        </member>
        <member name="M:c_ABH.c_O4B(System.IO.Stream)">
            <summary>
            Saves the MIME entity to the specified stream.
            </summary>
            <param name="output">The stream to which to save the entity.</param>
        </member>
        <member name="M:c_ABH.c_KHH">
            <summary>
            Returns a read-only stream that can be used to read the raw MIME message content.
            Copying all the content into another stream is identical to <see cref="!:Save(Stream)"/> method.
            </summary>
            <returns>Read-only stream.</returns>
        </member>
        <member name="M:c_ABH.c_KHH(System.Boolean,System.Boolean)">
            <summary>
            Returns a read-only stream that can be used to read the raw MIME message content.
            Copying all the content into another stream is identical to <see cref="!:Save(Stream)"/> method.
            </summary>
            <returns>Read-only stream.</returns>
        </member>
        <member name="P:c_ABH.c_SXD">
            <summary>
            Gets or sets the <see cref="!:ICertificateFinder"/> to be used to find certificates
            used to encrypt or sign the entity.
            </summary>
            <value>The certificate finder.</value>
        </member>
        <member name="P:c_ABH.c_TXD">
            <summary>
            Gets or sets a value indicating whether Cryptographic Service Provider (CSP) operations
            are permitted to display any user interface.
            </summary>
            <value>A value indicating whether CSP can display UI.</value>
        </member>
        <member name="P:c_ABH.c_B3G">
            <summary>
            Gets the list of headers of this entity.
            </summary>
            <value>The list of headers.</value>
        </member>
        <member name="P:c_ABH.c_RNH">
            <summary>
            Gets the list of child parts of this entity.
            </summary>
            <value>The list of parts.</value>
        </member>
        <member name="P:c_ABH.c_P4D">
            <summary>
            Gets or sets the parent of this entity.
            </summary>
            <value>The parent of this entity, or null if this is a top-level entity.</value>
        </member>
        <member name="P:c_ABH.c_QNH">
            <summary>
            Gets or sets the preamble of this multipart entity.
            </summary>
            <value>Preamble of this multipart entity.</value>
            <remarks>
            <p>
            Preamble is only used for multipart entities.
            </p>
            <p>
            Preamble is a block of text preceding the first part of
            a multipart entity. It is usually used to store a short
            explanatory notice for non-MIME compliant user agents
            to display.
            </p>
            <p>
            Default value is "This is a multipart MIME message."
            </p>
            <p>
            The preamble is only used for multipart entities.
            </p>
            </remarks>
        </member>
        <member name="P:c_ABH.c_WNH">
            <summary>
            Gets or sets the epilogue of this multipart entity.
            </summary>
            <value>Epilogue of this multipart entity.</value>
            <remarks>
            <p>
            Epilogue is only used for multipart entities.
            </p>
            <p>
            Epilogue is a block of text following the last part of
            a multipart entity. It might be used to store a message
            that non-MIME compliant user agents will display.
            </p>
            <p>
            Default value is an empty string.
            </p>
            </remarks>
        </member>
        <member name="P:c_ABH.c_SP">
            <summary>
            Gets or sets various options for MIME parser and writer.
            </summary>
            <value>MIME parser and writer options.</value>
        </member>
        <member name="P:c_ABH.c_XNH">
            <summary>
            Gets or sets the default charset for MIME body and headers.
            </summary>
            <value>Default charset.</value>
            <remarks>
            Only set this if you want to specify your own charset instead of letting the build-in automatic charset detector do its work.
            </remarks>
        </member>
        <member name="E:c_ABH.c_ZNH">
            <summary>
            Occurs when an unparsable header is encountered while parsing a MIME message.
            </summary>
        </member>
        <member name="P:c_ABH.c_K3A">
            <summary>
            Gets or sets a value indicating whether the entity is read-only.
            </summary>
            <remarks>
            Only the content that is signed is read-only.
            </remarks>
            <value>True if read-only; false otherwise.</value>
        </member>
        <member name="P:c_ABH.c_UBH">
            <summary>
            Gets the inner message of a 'message/rfc822' entity.
            </summary>
            <value>A <see cref="!:MimeEntity"/>; or null if this entity is not 'message/rfc822'.</value>
            <remarks>
            To set the content of this entity, use one of <see cref="!:SetContent(string)"/>
            or <see cref="!:SetContentFromFile(string)"/> methods.
            </remarks>
        </member>
        <member name="P:c_ABH.c_N7G">
            <summary>
            Gets the content string of this entity.
            </summary>
            <value>The content string of this entity; or null if the content cannot be represented as string.</value>
            <remarks>
            <p>
            To set the content of this entity, use one of <see cref="!:SetContent(string)"/>
            or <see cref="!:SetContentFromFile(string)"/> methods.
            </p>
            </remarks>
        </member>
        <member name="P:c_ABH.c_YCH">
            <summary>
            Gets the charset (<see cref="T:System.Text.Encoding"/>) of the content of this entity.
            </summary>
            <value>
            The charset of the content; or null if it has no charset or unknown charset.
            </value>
        </member>
        <member name="P:c_ABH.c_UCH">
            <summary>
            Gets or sets the <see cref="T:ComponentPro.Net.Mail.TransferEncoding"/> of the content of this entity.
            </summary>
            <value>
            <see cref="T:ComponentPro.Net.Mail.TransferEncoding"/> of the content of this entity.
            </value>
        </member>
        <member name="P:c_ABH.c_BCH">
            <summary>
            Gets the <see cref="!:SignedData"/> object that contains information about signed content.
            This property is only set for entities with signed content.
            </summary>
            <value>A <see cref="!:SignedData"/> object.</value>
        </member>
        <member name="P:c_ABH.c_YOH">
            <summary>
            Gets the <see cref="!:EnvelopedData"/> object that contains information about enveloped (encrypted) content.
            This property is only set for entities with enveloped content.
            </summary>
            <value>A <see cref="!:EnvelopedData"/> object.</value>
        </member>
        <member name="P:c_ABH.c_ACH">
            <summary>
            Gets or sets the signature style of a signed entity container.
            This property is only intended for entities with signed content.
            </summary>
            <value>The signature style.</value>
        </member>
        <member name="P:c_ABH.c_HUB">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>An entity type.</value>
        </member>
        <member name="P:c_ABH.c_DOH">
            <summary>
            Determines whether the entity is a multipart entity.
            </summary>
            <value>True if the entity is a multipart entity; false otherwise.</value>
        </member>
        <member name="P:c_ABH.c_T9H">
            <summary>
            Determines whether the entity is a 'message/rfc822' container for a message.
            </summary>
            <value>True if the entity is 'message/rfc822'; false otherwise.</value>
        </member>
        <member name="P:c_ABH.c_QUA">
            <summary>
            Gets or sets the content type of this entity.
            </summary>
            <value>Content type.</value>
        </member>
        <member name="P:c_ABH.c_N0G">
            <summary>
            Gets or sets the content transfer encoding of this entity.
            </summary>
            <value>Content transfer encoding.</value>
        </member>
        <member name="P:c_ABH.c_VCH">
            <summary>
            Gets or sets the content disposition of this entity.
            </summary>
            <value>Content disposition.</value>
        </member>
        <member name="P:c_ABH.c_WCH">
            <summary>
            Gets or sets the content ID of this entity.
            </summary>
            <value>Content ID.</value>
        </member>
        <member name="P:c_ABH.c_SBH">
            <summary>
            Gets or sets the content description of this entity.
            </summary>
            <value>Content description.</value>
        </member>
        <member name="P:c_ABH.c_XCH">
            <summary>
            Gets or sets the content location of this entity.
            </summary>
            <value>Content location.</value>
        </member>
        <member name="P:c_ABH.c_DOB">
            <summary>
            Gets or sets the suggested file name of this entity, if it is present.
            </summary>
            <value>A suggested file name.</value>
        </member>
        <member name="M:c_N3H.#ctor(c_ABH)">
            <summary>
            Initializes a new instance of <see cref="!:MimeEntityCollection"/>.
            </summary>
            <param name="owner">The owner of this object. Must not be null.</param>
        </member>
        <member name="M:c_N3H.c_SEF(System.Int32,c_ABH)">
            <summary>
            Inserts a <see cref="!:MimeEntity"/> into the list at the specified index.
            </summary>
            <param name="index">A zero-based index at which the entity should be inserted.</param>
            <param name="entity">A entity to insert.</param>
        </member>
        <member name="M:c_N3H.c_QTA(c_ABH)">
            <summary>
            Adds a <see cref="!:MimeEntity"/> to the end of the list.
            </summary>
            <param name="entity">A entity to be added.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:c_N3H.c_TRD(System.Int32)">
            <summary>
            Removes the <see cref="!:MimeEntity"/> at the specified index from the list.
            </summary>
            <param name="index">A zero-based index of entity to remove.</param>
        </member>
        <member name="M:c_N3H.c_ABD(c_ABH)">
            <summary>
            Removes the specified <see cref="!:MimeEntity"/> from the list.
            </summary>
            <param name="entity">Entity to remove.</param>
        </member>
        <member name="M:c_N3H.c_XO">
            <summary>
            Removes all entities from the list.
            </summary>
        </member>
        <member name="M:c_N3H.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the <see cref="!:MimeEntityCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
        </member>
        <member name="M:c_N3H.System#Collections#Generic#IEnumerable{c_ABH}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="!:MimeEntityCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="P:c_N3H.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:MimeEntity"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="!:MimeEntity"/> to get or set.</param>
            <value><see cref="!:MimeEntity"/> of the specified index.</value>
        </member>
        <member name="P:c_N3H.c_EAB">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="!:MimeEntityCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="!:MimeEntityCollection"/>.</value>
        </member>
        <member name="P:c_N3H.c_TQA">
            <summary>
            Gets the number of entities contained in the <see cref="!:MimeEntityCollection"/>.
            </summary>
            <value>The number of entities contained in the <see cref="!:MimeEntityCollection"/>.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.MimeUnparsableHeaderEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.Mail.MailMessage.UnparsableHeader">UnparsableHeader</see> event of a <see cref="T:ComponentPro.Net.Mail.MailMessage"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.MimeUnparsableHeaderEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.Mail.MimeUnparsableHeaderSeverity">
            <summary>
            Specifies the header error severity.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MimeUnparsableHeaderSeverity.Warning">
            <summary>A less serious problem that does not cause an exception to be thrown by default.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MimeUnparsableHeaderSeverity.Error">
            <summary>A serious problem that causes an exception to be thrown by default.</summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MimeUnparsableHeaderStatus">
            <summary>
            Specifies the problem encountered by the header parser.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MimeUnparsableHeaderStatus.UnableToParse">
            <summary>
            Unable to parse the header.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MimeUnparsableHeaderStatus.UnknownCharset">
            <summary>
            Unknown charset in Content-type header.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MimeUnparsableHeaderEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Mail.MailMessage.UnparsableHeader"/> event.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.MimeUnparsableHeaderEventArgs.SetHeaderValue(ComponentPro.Net.Mail.IHeader)">
            <summary>
            Sets the header value to the specified object. Use this to override the default parser and provide your own value.
            </summary>
            <param name="value">Header value.</param>
            <remarks>This method also sets the <see cref="P:ComponentPro.Net.Mail.MimeUnparsableHeaderEventArgs.Ignore"/> property to true.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MimeUnparsableHeaderEventArgs.Name">
            <summary>
            Gets the header name.
            </summary>
            <value>The header name.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MimeUnparsableHeaderEventArgs.Raw">
            <summary>
            Gets the raw text representation of this header.
            </summary>
            <value>Raw header text.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MimeUnparsableHeaderEventArgs.Error">
            <summary>
            Gets the header parser error for this header.
            </summary>
            <value>Header parser error.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MimeUnparsableHeaderEventArgs.Ignore">
            <summary>
            Gets or sets the value indicating whether to ignore this error.
            </summary>
            <value>A value indicating whether to ignore this error.</value>
            <remarks>
            A default value is determined by the <see cref="F:ComponentPro.Net.Mail.MailMessageConfig.IgnoreUnparsableHeaders"/> flag of <see cref="P:ComponentPro.Net.Mail.MailMessage.Config"/> property.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MimeUnparsableHeaderEventArgs.Severity">
            <summary>
            Gets the severity of the header parser problem.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.MimeUnparsableHeaderEventArgs.Status">
            <summary>
            Gets the status of the header parser problem.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MimeExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.Mail.MimeException"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MimeExceptionStatus.UnspecifiedError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.Mail.MimeException.Status"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MimeExceptionStatus.MessageParserError">
            <summary>
            An error occurred inside the message parser.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MimeExceptionStatus.HeaderParserError">
            <summary>
            An error occurred inside the message header parser.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MimeExceptionStatus.OperationError">
            <summary>
            Unable to complete the requested operation.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MimeException">
            <summary>
            The exception that is thrown when a MIME-related error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.MimeException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MimeException"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.MimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MimeException"/> with the specified message.
            </summary>
            <param name="message">Message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MimeException"/> with the specified message and inner exception.
            </summary>
            <param name="message">Message that describes the error.</param>
            <param name="inner">The exception that was the cause of this exception.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.MimeException.Status">
            <summary>
            Gets the status of the response.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.Mail.MimeExceptionStatus"/> values.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MimeException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>A message that describes the current exception.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.Header">
            <summary>
            A single MIME header.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Header.ToString">
            <summary>
            Returns a string representation of this header.
            </summary>
            <returns>A string representation of the header.</returns>
            <remarks>The format of the result is "{name}: {value}".</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Header.#ctor(System.String,ComponentPro.Net.Mail.IHeader)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.Header"/> class.
            </summary>
            <param name="name">Header name.</param>
            <param name="value">Header value.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Header.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.Header"/> class.
            </summary>
            <param name="name">Header name.</param>
            <param name="value">Header value.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Header.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Header.Encode(System.IO.TextWriter)">
            <summary>
            Write the encoded value of the header into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
            <remarks>Encoded value include the name, the value and trailing end-of-line sequence (CRLF).</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Header.c_LAJ(System.String)">
            <summary>
            Converts the header name into canonical form.
            </summary>
            <param name="headerName">Header name.</param>
            <returns>Canonical form of the header name.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Header.DecodeMimeHeader(System.String)">
            <summary>
            Decodes a raw MIME-encoded header value using 'B' or 'Q' encoding.
            </summary>
            <param name="value">Raw header value.</param>
            <returns>Decoded header value.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.Header.Name">
            <summary>
            Gets the name of this header,
            </summary>
            <value>Header name.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Header.Value">
            <summary>
            Gets the value of this header,
            </summary>
            <value>Header value.</value>
            <remarks>This might be any of various classes
            that implement the <see cref="T:ComponentPro.Net.Mail.IHeader"/> interface.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Header.Unparsable">
            <summary>
            Gets a value indicating whether the header was unparsable.
            </summary>
            <value>True if unparsable; false if parsable.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Header.Raw">
            <summary>
            Gets the raw text representation of this header.
            </summary>
            <value>Raw header text.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.HeaderCollection">
            <summary>
            Represents the collection of <see cref="T:ComponentPro.Net.Mail.Header"/> objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.HeaderCollection"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:ComponentPro.Net.Mail.HeaderCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.System#Collections#Generic#IEnumerable{ComponentPro#Net#Mail#Header}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:ComponentPro.Net.Mail.HeaderCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.Insert(System.Int32,ComponentPro.Net.Mail.Header)">
            <summary>
            Inserts a <see cref="T:ComponentPro.Net.Mail.Header"/> into the list at the specified index.
            </summary>
            <param name="index">A zero-based index at which the header should be inserted.</param>
            <param name="header">A header to insert.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts a headerinto the list at the specified index.
            </summary>
            <param name="index">A zero-based index at which the header should be inserted.</param>
            <param name="headerName">Name of header to insert.</param>
            <param name="headerValue">Value of header to insert.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.Add(ComponentPro.Net.Mail.Header)">
            <summary>
            Adds a <see cref="T:ComponentPro.Net.Mail.Header"/> to the end of the list.
            </summary>
            <param name="header">A header to be added.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.Add(System.String,System.String)">
            <summary>
            Adds a new header to the end of the list.
            </summary>
            <param name="headerName">Name of header to be added.</param>
            <param name="headerValue">Value of header to be added.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.Remove(System.String)">
            <summary>
            Removes all <see cref="T:ComponentPro.Net.Mail.Header"/>s of the specified name from the list.
            </summary>
            <param name="name">Name of headers to remove.</param>
            <returns>The number headers removed.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:ComponentPro.Net.Mail.Header"/> at the specified index from the list.
            </summary>
            <param name="index">A zero-based index of header to remove.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.Clear">
            <summary>
            Removes all headers from the list.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.Remove(ComponentPro.Net.Mail.Header)">
            <summary>
            Removes the first occurance of specified <see cref="T:ComponentPro.Net.Mail.Header"/> from the list.
            </summary>
            <param name="header">Header to remove.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.GetRaw(System.String)">
            <summary>
            Gets the raw text representation of the specified header if available.
            </summary>
            <param name="headerName">The name of the header to get.</param>
            <value>Raw header text, or null if not available.</value>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.GetAllHeaders(System.String)">
            <summary>
            Gets all <see cref="T:ComponentPro.Net.Mail.Header"/> of the specified name.
            </summary>
            <param name="headerName">The name of the headers to get.</param>
            <value>Array of <see cref="T:ComponentPro.Net.Mail.Header"/> of the specified name.</value>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.GetAllHeaderValuesRaw(System.String)">
            <summary>
            Gets raw text representations of all headers of the specified name.
            </summary>
            <param name="headerName">The name of the headers to get.</param>
            <value>Array of raw text representations of all headers of the specified name.</value>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderCollection.c_C4H(System.String,ComponentPro.Net.Mail.IHeader)">
            <summary>
            Removes all headers of specified name
            and inserts a new header of that name at the position
            of the first of those headers (or at the end of header
            list if there were no headers of specified name).
            </summary>
            <param name="headerName">Name of header to be replaced.</param>
            <param name="headerValue">Header value to replace the current headers.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.HeaderCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ComponentPro.Net.Mail.HeaderCollection"/> collection.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:ComponentPro.Net.Mail.HeaderCollection"/> collection.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.HeaderCollection.Count">
            <summary>
            Gets the number of headers contained in the <see cref="T:ComponentPro.Net.Mail.HeaderCollection"/>.
            </summary>
            <value>The number of headers contained in the <see cref="T:ComponentPro.Net.Mail.HeaderCollection"/>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.HeaderCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.Mail.Header"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.Net.Mail.Header"/> to get.</param>
            <value><see cref="T:ComponentPro.Net.Mail.Header"/> of the specified index.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.HeaderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.Mail.Header"/> of the specified name.
            </summary>
            <param name="headerName">The name of the header to get.</param>
            <value><see cref="T:ComponentPro.Net.Mail.Header"/> of the specified name.</value>
            <remarks>
            <p>
            If no header of the specified name is found, the return value is null.
            </p>
            <p>
            If more than one headers are found, only the first is returned.
            </p>
            <p>
            When assinging value, the first header of specified name is changed
            and remaining headers of the same name are removed.
            </p>
            </remarks>
        </member>
        <member name="T:c_UWG">
            <summary>
            A MIME e-mail message.
            </summary>
            <remarks>
            Adds useful properties to <see cref="!:MimeEntity"/> class.
            </remarks>
        </member>
        <member name="M:c_UWG.#ctor">
            <summary>
            Initializes an instance of <see cref="!:MimeMessage"/>.
            </summary>
        </member>
        <member name="M:c_UWG.c_HH">
            <summary>
            Creates a copy of this message.
            </summary>
            <returns>A new message.</returns>
        </member>
        <member name="P:c_UWG.c_VNH">
            <summary>
            Gets or sets the envelope identifier to be transmitted along with the message
            and included in any DSNs issued.
            </summary>
            <value>The envelope identifier.</value>
            <remarks>
            <p>
            The purpose of the envelope identifier is to allow the sender of a message
            to identify the transaction for which the DSN was issued.
            </p>
            <p>
            Please note that the envelope ID is not a part of a mail message and is not saved with it.
            Its purpose is to be used while sending the message.
            </p>
            <p>
            Envelope ID must be an ASCII string up to 100 characters in length.
            Characters &lt;33 and character '+', '=' and character 127 are represented as three characters.
            </p>
            </remarks>
        </member>
        <member name="P:c_UWG.c_ZPH">
            <summary>
            Gets or sets the priority of the message.
            </summary>
            <value>Message priority.</value>
        </member>
        <member name="P:c_UWG.c_V0G">
            <summary>
            Gets or sets the origination date of this message.
            </summary>
            <value>The origination date.</value>
            <remarks>
            The origination date specifies the date and time at which the creator
            of the message indicated that the message was complete and ready to enter
            the mail delivery system.
            </remarks>
        </member>
        <member name="P:c_UWG.c_VWF">
            <summary>
            Gets or sets the list of authors of this message.
            </summary>
            <value>The list of authors.</value>
            <remarks>
            <p>
            This property specifies the the list of authors
            of the message.
            </p>
            <p>
            If this field contains multiple authors, the '<see cref="!:Sender"/>'
            field must be set to specify the agent responsible for the transmission
            of the message
            </p>
            <p>
            If this field contains a single author that is also the sender
            of the message, the '<see cref="!:Sender"/>' field should not be set.
            </p>
            </remarks>
        </member>
        <member name="P:c_UWG.c_CR">
            <summary>
            Gets or sets the sender of this message.
            </summary>
            <value>The sender of this message.</value>
            <remarks>
            <p>
            This property specifies the agent responsible for the transmission
            of the message. Use <see cref="!:From"/> to specify the list of authors
            of the message.
            </p>
            <p>
            This field must be set if the '<see cref="!:From"/>' field contains multiple
            authors.
            </p>
            <p>
            This field should not be set if the '<see cref="!:From"/> field contains
            a single author that is also the sender of the message.
            </p>
            </remarks>
        </member>
        <member name="P:c_UWG.c_X7G">
            <summary>
            Gets or sets the list of addresses that should receive replies
            to this message.
            </summary>
            <value>The list of addresses that should receive replies.</value>
        </member>
        <member name="P:c_UWG.c_XWF">
            <summary>
            Gets or sets the list of addresses of primary recipients of the message.
            </summary>
            <value>The list of primary recipients.</value>
        </member>
        <member name="P:c_UWG.c_Y7G">
            <summary>
            Gets or sets the list of addresses of others who are to receive the message.
            </summary>
            <value>The list of other recipients.</value>
        </member>
        <member name="P:c_UWG.c_Z7G">
            <summary>
            Gets or sets the list of addresses of recipients that are not to be revealed to other recipients of the message.
            </summary>
            <value>The list of recipients.</value>
        </member>
        <member name="P:c_UWG.c_W0G">
            <summary>
            Gets or sets the unique identifier of the message.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:c_UWG.c_A8G">
            <summary>
            Gets or sets the list of identifiers of messages to which the message is a reply.
            </summary>
            <value>The list of message identifiers.</value>
        </member>
        <member name="P:c_UWG.c_JDJ">
            <summary>
            Gets or sets the list of identifiers of messages in the same &quot;thread&quot; of conversation.
            </summary>
            <value>The list of message identifiers.</value>
        </member>
        <member name="P:c_UWG.c_FTD">
            <summary>
            Gets or sets the subject of the message.
            </summary>
            <value>The subject.</value>
            <remarks>
            This property contains a short string identifying the topic
            of the message.
            </remarks>
        </member>
        <member name="P:c_UWG.c_KDJ">
            <summary>
            Gets or sets the comments on the message.
            </summary>
            <value>Comments.</value>
            <remarks>
            This property contains additional comments on the contents
            of the message.
            </remarks>
        </member>
        <member name="P:c_UWG.c_MDJ">
            <summary>
            Gets or sets the list of keywords.
            </summary>
            <value>The list of keywords.</value>
            <remarks>
            This is a list of important words and phrases that might be useful
            for the recipient of the message.
            </remarks>
        </member>
        <member name="P:c_UWG.c_LDJ">
            <summary>
            Gets or sets the list of mailboxes that should be notified
            of message disposition by the receiving user agent.
            </summary>
            <value>The list of mailboxes.</value>
        </member>
        <member name="P:c_UWG.c_NDJ">
            <summary>
            Gets or sets the list of URLs of the 'List-Archive' header.
            </summary>
            <value>The list of URLs.</value>
        </member>
        <member name="P:c_UWG.c_ODJ">
            <summary>
            Gets or sets the list of URLs of the 'List-Help' header.
            </summary>
            <value>The list of URLs.</value>
        </member>
        <member name="P:c_UWG.c_PDJ">
            <summary>
            Gets or sets the list of URLs of the 'List-Owner' header.
            </summary>
            <value>The list of URLs.</value>
        </member>
        <member name="P:c_UWG.c_QDJ">
            <summary>
            Gets or sets the list of URLs of the 'List-Subscribe' header.
            </summary>
            <value>The list of URLs.</value>
        </member>
        <member name="P:c_UWG.c_RDJ">
            <summary>
            Gets or sets the list of URLs of the 'List-Post' header.
            </summary>
            <value>The list of URLs.</value>
        </member>
        <member name="P:c_UWG.c_SDJ">
            <summary>
            Gets or sets the list of URLs of the 'List-Unsubscribe' header.
            </summary>
            <value>The list of URLs.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.HeaderValueCollection">
            <summary>
            Represents the collection of header values.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.IHeader">
            <summary>
            Common interface of all message header values.
            </summary>
            <remarks>
            Provides a method to write an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.IHeader.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.IHeader.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="P:c_TAJ.c_HNA">
            <summary>
            Returns a version number of the header. When a header is modified, this value should increment.
            </summary>
        </member>
        <member name="P:c_TAJ.c_K3A">
            <summary>
            Gets or sets a value indicating whether the header is read-only.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderValueCollection.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderValueCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the list.
            </summary>
            <param name="index">A zero-based index of an item to remove.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderValueCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds a range of items contained in the specified collection.
            </summary>
            <param name="collection">Collection of items to be added.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderValueCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderValueCollection.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderValueCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Net.Mail.HeaderValueCollection"/> to a compatible one-dimensional
            <see cref="T:System.Array"/>, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Net.Mail.HeaderValueCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderValueCollection.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.HeaderValueCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <value>The number of items is the collection.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.HeaderValueCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to <see cref="T:ComponentPro.Net.Mail.HeaderValueCollection"/> is synchronized (thread-safe).
            </summary>
            <value>A value indicating whether access to <see cref="T:ComponentPro.Net.Mail.HeaderValueCollection"/> is synchronized.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.HeaderValueCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to <see cref="T:ComponentPro.Net.Mail.HeaderValueCollection"/> object.
            </summary>
            <value>an object that can be used to synchronize access to <see cref="T:ComponentPro.Net.Mail.HeaderValueCollection"/> object.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailMessageConfig">
            <summary>
            Defnies options for mail message.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailMessageConfig.IgnoreUnparsableHeaders">
            <summary>
            Ignore unparsable headers when parsing mail message.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailMessageConfig.IgnoreUnparsableSignatures">
            <summary>
            Ignore unparsable S/MIME signature entities when parsing mail message.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.TransferEncoding">
            <summary>
            Type of transfer encoding of the content.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.TransferEncoding.Unknown">
            <summary>
            Unknown content encoding.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.TransferEncoding.QuotedPrintable">
            <summary>
            Quoted-Printable encoding.
            </summary>
            <remarks>
            The Quoted-Printable encoding is intended to represent data that
            largely consists of octets that correspond to printable characters
            in the US-ASCII character set.
            </remarks>
        </member>
        <member name="F:ComponentPro.Net.Mail.TransferEncoding.Base64">
            <summary>
            Base64 encoding.
            </summary>
            <remarks>
            The Base64 encoding is designed to represent arbitrary
            sequences of octets in a form that is not humanly readable.
            </remarks>
        </member>
        <member name="F:ComponentPro.Net.Mail.TransferEncoding.SevenBit">
            <summary>
            No encoding, content data is 7bit.
            </summary>
            <remarks>
            <p>
            7bit data refers to data that is all represented as relatively
            short lines with 998 octets or less between CRLF line separation
            sequences. No octets with decimal values greater than 127 are allowed
            and neither are NULs (octets with decimal value 0).
            CR (decimal value 13) and LF (decimal value 10) octets only occur
            as part of CRLF line separation sequences.
            </p>
            </remarks>
        </member>
        <member name="F:ComponentPro.Net.Mail.TransferEncoding.EightBit">
            <summary>
            No encoding, content data is 8bit.
            </summary>
            <remarks>
            8bit data refers to data that is all represented as relatively
            short lines with 998 octets or less between CRLF line separation
            sequences. Octets with decimal values greater than 127 may be used.
            CR (decimal value 13) and LF (decimal value 10) octets only occur
            as part of CRLF line separation sequences.
            </remarks>
        </member>
        <member name="F:ComponentPro.Net.Mail.TransferEncoding.Binary">
            <summary>
            No encoding, content data is binary.
            </summary>
            <remarks>
            Binary data refers to data where any sequence of octets is allowed.
            </remarks>
        </member>
        <member name="F:c_LLH.c_FFH">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:c_LLH.c_GFH">
            <summary>
            Normal priority.
            </summary>
        </member>
        <member name="F:c_LLH.c_HFH">
            <summary>
            High priority.
            </summary>
        </member>
        <member name="T:c_MEJ">
            <summary>
            LineReceiver is an abstract write-only stream that breaks all incoming data into
            lines of a given maximum length delimited by CRLF sequences.
            When a complete line is processed, the <see cref="!:ProcessLine"/> virtual method is called
            and the line is passed as a parameter. Classes that need this functionality should inherit
            from <see cref="!:LineReceiver"/> and override the <see cref="!:ProcessLine"/> method.
            </summary>
        </member>
        <member name="M:c_MEJ.c_FFJ(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            A method that is called for each received line.
            </summary>
            <param name="buffer">A buffer that contains the received line.</param>
            <param name="offset">An offset indicating the start of the received line in the buffer.</param>
            <param name="count">Number of bytes in line, starting at offset.</param>
            <param name="terminated">True if a complete CRLF-terminated line was received; false if no CRLF was found.</param>
        </member>
        <member name="M:c_MEJ.#ctor(System.Int32)">
            <summary>
            Creates a new instance of LineReceiver class.
            </summary>
            <param name="maxLineLength">Maximum line length, allowed range is 74 to 256K.</param>
        </member>
        <member name="M:c_MEJ.#ctor">
            <summary>
            Creates a new instance of LineReceiver class with a maximum line length of 65536.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.ContentDisposition">
            <summary>
            Represents the content disposition of a MIME entity.
            </summary>
            <remarks>
            Represents the <c>Content-Disposition</c> MIME header defined by RFC 2183.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.ContentDisposition.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.ContentDisposition"/> header value
            with the specified disposition type.
            </summary>
            <param name="dispositionType">A dispositin type.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ContentDisposition.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ContentDisposition.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ContentDisposition.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ContentDisposition.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:ComponentPro.Net.Mail.ContentDisposition"/>.
            </returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ContentDisposition.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:ComponentPro.Net.Mail.ContentDisposition"/> is equal to the current <see cref="T:ComponentPro.Net.Mail.ContentDisposition"/>.
            </summary>
            <param name="obj">The <see cref="T:ComponentPro.Net.Mail.ContentDisposition"/> to compare with the current <see cref="T:ComponentPro.Net.Mail.ContentDisposition"/>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ComponentPro.Net.Mail.ContentDisposition"/> is equal to the
            current <see cref="T:ComponentPro.Net.Mail.ContentDisposition"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.ContentDisposition.Disposition">
            <summary>
            Gets the disposition.
            </summary>
            <value>A disposition.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ContentDisposition.Inline">
            <summary>
            Determines whether the content disposition is inline.
            </summary>
            <value>True if inline; false if attachment.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ContentDisposition.Parameters">
            <summary>
            Gets the list of parameters of this content disposition.
            </summary>
            <value>The list of parameters.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ContentDisposition.FileName">
            <summary>
            Return the file name of the attachment. Returns null if no filename is set.
            </summary>
            <value>A file name.</value>
        </member>
        <member name="M:c_JCH.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="!:ContentLocation"/> header value
            with the specified location (typically an URL).
            </summary>
            <param name="location">Location. Typically an URL.</param>
        </member>
        <member name="M:c_JCH.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:c_JCH.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:c_JCH.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:c_JCH.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="!:ContentLocation"/>.
            </returns>
        </member>
        <member name="M:c_JCH.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="!:ContentLocation"/> is equal to the current <see cref="!:ContentLocation"/>.
            </summary>
            <param name="obj">The <see cref="!:ContentLocation"/> to compare with the current <see cref="!:ContentLocation"/>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="!:ContentLocation"/> is equal to the
            current <see cref="!:ContentLocation"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:c_JCH.c_TFD">
            <summary>
            Gets the location value, typically an URL.
            </summary>
            <value>
            Location value, typically an URL.
            </value>
        </member>
        <member name="M:c_W6G.#ctor(ComponentPro.Net.Mail.TransferEncoding)">
            <summary>
            Initializes a new instance of <see cref="!:ContentTransferEncoding"/> header value
            with the specified transfer encoding.
            </summary>
            <param name="transferEncoding">Transfer encoding.</param>
        </member>
        <member name="M:c_W6G.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="!:ContentTransferEncoding"/>.
            </returns>
        </member>
        <member name="M:c_W6G.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="!:ContentTransferEncoding"/> is equal to the current <see cref="!:ContentTransferEncoding"/>.
            </summary>
            <param name="obj">The <see cref="!:ContentTransferEncoding"/> to compare with the current <see cref="!:ContentTransferEncoding"/>.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="!:ContentTransferEncoding"/> is equal to the
            current <see cref="!:ContentTransferEncoding"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:c_W6G.c_QWG(System.IO.Stream)">
            <summary>
            Creates a decoding stream for the transfer encoding.
            </summary>
            <param name="output">Stream that will receive decoded data.</param>
            <returns>Stream to write encoded data to.</returns>
        </member>
        <member name="T:ComponentPro.Net.Mail.ContentType">
            <summary>
            Represents the content type of a MIME entity.
            </summary>
            <remarks>
            Represents the <c>Content-Type</c> MIME header defined by RFC 2045.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.ContentType.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.ContentType"/> header value
            with the specified media type.
            </summary>
            <param name="mediaType">Value of the unstructured header.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ContentType.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ContentType.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ContentType.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.ContentType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:ComponentPro.Net.Mail.ContentType"/>.
            </returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.ContentType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:ComponentPro.Net.Mail.ContentType"/> is equal to the current <see cref="T:ComponentPro.Net.Mail.ContentType"/>.
            </summary>
            <param name="obj">The <see cref="T:ComponentPro.Net.Mail.ContentType"/> to compare with the current <see cref="T:ComponentPro.Net.Mail.ContentType"/>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:ComponentPro.Net.Mail.ContentType"/> is equal to the
            current <see cref="T:ComponentPro.Net.Mail.ContentType"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.ContentType.MediaType">
            <summary>
            Gets the internet media type in the format of 'type/subtype'.
            </summary>
            <value>
            An internet media type.
            </value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ContentType.c_AVA">
            <summary>
            Gets the 'type' part of this content type, eg. 'text' for 'text/plain'.
            </summary>
            <value>
            The 'type' part of internet media type.
            </value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ContentType.c_F0G">
            <summary>
            Gets the 'subtype' part of this content type, eg. 'plain' for 'text/plain'.
            </summary>
            <value>
            The 'subtype' part of internet media type.
            </value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ContentType.Parameters">
            <summary>
            Gets the list of parameters of this content type.
            </summary>
            <value>The list of parameters.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ContentType.Boundary">
            <summary>
            Gets or sets the 'boundary' parameter of this content type.
            </summary>
            <value>The 'boundary' parameter.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ContentType.CharSet">
            <summary>
            Gets or sets the 'charset' parameter of this content type.
            </summary>
            <value>The 'charset' parameter.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ContentType.Encoding">
            <summary>
            Gets the 'charset' of this content type to <see cref="P:ComponentPro.Net.Mail.ContentType.Encoding"/>.
            </summary>
            <returns>The encoding, or null if no charset or unknown charset is set.</returns>
        </member>
        <member name="M:c_QCJ.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of <see cref="!:ListCommandUrl"/> header value
            with the specified URL.
            </summary>
            <param name="url">URL.</param>
        </member>
        <member name="M:c_QCJ.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="!:ListCommandUrl"/> header value
            with the specified URL.
            </summary>
            <param name="url">URL.</param>
        </member>
        <member name="M:c_QCJ.op_Implicit(System.Uri)~c_QCJ">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="!:ListCommandUrl"/>.
            </summary>
            <param name="url">A single URL.</param>
            <returns>A <see cref="!:ListCommandUrl"/>.</returns>
        </member>
        <member name="M:c_QCJ.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:c_QCJ.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:c_QCJ.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="P:c_QCJ.c_NND">
            <summary>
            Gets the URL of this header value.
            </summary>
            <value>An URL.</value>
        </member>
        <member name="M:c_PAJ.#ctor">
            <summary>
            Initializes a new instance of <see cref="!:ListCommandUrlCollection"/>.
            </summary>
        </member>
        <member name="M:c_PAJ.op_Implicit(c_QCJ)~c_PAJ">
            <summary>
            Converts a <see cref="!:ListCommandUrl"/> to a <see cref="!:ListCommandUrlCollection"/>.
            </summary>
            <param name="url">A single <see cref="!:ListCommandUrl"/>.</param>
            <returns>A <see cref="!:ListCommandUrlCollection"/>.</returns>
        </member>
        <member name="M:c_PAJ.op_Implicit(System.String)~c_PAJ">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="!:ListCommandUrlCollection"/>.
            </summary>
            <param name="urls">A list of URLs.</param>
            <returns>A <see cref="!:ListCommandUrlCollection"/>.</returns>
        </member>
        <member name="M:c_PAJ.c_QTA(c_QCJ)">
            <summary>
            Adds a <see cref="!:ListCommandUrl"/> to the end of the list.
            </summary>
            <param name="url">A <see cref="!:ListCommandUrl"/> to be added.</param>
            <returns>The index at which the URL has been added.</returns>
        </member>
        <member name="M:c_PAJ.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:c_PAJ.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:c_PAJ.c_ZJ(c_QCJ[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="!:ListCommandUrlCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="!:ListCommandUrlCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:c_PAJ.System#Collections#Generic#IEnumerable{c_QCJ}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="!:ListCommandUrlCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="P:c_PAJ.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:ListCommandUrl"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="!:ListCommandUrl"/> to get or set.</param>
            <value>An URL.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailAddress">
            <summary>
            Represents a mailbox that consists of address and a display name.
            </summary>
            <remarks>
            Represents the <c>mailbox</c> structured header defined by RFC 2822.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MailAddress"/> header value
            with the specified mail address.
            </summary>
            <param name="address">Mail address and (optionally) display name. Typically 'name.surname@company.net' or 'Name Surname &lt;name.surname@company.net&gt;' or '"Name Surname" &lt;name.surname@company.net&gt;'.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddress.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MailAddress"/> header value
            with the specified mail address and display name.
            </summary>
            <param name="address">Mail address.</param>
            <param name="displayName">Display name.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddress.op_Implicit(System.String)~ComponentPro.Net.Mail.MailAddress">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="T:ComponentPro.Net.Mail.MailAddress"/>.
            </summary>
            <param name="address">A single address and possibly a display name.</param>
            <returns>A <see cref="T:ComponentPro.Net.Mail.MailAddress"/>.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddress.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddress.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddress.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailAddress.DisplayName">
            <summary>
            Gets the display name of this mailbox.
            </summary>
            <value>
            A display name.
            </value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailAddress.Address">
            <summary>
            Gets the mail address of this mailbox.
            </summary>
            <value>The mail address.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailAddress.User">
            <summary>
            Gets the local part of this mailbox.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailAddress.Host">
            <summary>
            Gets the domain of this mailbox.
            </summary>
            <value>The hostname.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailAddressCollection">
            <summary>
            Represents the collection of <see cref="T:ComponentPro.Net.Mail.MailAddress"/> objects.
            </summary>
            <remarks>
            Represents the <c>mailbox-list</c> structured header defined by RFC 2822.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddressCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MailAddressCollection"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddressCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MailAddressCollection"/> filled with the specified list of mailboxes.
            </summary>
            <param name="addresses">List of addresses to parse.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddressCollection.op_Implicit(ComponentPro.Net.Mail.MailAddress)~ComponentPro.Net.Mail.MailAddressCollection">
            <summary>
            Converts a <see cref="T:ComponentPro.Net.Mail.MailAddress"/> to a <see cref="T:ComponentPro.Net.Mail.MailAddressCollection"/>.
            </summary>
            <param name="mailbox">A single <see cref="T:ComponentPro.Net.Mail.MailAddress"/>.</param>
            <returns>A <see cref="T:ComponentPro.Net.Mail.MailAddressCollection"/>.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddressCollection.op_Implicit(System.String)~ComponentPro.Net.Mail.MailAddressCollection">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="T:ComponentPro.Net.Mail.MailAddressCollection"/>.
            </summary>
            <param name="addresses">A list of mailboxes.</param>
            <returns>A <see cref="T:ComponentPro.Net.Mail.MailAddressCollection"/>.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddressCollection.Add(System.String)">
            <summary>
            Adds an address to the end of the list.
            </summary>
            <param name="address">An address to be added.</param>
            <returns>The index at which the address has been added.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddressCollection.Add(ComponentPro.Net.Mail.MailAddress)">
            <summary>
            Adds a <see cref="T:ComponentPro.Net.Mail.MailAddress"/> to the end of the list.
            </summary>
            <param name="address">A <see cref="T:ComponentPro.Net.Mail.MailAddress"/> to be added.</param>
            <returns>The index at which the address has been added.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddressCollection.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddressCollection.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddressCollection.CopyTo(ComponentPro.Net.Mail.MailAddress[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Net.Mail.MailAddressCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Net.Mail.MailAddressCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailAddressCollection.System#Collections#Generic#IEnumerable{ComponentPro#Net#Mail#MailAddress}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:ComponentPro.Net.Mail.MailAddressCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailAddressCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ComponentPro.Net.Mail.MailAddress"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.Net.Mail.MailAddress"/> to get or set.</param>
            <value>A mailbox.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailDateTime">
            <summary>
            Represents the date/time and the time zone.
            </summary>
            <remarks>
            Represents the <c>date-time</c> structured header defined by RFC 2822.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MailDateTime"/> header value
            with the specified local <see cref="T:System.DateTime"/>.
            </summary>
            <param name="localTime">A local time.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.op_Implicit(System.DateTime)~ComponentPro.Net.Mail.MailDateTime">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to a <see cref="T:ComponentPro.Net.Mail.MailDateTime"/>.
            </summary>
            <param name="localTime">A date and time.</param>
            <returns>A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/>.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MailDateTime"/> header value
            with the specified universal <see cref="T:System.DateTime"/> and a <see cref="P:ComponentPro.Net.Mail.MailDateTime.TimeZone"/>.
            </summary>
            <param name="universalTime">A universal (UTC) time.</param>
            <param name="timeZone">A time zone.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.CompareTo(ComponentPro.Net.Mail.MailDateTime)">
            <summary>
            Compares the value of this instance to a specified object that contains a
            specified <see cref="T:ComponentPro.Net.Mail.MailDateTime"/> value, and returns an integer that indicates whether
            this instance is earlier than, the same as, or later than the specified <see cref="T:ComponentPro.Net.Mail.MailDateTime"/>
            value.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.op_Inequality(ComponentPro.Net.Mail.MailDateTime,ComponentPro.Net.Mail.MailDateTime)">
            <summary>
            Determines whether two specified instances of <see cref="T:ComponentPro.Net.Mail.MailDateTime"/> are not equal.
            </summary>
            <param name="d1">A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/></param>
            <param name="d2">A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/></param>
            <returns>true if d1 and d2 do not represent the same date and time; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.op_LessThan(ComponentPro.Net.Mail.MailDateTime,ComponentPro.Net.Mail.MailDateTime)">
            <summary>
            Determines whether one specified System.DateTime is less than another specified <see cref="T:ComponentPro.Net.Mail.MailDateTime"/>.
            </summary>
            <param name="d1">A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/></param>
            <param name="d2">A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/></param>
            <returns>true if t1 is less than t2; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.op_LessThanOrEqual(ComponentPro.Net.Mail.MailDateTime,ComponentPro.Net.Mail.MailDateTime)">
            <summary>
            Determines whether one specified <see cref="T:ComponentPro.Net.Mail.MailDateTime"/> is less than another specified <see cref="T:ComponentPro.Net.Mail.MailDateTime"/>.
            </summary>
            <param name="d1">A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/></param>
            <param name="d2">A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/></param>
            <returns>true if t1 is less than or equal to t2; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.op_Equality(ComponentPro.Net.Mail.MailDateTime,ComponentPro.Net.Mail.MailDateTime)">
            <summary>
            Determines whether one specified <see cref="T:ComponentPro.Net.Mail.MailDateTime"/> is less than another specified <see cref="T:ComponentPro.Net.Mail.MailDateTime"/>.
            </summary>
            <param name="d1">A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/></param>
            <param name="d2">A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/></param>
            <returns>true if d1 and d2 represent the same date and time; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.op_GreaterThan(ComponentPro.Net.Mail.MailDateTime,ComponentPro.Net.Mail.MailDateTime)">
            <summary>
            Determines whether one specified <see cref="T:ComponentPro.Net.Mail.MailDateTime"/> is greater than another specified <see cref="T:ComponentPro.Net.Mail.MailDateTime"/>.
            </summary>
            <param name="d1">A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/></param>
            <param name="d2">A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/></param>
            <returns>true if t1 is greater than t2; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MailDateTime.op_GreaterThanOrEqual(ComponentPro.Net.Mail.MailDateTime,ComponentPro.Net.Mail.MailDateTime)">
            <summary>
            Determines whether one specified <see cref="T:ComponentPro.Net.Mail.MailDateTime"/> is greater than or equal to another specified <see cref="T:ComponentPro.Net.Mail.MailDateTime"/>.
            </summary>
            <param name="d1">A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/></param>
            <param name="d2">A <see cref="T:ComponentPro.Net.Mail.MailDateTime"/></param>
            <returns>true if t1 is greater than or equal to t2; otherwise, false.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailDateTime.LocalTime">
            <summary>
            Gets the local date/time.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/>.
            </value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailDateTime.UniversalTime">
            <summary>
            Gets the universal date/time.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/>.
            </value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailDateTime.OriginalTime">
            <summary>
            Gets the original date/time (local to <see cref="P:ComponentPro.Net.Mail.MailDateTime.TimeZone"/>).
            </summary>
            <value>
            A <see cref="T:System.DateTime"/>.
            </value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailDateTime.TimeZone">
            <summary>
            Gets the time zone.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailDateTime.Parsed">
            <summary>
            Gets the boolean value indicating whether the mail date time has been parsed correctly.
            </summary>
            <remarks>If the return value is false, the <see cref="P:ComponentPro.Net.Mail.MailDateTime.DateTimeString"/> is used to represent the mail date time.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailDateTime.DateTimeString">
            <summary>
            Gets the date time in string.
            </summary>
            <value>The date time in string if the <see cref="P:ComponentPro.Net.Mail.MailDateTime.Parsed"/> property is false; otherwise is a null reference.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.MessageIdentifier">
            <summary>
            Represents the message identifier.
            </summary>
            <remarks>
            Represents the <c>msg-id</c> structured header defined by RFC 2822.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MessageIdentifier"/> header value
            with the specified message identifier.
            </summary>
            <param name="messageId">Message identifier.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifier.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MessageIdentifier"/> header value
            and generates a new message identifier.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifier.op_Implicit(System.String)~ComponentPro.Net.Mail.MessageIdentifier">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="T:ComponentPro.Net.Mail.MessageIdentifier"/>.
            </summary>
            <param name="messageId">A single message ID.</param>
            <returns>A <see cref="T:ComponentPro.Net.Mail.MessageIdentifier"/>.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifier.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifier.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifier.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.MessageIdentifier.Id">
            <summary>
            Gets the message identifier.
            </summary>
            <value>Message identifier.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.MessageIdentifierCollection">
            <summary>
            Represents the collection of <see cref="T:ComponentPro.Net.Mail.MessageIdentifier"/> objects.
            </summary>
            <remarks>
            Represents the list of <c>msg-id</c>s defined by RFC 2822.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifierCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.MessageIdentifierCollection"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifierCollection.op_Implicit(ComponentPro.Net.Mail.MessageIdentifier)~ComponentPro.Net.Mail.MessageIdentifierCollection">
            <summary>
            Converts a <see cref="T:ComponentPro.Net.Mail.MessageIdentifier"/> to a <see cref="T:ComponentPro.Net.Mail.MessageIdentifierCollection"/>.
            </summary>
            <param name="messageId">A single <see cref="T:ComponentPro.Net.Mail.MessageIdentifier"/>.</param>
            <returns>A <see cref="T:ComponentPro.Net.Mail.MessageIdentifierCollection"/>.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifierCollection.op_Implicit(System.String)~ComponentPro.Net.Mail.MessageIdentifierCollection">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="T:ComponentPro.Net.Mail.MessageIdentifierCollection"/>.
            </summary>
            <param name="messageIDs">A list of message IDs.</param>
            <returns>A <see cref="T:ComponentPro.Net.Mail.MessageIdentifierCollection"/>.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifierCollection.Add(ComponentPro.Net.Mail.MessageIdentifier)">
            <summary>
            Adds a <see cref="T:ComponentPro.Net.Mail.MessageIdentifier"/> to the end of the list.
            </summary>
            <param name="messageId">A <see cref="T:ComponentPro.Net.Mail.MessageIdentifier"/> to be added.</param>
            <returns>The index at which the message identificator has been added.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifierCollection.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifierCollection.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifierCollection.CopyTo(ComponentPro.Net.Mail.MessageIdentifier[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Net.Mail.MessageIdentifierCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Net.Mail.MessageIdentifierCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.MessageIdentifierCollection.System#Collections#Generic#IEnumerable{ComponentPro#Net#Mail#MessageIdentifier}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:ComponentPro.Net.Mail.MessageIdentifierCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.MessageIdentifierCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ComponentPro.Net.Mail.MessageIdentifier"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.Net.Mail.MessageIdentifier"/> to get or set.</param>
            <value>A message identifier.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.HeaderParameters">
            <summary>
            Represents the collection of MIME header parameters.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderParameters.Add(System.String,System.String)">
            <summary>
            Adds a new parameter to the collection.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderParameters.Remove(System.String)">
            <summary>
            Removes the parameter of the specified name from the collection.
            </summary>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderParameters.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.HeaderParameters.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.HeaderParameters.Count">
            <summary>
            Gets the number of parameters in the collection.
            </summary>
            <value>The number of parameters is the collection.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.HeaderParameters.Item(System.String)">
            <summary>
            Gets or sets the value of parameter at the specified index.
            </summary>
            <param name="name">The name of parameter whose value to get or set.</param>
            <value>An parameter value.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.HeaderParameters.Names">
            <summary>
            Gets a collection containing the names of all parameters.
            </summary>
        </member>
        <member name="M:c_B4H.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of MIME version header value.
            </summary>
            <param name="major">Major version number.</param>
            <param name="minor">Minor version number.</param>
        </member>
        <member name="M:c_B4H.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:c_B4H.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:c_B4H.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="P:c_B4H.c_ALJ">
            <summary>
            Gets the major version number.
            </summary>
            <value>A major version number.</value>
        </member>
        <member name="P:c_B4H.c_BLJ">
            <summary>
            Gets the minor version number.
            </summary>
            <value>A minor version number.</value>
        </member>
        <member name="M:c_PCJ.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:c_PCJ.#ctor">
            <summary>
            Constructs an empty phrase.
            </summary>
        </member>
        <member name="M:c_PCJ.c_QTA(c_RFJ,System.Boolean)">
            <summary>
            Appends a word to this phrase.
            </summary>
            <param name="word">
            The <c>word</c> to append.
            This parameter must not be null.
            </param>
            <param name="withSpace">
            True if space is to be inserted before the word.
            </param>
        </member>
        <member name="M:c_PCJ.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:c_PCJ.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:c_OAJ.op_Implicit(System.String)~c_OAJ">
            <summary>
            Converts a phrase to a <see cref="!:PhraseCollection"/>.
            </summary>
            <param name="phrase">A single phrase.</param>
            <returns>A <see cref="!:PhraseCollection"/>.</returns>
        </member>
        <member name="M:c_OAJ.c_QTA(System.String)">
            <summary>
            Adds a phrase to the end of the list.
            </summary>
            <param name="phrase">A phrase to be added.</param>
            <returns>The index at which the phrase has been added.</returns>
        </member>
        <member name="M:c_OAJ.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:c_OAJ.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:c_OAJ.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
        </member>
        <member name="M:c_OAJ.System#Collections#Generic#IEnumerable{System#String}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="!:PhraseCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:c_OAJ.AddRange(System.Collections.ICollection)">
            <summary>
            Adds a range of items contained in the specified collection.
            </summary>
            <param name="c">Collection of items to be added.</param>
        </member>
        <member name="M:c_OAJ.c_ZJ(System.String[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="!:PhraseCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="!:PhraseCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:c_OAJ.Item(System.Int32)">
            <summary>
            Gets or sets the phrase at the specified index.
            </summary>
            <param name="index">The zero-based index of the phrase to get or set.</param>
            <value>A phrase.</value>
        </member>
        <member name="M:c_QAJ.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="!:Received"/> header value.
            </summary>
            <param name="data">Value of the received header. Should follow conventions defined by RFC 2822.</param>
        </member>
        <member name="M:c_QAJ.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:c_QAJ.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:c_QAJ.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:c_RAJ.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:c_RAJ.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="P:c_RAJ.c_QLJ">
            <summary>
            Gets the domain of this mailbox.
            </summary>
            <value>The hostname.</value>
        </member>
        <member name="M:c_YAJ.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:c_YAJ.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:c_YAJ.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="M:c_JMH.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="!:Unstructured"/> header value.
            </summary>
            <param name="value">Value of the unstructured header.</param>
        </member>
        <member name="M:c_JMH.Clone">
            <summary>
            Creates a copy of the header.
            </summary>
            <returns>A copy of the header.</returns>
        </member>
        <member name="M:c_JMH.ToString">
            <summary>
            Converts the value of this header to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the value of this header.</returns>
        </member>
        <member name="M:c_JMH.Encode(System.IO.TextWriter)">
            <summary>
            Writes an encoded header value into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to receive the encoded value.</param>
        </member>
        <member name="P:c_JMH.c_Q5B">
            <summary>
            Gets the unstructured header value.
            </summary>
            <value>A value.</value>
            <remarks>Equivalent to <see cref="M:c_JMH.ToString"/> method.</remarks>
        </member>
        <member name="M:c_Y3H.Close">
            <summary>
            Writes all data buffered by this object to the underlying stream
            and closes that stream.
            </summary>
        </member>
        <member name="M:c_Y3H.Flush">
            <summary>
            Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:c_Y3H.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method throws <see cref="T:System.NotSupportedException"/>
            every time it's called.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Always.
            </exception>
        </member>
        <member name="M:c_Y3H.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method throws <see cref="T:System.NotSupportedException"/>
            every time it's called.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Always.
            </exception>
        </member>
        <member name="M:c_Y3H.SetLength(System.Int64)">
            <summary>
            This method throws <see cref="T:System.NotSupportedException"/>
            every time it's called.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Always.
            </exception>
        </member>
        <member name="M:c_Y3H.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Accepts a sequence of bytes to be encoded in Base64.
            </summary>
            <param name="buffer">An array of bytes to write
            (must not be null).</param>
            <param name="offset">The zero-based byte offset in <c>buffer</c>
            at which to begin reading.</param>
            <param name="count">The number of bytes to read from
            <c>buffer</c>. This parameter must be positive.</param>
        </member>
        <member name="P:c_Y3H.CanRead">
            <summary>
            Indicates that this stream does not support reading.
            </summary>
            <value><c>false</c>.</value>
        </member>
        <member name="P:c_Y3H.CanSeek">
            <summary>
            Indicates that this stream does not support seeking.
            </summary>
            <value><c>false</c>.</value>
        </member>
        <member name="P:c_Y3H.CanWrite">
            <summary>
            Indicates whether the underlying stream supports writing.
            </summary>
            <value><see cref="P:System.IO.Stream.CanWrite">CanWrite</see> of the
            stream passed to constructor.
            </value>
        </member>
        <member name="P:c_Y3H.Length">
            <summary>
            Accessor for the length of the underlying stream.
            </summary>
            <value>The length of the underlying stream, in bytes.</value>
        </member>
        <member name="P:c_Y3H.Position">
            <summary>
            Not implemented (because this stream does not support seeking).
            </summary>
            <exception cref="T:System.NotSupportedException">
            Always.
            </exception>
        </member>
        <member name="M:c_SKH.c_NFJ(System.Char)">
            <summary>
            Checks whether a byte can belong to an atom.
            </summary>
        </member>
        <member name="M:c_SKH.c_EJJ(System.Char)">
            <summary>
            Distinguishes the token characters, as defined by RFC 2045.
            </summary>
            <param name="c">The byte to check.</param>
            <returns>
            <c>true</c> if <c>c</c> is ASCII code of a printable
            character which is neither whitespace nor any of
            the "tspecials" defined by RFC 2045, <c>false</c>
            otherwise.
            </returns>
        </member>
        <member name="M:c_SKH.c_OFJ(System.String,System.Char,System.Char)">
            <summary>
            Adds delimiters and quoted pairs to <c>qcontent</c> and <c>dcontent</c>.
            </summary>
            <param name="val">
            The value to quote.
            This parameter must not be null.
            </param>
            <param name="openingChar">
            The opening delimiter (added before the quoted value).
            </param>
            <param name="closingChar">
            The opening delimiter (added after the quoted value).
            </param>
            <returns>
            A byte array (never null) of positive length,
            starting with <c>openingChar</c> and ending
            with <c>closingChar</c>.
            </returns>
        </member>
        <member name="M:c_SKH.c_KNJ(System.Int32)">
            <summary>
            Distinguishes the token characters, as defined by RFC 2047.
            </summary>
            <param name="c">The byte to check.</param>
            <returns>
            <c>true</c> if <c>c</c> is ASCII code of a printable
            character which is neither whitespace nor any of
            the "especials" defined by RFC 2047, <c>false</c>
            otherwise.
            </returns>
        </member>
        <member name="M:c_SKH.c_AHJ(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes 8-bit text into quoted-printable 7-bit text.
            </summary>
            <param name="buffer">
            Buffer containing the 8-bit text to encode.
            This parameter must not be null.
            </param>
            <param name="offset">
            The zero-based byte offset in <c>buffer</c>
            at which to begin reading.
            </param>
            <param name="count">
            The number of bytes to read from
            <c>buffer</c>. This parameter must be positive.
            </param>
            <returns>
            The encoded text. Implementations of this method
            must not return null (if they
            don't know what to return, they can throw).
            </returns>
            <remarks>
            Protocol for the encoding of MIME header values into the "Q"
            encoding is defined by RFC 2047.
            </remarks>
        </member>
        <member name="M:c_O3H.c_XO">
            <summary>
            Clears all body data.
            </summary>
        </member>
        <member name="M:c_O3H.c_RHA">
            <summary>
            Closes the stream. This has no effect on underlying data.
            </summary>
        </member>
        <member name="M:c_O3H.c_GOJ.Close">
            <summary>
            Closes the stream. This has no effect on underlying data.
            </summary>
        </member>
        <member name="T:c_LPJ">
            <summary>
            A collection of <see cref="!:AttachmentEntity"/> objects.
            </summary>
        </member>
        <member name="T:c_NPJ`1">
            <summary>
            Represents base class for the MSG entity collections.
            </summary>
            <typeparam name="T">Type of an entity.</typeparam>
        </member>
        <member name="M:c_NPJ`1.#ctor(c_VFH)">
            <summary>
            Initialize the <see cref="!:EntityCollection&lt;T&gt;"/> object.
            </summary>
            <param name="owner">Owner message.</param>
        </member>
        <member name="M:c_NPJ`1.c_QTA(`0)">
            <summary>
            Adds specified entity to the collection.
            </summary>
            <param name="entity">An entity to add.</param>
        </member>
        <member name="M:c_NPJ`1.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:c_NPJ`1.c_G1H">
            <summary>Owner of this collection.</summary>
        </member>
        <member name="P:c_NPJ`1.c_FWD">
            <summary>Storage of entities.</summary>
        </member>
        <member name="P:c_NPJ`1.c_TQA">
            <summary>
            Gets the number of entities.
            </summary>
        </member>
        <member name="P:c_NPJ`1.Item(System.Int32)">
            <summary>
            Gets an entity at the specified index.
            </summary>
            <param name="index">Index of the entity to get.</param>
            <returns>An entity.</returns>
        </member>
        <member name="M:c_LPJ.c_QTA(c_VFH)">
            <summary>
            Adds specified message to the attachments. Also marks message as embedded message.
            </summary>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:c_LPJ.c_QTA(c_VFH,System.String)">
            <summary>
            Adds specified message to the attachments. Also marks message as embedded message.
            </summary>
            <param name="message">Message to add.</param>
            <param name="displayName">Attachment name display text.</param>
        </member>
        <member name="M:c_LPJ.c_QTA(System.String)">
            <summary>
            Adds specified file to the attachments.
            </summary>
            <param name="filePath">Path to a file to add.</param>
        </member>
        <member name="M:c_LPJ.c_QTA(System.String,System.String)">
            <summary>
            Adds specified file to the attachments.
            </summary>
            <param name="filePath">Path to a file to add.</param>
            <param name="displayName">Attachment name display text.</param>
        </member>
        <member name="M:c_LPJ.c_QTA(System.IO.Stream)">
            <summary>
            Adds data from specified stream to the attachments.
            </summary>
            <param name="inputStream">Stream containing data to add.</param>
        </member>
        <member name="M:c_LPJ.c_QTA(System.IO.Stream,System.String,System.String)">
            <summary>
            Adds data from specified stream to the attachments.
            </summary>
            <param name="inputStream">Stream containing data to add.</param>
            <param name="fileName">File name.</param>
            <param name="displayName">Attachment name display text.</param>
        </member>
        <member name="M:c_LPJ.c_QTA(System.IO.Stream,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds data from specified stream to the attachments.
            </summary>
            <param name="inputStream">Stream containing data to add.</param>
            <param name="fileName">File name.</param>
            <param name="displayName">Attachment name display text.</param>
            <param name="contentType">Content-Type MIME header.</param>
            <param name="contentId">Content-ID MIME header.</param>
            <param name="contentLocation">Content-Location MIME header.</param>
        </member>
        <member name="M:c_LPJ.c_QTA(System.IO.Stream,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds data from specified stream to the attachments.
            </summary>
            <param name="inputStream">Stream containing data to add.</param>
            <param name="fileName">File name.</param>
            <param name="displayName">Attachment name display text.</param>
            <param name="mediaType">Media-type part of the Content-Type MIME header.</param>
            <param name="charSet">Char-Set of the content.</param>
            <param name="contentId">Content-ID MIME header.</param>
            <param name="contentLocation">Content-Location MIME header.</param>
        </member>
        <member name="M:c_LPJ.c_XJH(System.IO.Stream,System.String,System.String,System.String,System.String)">
            <summary>
            Adds data from specified stream to the attachments as a linked resource.
            </summary>
            <param name="inputStream">Stream containing data to add.</param>
            <param name="fileName">Content file name.</param>
            <param name="contentType">Content-Type MIME header.</param>
            <param name="contentId">Content-ID MIME header.</param>
            <param name="contentLocation">Content-Location MIME header.</param>
        </member>
        <member name="M:c_LPJ.c_XJH(System.IO.Stream,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds data from specified stream to the attachments as a linked resource.
            </summary>
            <param name="inputStream">Stream containing data to add.</param>
            <param name="fileName">Content file name.</param>
            <param name="mediaType">Media-type part of the Content-Type MIME header.</param>
            <param name="charSet">Char-Set of the content.</param>
            <param name="contentId">Content-ID MIME header.</param>
            <param name="contentLocation">Content-Location MIME header.</param>
        </member>
        <member name="T:c_QGH">
            <summary>
            Represents an attachment.
            </summary>
        </member>
        <member name="M:c_QGH.c_UKH">
            <summary>
            Returns a <see cref="!:MsgMessage"/> object which represents this attachment as an embedded message.
            </summary>
            <returns>An embedded <see cref="!:MsgMessage"/> object.</returns>
        </member>
        <member name="P:c_QGH.c_EPH">
            <summary>
            Gets a collection of all properties associated with this <see cref="!:AttachmentEntity"/>.
            </summary>
            <returns>A property collection.</returns>
        </member>
        <member name="P:c_QGH.c_OAC">
            <summary>
            Gets the data associated with this <see cref="!:AttachmentEntity"/> object.
            </summary>
            <returns>An object representing data of this attachment; or null reference (Nothing in Visual Basic) if no data are associated.</returns>
        </member>
        <member name="P:c_QGH.c_RQH">
            <summary>
            Gets the type of data associated with this <see cref="!:AttachmentEntity"/> object.
            </summary>
            <returns>A type of data associated with this attachment; or <see cref="!:PropertyDataType.Null"/> if no data are associated.</returns>
        </member>
        <member name="P:c_QGH.c_QQH">
            <summary>
            Gets a value indicating whether this <see cref="!:AttachmentEntity"/> object represents an embedded <see cref="!:MsgMessage"/> object. 
            </summary>
            <returns>True if this is an embedded message; false otherwise.</returns>
        </member>
        <member name="T:c_VHH">
            <summary>
            Specifies a type of the recipient.
            </summary>
        </member>
        <member name="F:c_VHH.c_VWF">
            <summary>
            From address - the original sender of the message.
            </summary>
        </member>
        <member name="F:c_VHH.c_XWF">
            <summary>
            To address - primary message recipient.
            </summary>
        </member>
        <member name="F:c_VHH.c_WHH">
            <summary>
            Cc address - recipient of a message copy.
            </summary>
        </member>
        <member name="F:c_VHH.c_Z7G">
            <summary>
            Bcc address - recipient of a blind copy.
            </summary>
        </member>
        <member name="T:c_RMH">
            <summary>
            Specifies a kind of the property.
            </summary>
        </member>
        <member name="F:c_RMH.c_HND">
            <summary>
            A tagged property (identified by Tag).
            </summary>
        </member>
        <member name="F:c_RMH.c_RRJ">
            <summary>
            A numerical named property (identified by LID).
            </summary>
        </member>
        <member name="F:c_RMH.c_SMH">
            <summary>
            A string named property (identified by Name).
            </summary>
        </member>
        <member name="T:c_ZGH">
            <summary>
            Specifies known property Tags.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SRJ">
            <summary>
            2.584: Contains a displayable form of the Address Book object that can be rendered in the client user's own code page.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TRJ">
            <summary>
            2.585: Indicates the operations available to the client for the object.
            Contains a bitmask of flags indicating the operations that are available to the client for the object.
            Data Type: Integer32.
            </summary>
            <remarks>
            This property is read-only for the client. It must be a bitwise OR of zero or more values from the following table.
            <table>
            <tr><th>Name</th><th>Value</th><th>Description</th></tr>
            <tr><td>MAPI_ACCESS_MODIFY</td><td>0x0001</td><td>Write</td></tr>
            <tr><td>MAPI_ACCESS_READ</td><td>0x0002</td><td>Read</td></tr>
            <tr><td>MAPI_ACCESS_DELETE</td><td>0x0004</td><td>Delete</td></tr>
            <tr><td>MAPI_ACCESS_CREATE_HIERARCHY</td><td>0x0008</td><td>Create subfolders in the folder hierarchy</td></tr>
            <tr><td>MAPI_ACCESS_CREATE_CONTENTS</td><td>0x0010</td><td>Create content messages</td></tr>
            <tr><td>MAPI_ACCESS_CREATE_ASSOCIATED</td><td>0x0020</td><td>Create associated content messages</td></tr>
            </table>
            The MAPI_ACCESS_DELETE, MAPI_ACCESS_MODIFY, and MAPI_ACCESS_READ flags are found on folder and message objects and 
            in the PR_ACCESS column in contents tables and associated contents tables. 
            The MAPI_ACCESS_CREATE_ASSOCIATED, MAPI_ACCESS_CREATE_CONTENTS, and MAPI_ACCESS_CREATE_HIERARCHY flags are found on folder objects only.
            </remarks>
        </member>
        <member name="F:c_ZGH.c_URJ">
            <summary>
            2.586: Indicates the client's access level to the object.
            Data Type: Integer32.
            </summary>
            <remarks>
            This property is read-only for the client. It must be one of the following values:
            <table>
            <tr><th>Value</th><th>Description</th></tr>
            <tr><td>0x0000</td><td>Read-Only</td></tr>
            <tr><td>0x0001</td><td>Modify</td></tr>
            </table>
            </remarks>
        </member>
        <member name="F:c_ZGH.c_VRJ">
            <summary>
            2.587: Contains the Address Book object's alias, which is an alternative name by which the object can be identified.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WRJ">
            <summary>
            2.588: Contains the indexed entry IDs for several special folders related to 
            conflicts, sync issues, local failures, server failures, junk e-mail and spam.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XRJ">
            <summary>
            2.589: Contains an array of blocks that contain the entry IDs for folders related to 
            RSS Feeds folders, Tracked Mail Processing folder, To-Do Search folder, and Conversation Action Settings folder.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YRJ">
            <summary>
            2.590: Indicates whether delivery restrictions exist for a recipient.
            Data Type: Object.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZRJ">
            <summary>
            2.591: Contains the ID of a container on an NSPI server.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ASJ">
            <summary>
            2.592: PidTagAddressBookDeliveryContentLength.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BSJ">
            <summary>
            2.593: PidTagAddressBookDisplayNamePrintable.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CSJ">
            <summary>
            2.594: Contains a value that indicates how to display an Address Book object in a table or as a recipient on a message.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DSJ">
            <summary>
            2.595: Contains the number of external recipients in the distribution list.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ESJ">
            <summary>
            2.596: Contains the total number of recipients in the distribution list.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FSJ">
            <summary>
            2.597: Indicates that delivery restrictions exist for a recipient.
            Data Type: Object.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GSJ">
            <summary>
            2.598: Indicates that delivery restrictions exist for a recipient.
            Data Type: Object.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HSJ">
            <summary>
            2.599: Indicates that delivery restrictions exist for a recipient.
            Data Type: Object.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JSJ">
            <summary>
            2.600: Contains the name-service EntryID of a directory object that refers to a public folder.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KSJ">
            <summary>
            2.601: Contains information to be added to display templates.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MSJ">
            <summary>
            2.602: Contains information to be added to display templates.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LSJ">
            <summary>
            2.603: This property has be deprecated is to be ignored.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NSJ">
            <summary>
            2.604: Contains the child departments in a hierarchy of departments.
            Data Type: EmbeddedTable.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OSJ">
            <summary>
            2.605: Contains all the mail users that belong to this department.
            Data Type: EmbeddedTable.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PSJ">
            <summary>
            2.606: Indicates whether the distribution list represents a departmental group.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QSJ">
            <summary>
            2.607: Contains all the departments to which this department is a child.
            Data Type: EmbeddedTable.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RSJ">
            <summary>
            2.608: Contains the DN of the root departmental group in the department hierarchy for the organization.
            Data Type: String8.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SSJ">
            <summary>
            2.609: Lists all Department objects of which the mail user is a member.
            Data Type: EmbeddedTable.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TSJ">
            <summary>
            2.610: Contains the DN expressed in the X500 DN format specification.
            Data Type: String8.
            </summary>
        </member>
        <member name="F:c_ZGH.c_USJ">
            <summary>
            2.611: Contains a Boolean that is TRUE if it is possible to create Address Book objects in that container, and FALSE otherwise.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VSJ">
            <summary>
            2.612: List all the distribution lists for which this object is a member.
            Data Type: MultipleString8.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WSJ">
            <summary>
            2.613: Contains information for use in display templates for distribution lists.
            Data Type: Object.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XSJ">
            <summary>
            2.614: Contains one row that references the mail user's manager.
            Data Type: EmbeddedTable.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YSJ">
            <summary>
            2.615: Contains the distinguished name (DN) of the mail user's manager.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZSJ">
            <summary>
            2.616: Contains the members of the distribution list.
            Data Type: MultipleString8.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ATJ">
            <summary>
            2.617: Short-term MID of the first message in the local site's offline address book public folder.
            Data Type: Integer64.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BTJ">
            <summary>
            2.618: Indicates whether moderation is enabled for the mail user of the distribution list.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CTJ">
            <summary>
            2.619: Contains a list of names by which a server is known to the various transports in use by the network.
            Data Type: MultipleString.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DTJ">
            <summary>
            2.620: Contains the distinguished name (DN) of the Address Book object in DN format.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ETJ">
            <summary>
            2.621: Contains a GUID that uniquely identifies an Address Book object.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FTJ">
            <summary>
            2.622: Contains the distinguished name (DN) of the Organization object of the mail user's organization.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GTJ">
            <summary>
            2.623: Contains one row that references the distribution list's owner.
            Data Type: EmbeddedTable.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HTJ">
            <summary>
            2.624: PidTagAddressBookOwnerBackLink.
            Data Type: EmbeddedTable.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JTJ">
            <summary>
            2.625: Contains the Entry ID of the parent container in a hierarchy of address book containers.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KTJ">
            <summary>
            2.626: Contains the phonetic representation of the PidTagCompanyName property (section 2.710).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MTJ">
            <summary>
            2.627: Contains the phonetic representation of the PidTagDepartmentName property (section 2.744).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LTJ">
            <summary>
            2.628: Contains the phonetic representation of the PidTagDisplayName property (section 2.748).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NTJ">
            <summary>
            2.629: Contains the phonetic representation of the PidTagGivenName property (section 2.793).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OTJ">
            <summary>
            2.630: Contains the phonetic representation of the PidTagSurname property (section 2.1157).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PTJ">
            <summary>
            2.631: Contains alternate e-mail addresses for the Address Book object.
            Data Type: MultipleString.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QTJ">
            <summary>
            2.632: Contains a list of mail users who are allowed to send e-mail on behalf of the mailbox owner.
            Data Type: EmbeddedTable.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RTJ">
            <summary>
            2.633: Lists all a mail user's direct reports.
            Data Type: EmbeddedTable.
            </summary>
        </member>
        <member name="F:c_ZGH.c_STJ">
            <summary>
            2.634: Contains the maximum occupancy of the room.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TTJ">
            <summary>
            2.635: Contains a list of DNs that represent the address book containers that hold Resource objects, 
            such as conference rooms and equipment.
            Data Type: MultipleString.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UTJ">
            <summary>
            2.636: Contains a description of the Resource object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VTJ">
            <summary>
            2.637: Contains the locale ID and translations of the default mail tip.
            Data Type: MultipleString.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WTJ">
            <summary>
            2.638: Contains a signed integer that specifies the seniority order of Address Book objects 
            that represent members of a department and are referenced by a Department object or departmental group, 
            with larger values specifying members that are more senior.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XTJ">
            <summary>
            2.639: Contains the foreign system e-mail address of an Address Book object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YTJ">
            <summary>
            2.640: Indicates whether delivery restrictions exist for this recipient.
            Data Type: Object.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZTJ">
            <summary>
            2.641: Contains the ASN_1 DER encoded X_509 certificates for the mail user.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NMH">
            <summary>
            2.642: Contains the Address Book object's e-mail address type.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_AUJ">
            <summary>
            2.643: Contains TRUE if the sender permits auto forwarding of this message.
            Data Type: Boolean.
            </summary>
            <remarks>
            If auto forwarding is not permitted or if no alternate recipient has been designated, a nondelivery report should be generated. 
            </remarks>
        </member>
        <member name="F:c_ZGH.c_BUJ">
            <summary>
            2.644: Contains a filter value used in ambiguous name resolution.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CUJ">
            <summary>
            2.645: PidTagArchiveDate.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DUJ">
            <summary>
            2.646: PidTagArchivePeriod.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_EUJ">
            <summary>
            2.647: PidTagArchiveTag.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FUJ">
            <summary>
            2.648: Contains the name of the mail user's administrative assistant.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GUJ">
            <summary>
            2.649: Contains the telephone number of the mail user's administrative assistant.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HUJ">
            <summary>
            2.650: Specifies whether the message being synchronized is an FAI message.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JUJ">
            <summary>
            2.651: Provides file type information for a non-Windows attachment.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KUJ">
            <summary>
            2.652: Contains the base of a relative URI.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_AMH">
            <summary>
            2.653: Contains a content identifier unique to the Message object that matches a corresponding "cid:" URI scheme 
            reference in the HTML body of the Message object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BMH">
            <summary>
            2.654: Contains a relative or full URI that matches a corresponding reference in the HTML body of a Message object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_AQJ">
            <summary>
            2.655: Contains the contents of the file to be attached.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RPJ">
            <summary>
            2.656: Contains the binary representation of the Attachment object in an application- specific format.
            Data Type: Object.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MUJ">
            <summary>
            2.657: Contains encoding information about the Attachment object.
            Data Type: Binary.
            </summary>
            <remarks>
            Contains an ASN.1 object identifier that specifies the encoding for an attachment. 
            PidTagAttachEncoding property identifies the algorithm used to transform the data in an attachment.
            NOTE: 
            The PR_ATTACH_ENCODING and PR_ATTACH_TAG (PidTagAttachTag) properties should not be confused. They are not paired or related. 
            PR_ATTACH_TAG identifies the application that originally generated the attachment. 
            "Object" has a much more general meaning in the term object identifier, and in X.400, than in object-oriented programming.
            The object identifier syntax and sample object identifiers are defined in the MAPIOID.H header file. 
            Values for PR_ATTACH_ENCODING are not limited to those defined in MAPIOID.H. 
            For example, attached Macintosh files can use an identifier such as MacBinary.
            For complete information on these object identifiers, see the documentation on ASN.1, X.208, and X.209. 
            The object identifier is found in the application-reference element of the FTBP (File Transfer Body Part) environment. 
            </remarks>
        </member>
        <member name="F:c_ZGH.c_HQJ">
            <summary>
            2.658: Contains a filename extension that indicates the document type of an attachment.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GHH">
            <summary>
            2.659: Contains the 8.3 name of PidTagAttachLongFilename (section 2.661).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LUJ">
            <summary>
            2.660: Indicates which body formats might reference this attachment when rendering data.
            Data Type: Integer32.
            </summary>
            <remarks>
            <table>
            <tr><td>0x0001</td><td>ATT_INVISIBLE_IN_HTML</td></tr>
            <tr><td>0x0002</td><td>ATT_INVISIBLE_IN_RTF</td></tr>
            <tr><td>0x0004</td><td>ATT_MHTML_REF</td></tr>
            </table>
            </remarks>
        </member>
        <member name="F:c_ZGH.c_ALH">
            <summary>
            2.661: Contains the full filename and extension of the Attachment object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BLH">
            <summary>
            2.662: Contains the fully qualified path and filename with extension.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NUJ">
            <summary>
            2.663: Indicates that a contact photo attachment is attached to a Contact object.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OUJ">
            <summary>
            2.664: Indicates special handling for an Attachment object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZKH">
            <summary>
            2.665: Indicates whether an Attachment object is hidden from the end user.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PUJ">
            <summary>
            2.666: Contains the type of Message object to which this attachment is linked.
            Data Type: Integer32.
            </summary>
            <remarks>
            Must be 0, unless overridden by other protocols that extend the Message and Attachment Object Protocol as noted in [MS-OXCMSG].
            </remarks>
        </member>
        <member name="F:c_ZGH.c_OPJ">
            <summary>
            2.667: Represents the way the contents of an attachment are accessed.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QUJ">
            <summary>
            2.000: Contains the MIME sequence number of a MIME message attachment. This property is used for MHTML support. 
            It represents the sequence number of the attachment within the parent MIME multipart body part of the MIME message.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CMH">
            <summary>
            2.668: Contains formatting information about a Multipurpose Internet Mail Extensions (MIME) attachment.
            If the PR_ATTACH_TAG (PidTagAttachTag) property contains the value OID_MIMETAG,
            the transport provider should look at these properties to determine how the attachment is formatted.
            These properties are copied from the Content-type parameter of the inbound MIME header.
            The composition of the string is defined in the RFC 1521 document. The format is type/subtype, such as application/binary or text/plain.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TPJ">
            <summary>
            2.669: Identifies the Attachment object within its Message object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CLH">
            <summary>
            2.670: Contains the 8.3 name of PidTagAttachLongPathname (section 2.662).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RUJ">
            <summary>
            2.671: PidTagAttachPayloadClass.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SUJ">
            <summary>
            2.672: PidTagAttachPayloadProviderGuidString.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TUJ">
            <summary>
            2.673: Contains a Windows Metafile as specified in [MS-WMF] for the Attachment object.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CQJ">
            <summary>
            2.674: Contains the size in bytes consumed by the Attachment object on the server.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UUJ">
            <summary>
            2.675: Contains the identifier information for the application which supplied the Attachment object's data.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DLH">
            <summary>
            2.676: Contains the name of an attachment file, modified so that it can be correlated with TNEF messages.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VUJ">
            <summary>
            2.677: Specifies the hide or show status of a folder.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WUJ">
            <summary>
            2.678: PidTagAttributeReadOnly.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XUJ">
            <summary>
            2.679: PidTagAttributeSystem.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YUJ">
            <summary>
            2.680: PidTagAutoForwarded.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZUJ">
            <summary>
            2.681: Contains text included in an automatically generated message.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_AVJ">
            <summary>
            2.682: PidTagAutoResponseSuppress.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BVJ">
            <summary>
            2.683: Contains the date of the mail user's birthday at 12:00 AM.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CVJ">
            <summary>
            2.684: Indicates the user's preference for viewing external content (such as links to images on an HTTP server) in the message body.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DVJ">
            <summary>
            2.685: Contains message body text in plain text format.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_AHH">
            <summary>
            2.686: PidTagBodyContentId.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CHH">
            <summary>
            2.687: PidTagBodyContentLocation.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_EVJ">
            <summary>
            2.688: Contains the Hypertext Markup Language (HTML) version of the message text.
            Data Type: String.
            </summary>
            <remarks>
            These properties contain the same message text as the PR_BODY_CONTENT_LOCATION (PidTagBodyContentLocation), but in HTML.
            A message store that supports HTML indicates this by setting the STORE_HTML_OK flag in its PR_STORE_SUPPORT_MASK (PidTagStoreSupportMask).
            Note: STORE_HTML_OK is not defined in versions of Mapidefs.h included with Microsoft(r) Exchange 2000 Server and earlier. 
            If STORE_HTML_OK is undefined, use the value 0x00010000 instead.
            </remarks>
        </member>
        <member name="F:c_ZGH.c_FVJ">
            <summary>
            2.689: Contains a secondary telephone number at the mail user's place of business.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GVJ">
            <summary>
            2.690: Contains secondary telephone numbers at the mail user's place of business.
            Data Type: MultipleString.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HVJ">
            <summary>
            2.691: Contains the telephone number of the mail user's business fax machine.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JVJ">
            <summary>
            2.692: Contains the Web address (URL) of the mail user's business home page.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KVJ">
            <summary>
            2.693: Contains the primary telephone number of the mail user's place of business.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MVJ">
            <summary>
            2.694: Contains a telephone number to reach the mail user.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LVJ">
            <summary>
            2.695: PidTagCallId.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NVJ">
            <summary>
            2.696: Contains the mail user's car telephone number.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OVJ">
            <summary>
            2.697: PidTagCdoRecurrenceid.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PVJ">
            <summary>
            2.698: Contains a global identifier (GID) indicating the last change to the object.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QVJ">
            <summary>
            2.699: PidTagChangeNotificationGuid.
            Data Type: Guid.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RVJ">
            <summary>
            2.700: Contains a value that identifies the last change to the message or folder that is currently being synchronized.
            Data Type: Integer64.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SVJ">
            <summary>
            2.701: PidTagChildrensNames.
            Data Type: MultipleString.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TVJ">
            <summary>
            2.702: PidTagClientActions.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UVJ">
            <summary>
            2.703: Contains the current time (in UTC) when the e-mail message is submitted.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VVJ">
            <summary>
            2.704: Contains an IDSET of CNs tracking changes to the read state for messages in the current synchronization scope 
            that have been previously communicated to the client, and are reflected in its local replica.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WVJ">
            <summary>
            2.705: Contains an IDSET of CNs for folders or normal messages in the current synchronization scope 
            that have been previously communicated to a client, and are reflected in its local replica.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XVJ">
            <summary>
            2.706: Contains IDs for folder associated information (FAI) messages and is therefore only used in contents synchronization.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YVJ">
            <summary>
            2.707: PidTagCodePageId.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZVJ">
            <summary>
            2.708: Contains a comment about the purpose or content of the Address Book object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_AWJ">
            <summary>
            2.709: Contains the main telephone number of the mail user's company.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BWJ">
            <summary>
            2.710: Contains the mail user's company name.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CWJ">
            <summary>
            2.711: Contains the name of the mail user's computer network.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DWJ">
            <summary>
            2.712: PidTagConflictEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_EWJ">
            <summary>
            2.713: PidTagConflictItems.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FWJ">
            <summary>
            2.714: Contains a value that describes the type of Message object that a folder contains.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GWJ">
            <summary>
            2.715: Always empty - an NSPI server defines this value for distribution lists and is not present for all other objects.
            Data Type: EmbeddedTable.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HWJ">
            <summary>
            2.716: Contains a bitmask of flags that describe capabilities of an address book container.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JWJ">
            <summary>
            2.717: Identifies all subfolders of the current folder.
            Data Type: Object.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KWJ">
            <summary>
            2.718: Specifies the number of rows under the header row.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MWJ">
            <summary>
            2.719: PidTagContentFilterPhishingConfidenceLevel.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LWJ">
            <summary>
            2.720: Indicates a confidence level that the message is spam.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NWJ">
            <summary>
            2.721: Specifies the number of rows under the header row that have the PidTagRead property (section 2.985) set to FALSE.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OWJ">
            <summary>
            2.722: PidTagConversationId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PWJ">
            <summary>
            2.723: Indicates the relative position of this message within a conversation thread.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QWJ">
            <summary>
            2.724: PidTagConversationIndexTracking.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RWJ">
            <summary>
            2.725: Contains an unchanging copy of the original subject.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SWJ">
            <summary>
            2.726: Contains the name of the mail user's country/region.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TWJ">
            <summary>
            2.727: Contains the time the object was created in UTC.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UWJ">
            <summary>
            2.728: PidTagCreatorEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VWJ">
            <summary>
            2.729: Contains the name of a Message object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WWJ">
            <summary>
            2.730: PidTagCreatorSimpleDisplayName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XWJ">
            <summary>
            2.731: Contains the mail user's customer identification number.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YWJ">
            <summary>
            2.732: PidTagDamBackPatched.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZWJ">
            <summary>
            2.733: PidTagDamOriginalEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_AXJ">
            <summary>
            2.734: Contains the message class of the object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BXJ">
            <summary>
            2.735: Contains the server EntryID for the DAM message.
            Data Type: ServerId.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CXJ">
            <summary>
            2.736: Contains the date and time, in UTC, at which the sender prefers the message to be delivered.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DXJ">
            <summary>
            2.737: Contains a number used in the calculation of how long to defer sending a message.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_EXJ">
            <summary>
            2.738: Contains the amount of time after which a client would like to defer sending the message.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FXJ">
            <summary>
            2.739: Specifies the unit of time used as a multiplier with the PidTagDeferredSendNumber property (section 2.737) value.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GXJ">
            <summary>
            2.740: PidTagDelegatedByRule.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HXJ">
            <summary>
            2.741: PidTagDelegateFlags.
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JXJ">
            <summary>
            2.742: Indicates that the original message is to be deleted after the message is sent.
            Contains TRUE if a client application wants MAPI to delete the associated message after submission. 
            Data Type: Boolean.
            </summary>
            <remarks>
            A client application uses this property with the PR_SENTMAIL_ENTRYID (PidTagSentMailEntryId) property to control what happens 
            to a message after it is submitted. Either one or the other should be set, but not both.
            </remarks>
        </member>
        <member name="F:c_ZGH.c_KXJ">
            <summary>
            2.743: Specifies the time when the item or folder was soft deleted.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MXJ">
            <summary>
            2.744: Contains a name for the department in which the mail user works.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LXJ">
            <summary>
            2.745: Specifies the number of nested categories in which a given row is contained.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NXJ">
            <summary>
            2.746: Contains a list of blind carbon copy (Bcc) recipient display names.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OXJ">
            <summary>
            2.747: Contains list of carbon copy (Cc) recipient display names.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LMH">
            <summary>
            2.748: Contains the name of the attachment as input by the end user.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PXJ">
            <summary>
            2.749: Contains the mail user's honorific title.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QXJ">
            <summary>
            2.750: Contains a list of the primary recipient display names, separated by semicolons, if an e-mail message has primary recipient.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RXJ">
            <summary>
            2.751: Contains a value that indicates how to display an Address Book object in a table or as an addressee on a message.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SXJ">
            <summary>
            2.752: Contains a value that indicates how to display an Address Book object in a table or as a recipient on a message.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TXJ">
            <summary>
            2.753: Contains a value that conveys a warning that occurred when producing output for an element in context.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OMH">
            <summary>
            2.754: Contains the Address Book object's e-mail address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UXJ">
            <summary>
            2.755: PidTagEndAttach.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VXJ">
            <summary>
            2.756: Contains the value of the PidLidAppointmentEndWhole property (section 2.14).
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WXJ">
            <summary>
            2.757: PidTagEndEmbed.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XXJ">
            <summary>
            2.758: PidTagEndFolder.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YXJ">
            <summary>
            2.759: PidTagEndMessage.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZXJ">
            <summary>
            2.760: PidTagEndToRecip.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_AYJ">
            <summary>
            2.761: Contains the information to identify many different types of messaging objects, 
            including objects that are not in an address book.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BYJ">
            <summary>
            2.762: Contains the start date and time of the exception in the local time zone of the computer when the exception is created.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CYJ">
            <summary>
            2.763: PidTagExceptionReplaceTime.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DYJ">
            <summary>
            2.764: Contains the end date and time of the exception in the local time zone of the computer when the exception is created.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_EYJ">
            <summary>
            2.765: PidTagExchangeNTSecurityDescriptor.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FYJ">
            <summary>
            2.766: Used along with PidTagExpiryUnits (section 2.768) to define the expiry send time.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GYJ">
            <summary>
            2.767: Contains the time after which a client wants to receive an expiry event if the message arrives late.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HYJ">
            <summary>
            2.768: Used to describe the unit of time that PidTagExpiryNumber (section 2.766) multiplies.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JYJ">
            <summary>
            2.769: Contains encoded sub-properties for a folder.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KYJ">
            <summary>
            2.770: PidTagExtendedRuleMessageActions.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MYJ">
            <summary>
            2.771: PidTagExtendedRuleMessageCondition.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LYJ">
            <summary>
            2.772: PidTagExtendedRuleSizeLimit.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NYJ">
            <summary>
            2.773: PidTagFaxNumberOfPages.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OYJ">
            <summary>
            2.774: Specifies the date and time in UTC that the Message object was flagged completed.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PYJ">
            <summary>
            2.775: Specifies the flag state of the Message object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QYJ">
            <summary>
            2.776: PidTagFlatUrlName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RYJ">
            <summary>
            2.777: Identifies all FAI messages in the current folder.
            Data Type: Object.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SYJ">
            <summary>
            2.778: Contains the FID of the folder.
            Data Type: Integer64.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TYJ">
            <summary>
            2.779: Specifies the type of a folder that includes Root folder, Generic folder, and Search folder.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UYJ">
            <summary>
            2.780: Specifies the flag color of the Message object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VYJ">
            <summary>
            2.781: Contains a value used to calculate the start and end dates of the range of free/busy data to be published to the public folders.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WYJ">
            <summary>
            2.782: PidTagFreeBusyEntryIds.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XYJ">
            <summary>
            2.783: PidTagFreeBusyMessageEmailAddress.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YYJ">
            <summary>
            2.784: PidTagFreeBusyPublishEnd.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZYJ">
            <summary>
            2.785: PidTagFreeBusyPublishStart.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_AZJ">
            <summary>
            2.786: PidTagFreeBusyRangeTimestamp.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BZJ">
            <summary>
            2.787: Contains the mail user's File Transfer Protocol (FTP) site address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CZJ">
            <summary>
            2.788: Contains a value that represents a directive to a client to delete specific subobjects of the object in context.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DZJ">
            <summary>
            2.789: PidTagFXErrorInfo.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_EZJ">
            <summary>
            2.790: PidTagGatewayNeedsToRefresh.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FZJ">
            <summary>
            2.791: Contains a value that represents the mail user's gender.
            Data Type: Integer16.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GZJ">
            <summary>
            2.792: Contains a generational abbreviation that follows the full name of the mail user.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HZJ">
            <summary>
            2.793: Contains the mail user's given name.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JZJ">
            <summary>
            2.794: Contains a government identifier for the mail user.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KZJ">
            <summary>
            2.795: Indicates whether the Message object contains at least one attachment.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MZJ">
            <summary>
            2.796: PidTagHasDeferredActionMessages.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LZJ">
            <summary>
            2.797: PidTagHasNamedProperties.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NZJ">
            <summary>
            2.798: PidTagHasRules.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OZJ">
            <summary>
            2.799: Contains a number that monotonically increases every time a subfolder is added to or deleted from this folder.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PZJ">
            <summary>
            2.800: Contains the names of the mail user's hobbies.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QZJ">
            <summary>
            2.801: Contains a secondary telephone number at the mail user's home.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RZJ">
            <summary>
            2.802: Contains secondary telephone numbers at the mail user's home.
            Data Type: MultipleString.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SZJ">
            <summary>
            2.803: Contains the name of the mail user's home locality, such as the town or city.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TZJ">
            <summary>
            2.804: Contains the name of the mail user's home country/region.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UZJ">
            <summary>
            2.805: Contains the postal code for the mail user's home postal address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VZJ">
            <summary>
            2.806: Contains the number or identifier of the mail user's home post office box.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WZJ">
            <summary>
            2.807: Contains the name of the mail user's home state or province.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XZJ">
            <summary>
            2.808: Contains the mail user's home street address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YZJ">
            <summary>
            2.809: Contains the telephone number of the mail user's home fax machine.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZZJ">
            <summary>
            2.810: Contains the primary telephone number of the mail user's home.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_A0J">
            <summary>
            2.811: Contains message body text in HTML format.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_B0J">
            <summary>
            2.812: PidTagICalendarEndTime.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_C0J">
            <summary>
            2.813: PidTagICalendarReminderNextTime.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_D0J">
            <summary>
            2.814: PidTagICalendarStartTime.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CJH">
            <summary>
            2.815: Specifies which icon is to be used by a user interface when displaying a group of Note objects.
            Contains a number that indicates which icon to use when you display a group of e-mail objects.
            Data Type: Integer32.
            </summary>
            <remarks>
            This property, if it exists, is a hint to the client. The client may ignore the value of this property.
            <table>
            <tr><th>Mail item state</th><th>Icon Index</th></tr>
            <tr><td>New mail</td><td>0xFFFFFFFF</td></tr>
            <tr><td>Post</td><td>0x0001</td></tr>
            <tr><td>Other</td><td>0x0003</td></tr>
            <tr><td>Read mail</td><td>0x0100</td></tr>
            <tr><td>Unread mail</td><td>0x0101</td></tr>
            <tr><td>Submitted mail</td><td>0x0102</td></tr>
            <tr><td>Unsent mail</td><td>0x0103</td></tr>
            <tr><td>Receipt mail</td><td>0x0104</td></tr>
            <tr><td>Replied mail</td><td>0x0105</td></tr>
            <tr><td>Forwarded mail</td><td>0x0106</td></tr>
            <tr><td>Remote mail</td><td>0x0107</td></tr>
            <tr><td>Delivery mail</td><td>0x0108</td></tr>
            <tr><td>Read mail</td><td>0x0109</td></tr>
            <tr><td>Nondelivery mail</td><td>0x010A</td></tr>
            <tr><td>Nonread mail</td><td>0x010B</td></tr>
            <tr><td>Recall_S mail</td><td>0x010C</td></tr>
            <tr><td>Recall_F mail</td><td>0x010D</td></tr>
            <tr><td>Tracking mail</td><td>0x010E</td></tr>
            <tr><td>Out of office mail</td><td>0x011B</td></tr>
            <tr><td>Recall mail</td><td>0x011C</td></tr>
            <tr><td>Tracked mail</td><td>0x0130</td></tr>
            <tr><td>Contact</td><td>0x0200</td></tr>
            <tr><td>Distribution list</td><td>0x0202</td></tr>
            <tr><td>Sticky note blue</td><td>0x0300</td></tr>
            <tr><td>Sticky note green</td><td>0x0301</td></tr>
            <tr><td>Sticky note pink</td><td>0x0302</td></tr>
            <tr><td>Sticky note yellow</td><td>0x0303</td></tr>
            <tr><td>Sticky note white</td><td>0x0304</td></tr>
            <tr><td>Single instance appointment</td><td>0x0400</td></tr>
            <tr><td>Recurring appointment</td><td>0x0401</td></tr>
            <tr><td>Single instance meeting</td><td>0x0402</td></tr>
            <tr><td>Recurring meeting</td><td>0x0403</td></tr>
            <tr><td>Meeting request</td><td>0x0404</td></tr>
            <tr><td>Accept</td><td>0x0405</td></tr>
            <tr><td>Decline</td><td>0x0406</td></tr>
            <tr><td>Tentativly</td><td>0x0407</td></tr>
            <tr><td>Cancellation</td><td>0x0408</td></tr>
            <tr><td>Informational update</td><td>0x0409</td></tr>
            <tr><td>Task/task</td><td>0x0500</td></tr>
            <tr><td>Unassigned recurring task</td><td>0x0501</td></tr>
            <tr><td>Assignee's task</td><td>0x0502</td></tr>
            <tr><td>Assigner's task</td><td>0x0503</td></tr>
            <tr><td>Task request</td><td>0x0504</td></tr>
            <tr><td>Task acceptance</td><td>0x0505</td></tr>
            <tr><td>Task rejection</td><td>0x0506</td></tr>
            <tr><td>Journal conversation</td><td>0x0601</td></tr>
            <tr><td>Journal e-mail message</td><td>0x0602</td></tr>
            <tr><td>Journal meeting request</td><td>0x0603</td></tr>
            <tr><td>Journal meeting response</td><td>0x0604</td></tr>
            <tr><td>Journal task request</td><td>0x0606</td></tr>
            <tr><td>Journal task response</td><td>0x0607</td></tr>
            <tr><td>Journal note</td><td>0x0608</td></tr>
            <tr><td>Journal fax</td><td>0x0609</td></tr>
            <tr><td>Journal phone call</td><td>0x060A</td></tr>
            <tr><td>Journal letter</td><td>0x060C</td></tr>
            <tr><td>Journal Microsoft Office Word</td><td>0x060D</td></tr>
            <tr><td>Journal Microsoft Office Excel</td><td>0x060E</td></tr>
            <tr><td>Journal Microsoft Office PowerPoint</td><td>0x060F</td></tr>
            <tr><td>Journal Microsoft Office Access</td><td>0x0610</td></tr>
            <tr><td>Journal document</td><td>0x0612</td></tr>
            <tr><td>Journal meeting</td><td>0x0613</td></tr>
            <tr><td>Journal meeting cancellation</td><td>0x0614</td></tr>
            <tr><td>Journal remote session</td><td>0x0615</td></tr>
            </table>
            </remarks>
        </member>
        <member name="F:c_ZGH.c_E0J">
            <summary>
            2.816: Contains a serialization of REPLID-based IDSETs.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_F0J">
            <summary>
            2.817: Contains a serialization of a REPLID-based IDSETs that contains IDs that expired since the last synchronization 
            identified by the initial ICS state.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_G0J">
            <summary>
            2.818: Contains a value that contains a serialized IDSET of folder IDs (FIDs) for hierarchy synchronization, 
            or message IDs (MIDs) for contents synchronization, that exist in the local replica of the client.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_H0J">
            <summary>
            2.819: Contains a serialization of a REPLID-based IDSETs that contain IDs of messages that were marked as read 
            since the last synchronization identified by the initial ICS state.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_J0J">
            <summary>
            2.820: Contains a serialization of a REPLID-based IDSET that contains the IDs of messages that got out of synchronization scope 
            since the last synchronization identified by the initial ICS state.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_K0J">
            <summary>
            2.821: Contains a serialization of a REPLID-based IDSET that contains IDs of messages that were marked as unread 
            since the last synchronization identified by the initial ICS state.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_M0J">
            <summary>
            2.822: PidTagImapCachedMsgsize.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_L0J">
            <summary>
            2.823: Indicates the level of importance assigned by the end user to the Message object.
            Data Type: Integer32.
            </summary>
            <remarks>
            This property and the PR_PRIORITY (PidTagPriority) property should not be confused. 
            Importance indicates a value to users, while priority indicates the order or speed at which the message should be sent 
            by the messaging system software. Higher priority usually indicates a higher cost. Higher importance usually is associated 
            with a different display by the user interface.
            This property can have exactly one of the following values:
            IMPORTANCE_LOW
                The message has low importance.
            IMPORTANCE_HIGH
                The message has high importance.
            IMPORTANCE_NORMAL
                The message has normal importance.
            </remarks>
        </member>
        <member name="F:c_ZGH.c_N0J">
            <summary>
            2.824: PidTagInConflict.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_O0J">
            <summary>
            2.825: Contains a value that specifies an index of a property group within a property group mapping currently in context.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_P0J">
            <summary>
            2.826: PidTagIncrSyncChg.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Q0J">
            <summary>
            2.827: PidTagIncrSyncChgPartial.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_R0J">
            <summary>
            2.828: PidTagIncrSyncDel.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_S0J">
            <summary>
            2.829: PidTagIncrSyncEnd.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_T0J">
            <summary>
            2.830: PidTagIncrSyncGroupId.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_U0J">
            <summary>
            2.831: PidTagIncrSyncGroupInfo.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_V0J">
            <summary>
            2.832: PidTagIncrSyncMessage.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_W0J">
            <summary>
            2.833: PidTagIncrSyncProgressMode.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_X0J">
            <summary>
            2.834: PidTagIncrSyncProgressPerMsg.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Y0J">
            <summary>
            2.835: PidTagIncrSyncRead.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Z0J">
            <summary>
            2.836: PidTagIncrSyncStateBegin.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_A1J">
            <summary>
            2.837: PidTagIncrSyncStateEnd.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_B1J">
            <summary>
            2.838: Contains which page of a display template to display first.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_C1J">
            <summary>
            2.839: Contains the initials for parts of the full name of the mail user.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_D1J">
            <summary>
            2.840: Contains the original message's PidTagInternetMessageId (section 2.847) value.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_E1J">
            <summary>
            2.841: Contains an object on an NSPI server.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_F1J">
            <summary>
            2.842: Contains an identifier for a single instance of a row in the table.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_G1J">
            <summary>
            2.843: Contains an identifier for all instances of a row in the table.
            Data Type: Integer64.
            </summary>
        </member>
        <member name="F:c_ZGH.c_H1J">
            <summary>
            2.844: PidTagInternetArticleNumber.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_J1J">
            <summary>
            2.845: Code page used for PidTagBody or PidTagBodyHtml.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_K1J">
            <summary>
            2.846: Indicates the encoding method and HTML inclusion for attachments.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_M1J">
            <summary>
            2.847: Corresponds to the message-id field.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_L1J">
            <summary>
            2.848: PidTagInternetReferences.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_N1J">
            <summary>
            2.849: PidTagIpmAppointmentEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_O1J">
            <summary>
            2.850: PidTagIpmContactEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_P1J">
            <summary>
            2.851: PidTagIpmDraftsEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Q1J">
            <summary>
            2.852: PidTagIpmJournalEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_R1J">
            <summary>
            2.853: PidTagIpmNoteEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_S1J">
            <summary>
            2.854: PidTagIpmTaskEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_T1J">
            <summary>
            2.855: Contains the mail user's ISDN-capable telephone number.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_U1J">
            <summary>
            2.856: Contains a flag that indicates that a message has been read, but not marked as read.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_V1J">
            <summary>
            2.857: Indicates whether e-mail recipients are to be added to the safe senders list or not.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_W1J">
            <summary>
            2.858: Indicates whether e-mail addresses of the contacts in the Contacts folder are treated in a special way 
            with respect to the spam filter.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_X1J">
            <summary>
            2.859: Indicates whether messages identified as spam can be permanently deleted.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Y1J">
            <summary>
            2.860: Indicated whether the phishing stamp on a message is to be ignored.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Z1J">
            <summary>
            2.861: Indicates how aggressively incoming e-mail is to be sent to the Junk E-mail folder.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_A2J">
            <summary>
            2.862: Contains a keyword that identifies the mail user to the mail user's system administrator.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_B2J">
            <summary>
            2.863: Contains a value that indicates the language in which the messaging user is writing messages.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_C2J">
            <summary>
            2.864: Contains the time of the last modification to the object in UTC.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_D2J">
            <summary>
            2.865: PidTagLastModifierEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WMH">
            <summary>
            2.866: Contains the name of the last mail user to modify the object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_E2J">
            <summary>
            2.867: PidTagLastModifierSimpleDisplayName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZHH">
            <summary>
            2.868: Specifies the last verb executed for the message item to which it is related.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BJH">
            <summary>
            2.869: Contains the date and time, in UTC, during which the operation represented in PidTagLastVerbExecuted (section 2.868) took place.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_F2J">
            <summary>
            2.870: PidTagListHelp.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_G2J">
            <summary>
            2.871: PidTagListSubscribe.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_H2J">
            <summary>
            2.872: PidTagListUnsubscribe.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_J2J">
            <summary>
            2.873: Contains the time a RopCreateMessage ([MS-OXCROPS] section 2.2.6.2) was processed.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_K2J">
            <summary>
            2.874: Contains the Logon object LocaleID.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_M2J">
            <summary>
            2.875: Contains the name of the mail user's locality, such as the town or city.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_L2J">
            <summary>
            2.876: Contains the location of the mail user in a format that is useful to the mail user's organization.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_N2J">
            <summary>
            2.877: The EntryID in the Global Address List GAL of the owner of the mailbox.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_O2J">
            <summary>
            2.878: Display name of the owner of the mailbox.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_P2J">
            <summary>
            2.879: Contains the name of the mail user's manager.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Q2J">
            <summary>
            2.880: A 16-byte constant that is present on all Address Book objects, but is not present on objects in an offline address book.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_R2J">
            <summary>
            2.881: Maximum size, in kilobytes, of a message a user is allowed to submit for transmission to another user.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_S2J">
            <summary>
            2.882: Contains a unique identifier that the messaging server generates for each user.
            Data Type: Integer64.
            </summary>
        </member>
        <member name="F:c_ZGH.c_T2J">
            <summary>
            2.883: Contains the user-readable name of the user.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_U2J">
            <summary>
            2.884: Contains the permissions for the specified user.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_V2J">
            <summary>
            2.885: Identifies all attachments to the current message.
            Data Type: Object.
            </summary>
        </member>
        <member name="F:c_ZGH.c_W2J">
            <summary>
            2.886: PidTagMessageCcMe.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_X2J">
            <summary>
            2.887: Denotes the specific type of the Message object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Y2J">
            <summary>
            2.888: Specifies the code page used to encode the non-Unicode string properties on this Message object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LHH">
            <summary>
            2.889: Contains the date and time when a message was delivered.
            This property describes the time the message was stored at the server,
            rather than the download time when the transport provider copied the message from the server to the local store.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Z2J">
            <summary>
            2.890: PidTagMessageEditorFormat.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_A3J">
            <summary>
            2.891: Specifies the status of the Message object.
            Contains a bitmask of flags that indicate the origin and current state of a message. 
            Data Type: Integer32.
            </summary>
            <remarks>
            This property is a nontransmittable message property exposed at both the sending and receiving ends of a transmission, 
            with different values depending upon the client application or store provider involved. This property is initialized by the client or 
            message store provider when a message is created and saved for the first time and then updated periodically by the message store provider, 
            a transport provider, and the MAPI spooler as the message is processed and its state changes.
            This property exists on a message both before and after submission, and on all copies of the received message. 
            Although it is not a recipient property, it is exposed differently to each recipient according to whether it has been read or 
            modified by that recipient.
            One or more of the following flags can be set for this property:
            <table>
            <tr><th>Name</th><th>Value</th><th>Description</th></tr>
            <tr><td>mfRead</td><td>0x0001</td><td>The message is marked as having been read.</td></tr>
            <tr><td>mfUnsent </td><td>0x0008</td><td>The message is still being composed. This bit is cleared by the server when responding to RopSubmitMessage with a success code. See [MS-OXOMSG] for details.</td></tr>
            <tr><td>mfResend</td><td>0x0080</td><td>The message includes a request for a resend operation with a non-delivery report. See [MS-OXOMSG] for details.</td></tr>
            </table>
            These flags are always read-only for the client:
            <table>
            <tr><th>Type</th><th>Value</th><th>Description</th></tr>
            <tr><td>mfUnmodified</td><td>0x0002</td><td>The message has not been modified since it was first saved (if unsent) or it was delivered (if sent).</td></tr>
            <tr><td>mfSubmitted</td><td>0x0004</td><td>The message is marked for sending as a result of a call to RopSubmitMessage [MS-OXOMSG].</td></tr>
            <tr><td>mfHasAttach</td><td>0x0010</td><td>The message has at least one attachment. This flag corresponds to the message's PidTagHasAttachmentsproperty.</td></tr>
            <tr><td>mfFromMe </td><td>0x0020</td><td>The user receiving the message was also the user who sent the message.</td></tr>
            <tr><td>mfFAI</td><td>0x0040</td><td>The message is an FAI message.</td></tr>
            <tr><td>mfNotifyRead</td><td>0x0100</td><td>The user who sent the message has requested notification when a recipient first reads it.</td></tr>
            <tr><td>mfNotifyUnread</td><td>0x0200</td><td>The user who sent the message has requested notification when a recipient deletes it before reading or the Message object expires as specified in [MS-OXOMSG].</td></tr>
            <tr><td>mfEverRead</td><td>0x0400</td><td>The message has been read at least once. This flag is set or cleared by the server whenever the <strong>mfRead</strong> flag is set or cleared.</td></tr>
            <tr><td>mfInternet</td><td>0x2000</td><td>The incoming message arrived over the Internet and originated either outside the organization or from a source the gateway does not consider trusted.</td></tr>
            <tr><td>mfUntrusted</td><td>0x8000</td><td>The incoming message arrived over an external link other than X.400 or the Internet. It originated either outside the organization or from a source the gateway does not consider trusted.</td></tr>
            </table>
            MSGFLAG_ASSOCIATED
                The message is an associated message of a folder. The client or provider has read-only access to this flag. 
            	The MSGFLAG_READ flag is ignored for associated messages, which do not retain a read/unread state. 
            MSGFLAG_FROMME
                The messaging user sending was the messaging user receiving the message. The client or provider has read/write access to this flag 
            	until the first IMAPIProp::SaveChanges call and read-only thereafter. This flag is meant to be set by the transport provider. 
            MSGFLAG_HASATTACH
                The message has at least one attachment. This flag corresponds to the message's PR_HASATTACH (PidTagHasAttachments) property. 
            	The client has read-only access to this flag. 
            MSGFLAG_NRN_PENDING
                A nonread report needs to be sent for the message. The client or provider has read-only access to this flag. 
            MSGFLAG_ORIGIN_INTERNET
                The incoming message arrived over the Internet. It originated either outside the organization or from a source 
            	the gateway cannot consider trusted. The client should display an appropriate message to the user. Transport providers set this flag; 
            	the client has read-only access. 
            MSGFLAG_ORIGIN_MISC_EXT
                The incoming message arrived over an external link other than X.400 or the Internet. It originated either outside the organization or 
            	from a source the gateway cannot consider trusted. The client should display an appropriate message to the user. 
            	Transport providers set this flag; the client has read-only access. 
            MSGFLAG_ORIGIN_X400
                The incoming message arrived over an X.400 link. It originated either outside the organization or from a source 
            	the gateway cannot consider trusted. The client should display an appropriate message to the user. 
            	Transport providers set this flag; the client has read-only access. 
            MSGFLAG_READ
                The message is marked as having been read. This can occur as the result of a call at any time to IMessage::SetReadFlag or 
            	IMAPIFolder::SetReadFlags. Clients can also set this flag by calling a message's IMAPIProp::SetProps method before the message has been saved 
            	for the first time. This flag is ignored if the MSGFLAG_ASSOCIATED flag is set. 
            MSGFLAG_RESEND
                The message includes a request for a resend operation with a nondelivery report. The client or provider has read/write access to this flag 
            	until the first IMAPIProp::SaveChanges call and read-only thereafter. 
            MSGFLAG_RN_PENDING
                A read report needs to be sent for the message. The client or provider has read-only access to this flag. 
            MSGFLAG_SUBMIT
                The message is marked for sending as a result of a call to IMessage::SubmitMessage. Message store providers set this flag; 
            	the client has read-only access. 
            MSGFLAG_UNMODIFIED
                The outgoing message has not been modified since the first time that it was saved; 
            	the incoming message has not been modified since it was delivered. 
            MSGFLAG_UNSENT
                The message is still being composed. It is saved, but has not been sent. 
            	The client or provider has read/write access to this flag until the first IMAPIProp::SaveChanges call and read-only thereafter. 
            	If a client doesn't set this flag by the time the message is sent, the message store provider sets it when IMessage::SubmitMessage is called. 
            	Typically, this flag is cleared after the message is sent.
            A client or message store provider can check the current state of the message at any time by calling the IMAPIProp::GetProps method 
            to read the flag values. The client or provider can also call the IMAPIProp::SetProps method to change any flags that currently have read/write access.
            Several of the flags are always read-only. Some are read/write until the first call to the IMAPIProp::SaveChanges method 
            and thereafter become read-only as far as IMAPIProp::SetProps is concerned. 
            One of these, MSGFLAG_READ, can be changed later through IMessage::SetReadFlag or IMAPIFolder::SetReadFlags.
            The initial values for this property are typically MSGFLAG_UNSENT and MSGFLAG_UNMODIFIED to indicate a message that has not yet been sent or changed. 
            When a message is saved for the second time, the message store provider clears the MSGFLAG_UNMODIFIED flag. 
            Another value that a message store provider can set when a message is saved is the MSGFLAG_HASATTACH flag, 
            indicating that the message has one or more attachments. The PR_HASATTACH property is computed from this setting.
            When a client calls the IMessage::SubmitMessage method to send the message, the message store provider makes a copy of it for the MAPI spooler 
            and updates this property by setting the MSGFLAG_SUBMIT flag. The message store provider also sets MSGFLAG_UNSENT if it is not yet set. 
            MSGFLAG_SUBMIT indicates that SubmitMessage has been called, beginning the send process, and that the message is now read-only to the client. 
            MSGFLAG_UNSENT indicates that the MAPI spooler is handling the message. If the send process is canceled, the message store provider resets this flag.
            When the message is given to a transport provider for delivery, the transport provider sets the MSGFLAG_FROMME flag 
            if the sender had the same account on the messaging server as the message was received on. 
            Transport providers set MSGFLAG_FROMME for an incoming message that was sent by the currently logged on user. 
            A client can use this value to determine that it is more appropriate to show recipient names in the contents table of the Sent Items folder 
            than sender names. Messages that have been saved during the composition process and not yet sent should also be displayed with recipient names 
            rather than sender names.
            For an incoming message, a message store provider clears the MSGFLAG_READ flag to reset its read status. 
            A client can set or clear the MSGFLAG_READ flag when it is necessary to change the read status and control the sending of read and nonread reports, 
            by calling either the message's IMessage::SetReadFlag method or its folder's IMAPIFolder::SetReadFlags method. 
            The main difference between these methods, other than the object implementing them, is that the folder method can affect one, several, or all 
            of the messages in the folder. The message method affects a single message.
            A client should also test an incoming message for the MSGFLAG_ORIGIN_X400, MSGFLAG_ORIGIN_INTERNET, and MSGFLAG_ORIGIN_MISC_EXT flags. 
            These flags are set by the inbound transport provider and indicate that the message arrived from a source that the gateway cannot consider trusted. 
            This means the message originated either outside the organization, or internally but from a workstation not known to the gateway. 
            In any case, the identity of the sender may not be confirmed, and there is a risk of introducing a computer virus into the organization. 
            The client should display a warning message to the user and offer an option of deleting the message without opening it.
            Message store providers set the MSGFLAG_UNMODIFIED flag for incoming messages. 
            MSGFLAG_UNMODIFIED indicates that a message has not been changed since delivery. 
            A client cannot clear this value after it has been set by a message store provider. 
            </remarks>
        </member>
        <member name="F:c_ZGH.c_B3J">
            <summary>
            2.892: Contains the common name of a messaging user for use in a message header.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_C3J">
            <summary>
            2.893: Contains the Windows Locale ID of the end-user who created this message.
            Contains the Windows LCID of the end user who created this message.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_D3J">
            <summary>
            2.894: Indicates that the receiving mailbox owner is a primary or a carbon copy (Cc) recipient of this e-mail message.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_E3J">
            <summary>
            2.895: Identifies all recipients of the current message.
            Data Type: Object.
            </summary>
        </member>
        <member name="F:c_ZGH.c_F3J">
            <summary>
            2.896: Contains the size in bytes consumed by the Message object on the server.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_G3J">
            <summary>
            2.897: Specifies the 64-bit version of the PidTagNormalMessageSize property (section 2.911).
            Data Type: Integer64.
            </summary>
        </member>
        <member name="F:c_ZGH.c_H3J">
            <summary>
            2.898: Specifies the status of a message in a contents table.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_J3J">
            <summary>
            2.899: PidTagMessageSubmissionId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_K3J">
            <summary>
            2.900: Indicates that the receiving mailbox owner is one of the primary recipients of this e- mail message.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_M3J">
            <summary>
            2.901: Contains a value that contains the MID of the message currently being synchronized.
            Data Type: Integer64.
            </summary>
        </member>
        <member name="F:c_ZGH.c_L3J">
            <summary>
            2.902: Specifies the middle name(s) of the contact.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_N3J">
            <summary>
            2.903: PidTagMimeSkeleton.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_O3J">
            <summary>
            2.904: Contains the mail user's cellular telephone number.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_P3J">
            <summary>
            2.905: Indicates the best available format for storing the message body.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Q3J">
            <summary>
            2.906: PidTagNewAttach.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_R3J">
            <summary>
            2.907: Contains a value that provides information about alternative replicas for a public folder in context.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_S3J">
            <summary>
            2.908: Specifies the server that a client is currently attempting to use to send e-mail.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_T3J">
            <summary>
            2.909: Contains the mail user's nickname.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_U3J">
            <summary>
            2.910: Contains the normalized subject of the message.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_V3J">
            <summary>
            2.911: PidTagNormalMessageSize.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UPJ">
            <summary>
            2.912: Indicates the type of Server object.
            Data Type: Integer32.
            </summary>
            <remarks>
            <table>
            <tr><td>0x0001</td><td>MAPI_STORE</td><td>Message store</td></tr>
            <tr><td>0x0002</td><td>MAPI_ADDRBOOK</td><td>Address book</td></tr>
            <tr><td>0x0003</td><td>MAPI_FOLDER</td><td>Folder</td></tr>
            <tr><td>0x0004</td><td>MAPI_ABCONT</td><td>Address book container</td></tr>
            <tr><td>0x0005</td><td>MAPI_MESSAGE</td><td>Message</td></tr>
            <tr><td>0x0006</td><td>MAPI_MAILUSER</td><td>(Individual) Recipient</td></tr>
            <tr><td>0x0007</td><td>MAPI_ATTACH</td><td>Attachment</td></tr>
            <tr><td>0x0008</td><td>MAPI_DISTLIST</td><td>Distribution list (recipient)</td></tr>
            <tr><td>0x0009</td><td>MAPI_PROFSECT</td><td>Profile section</td></tr>
            <tr><td>0x000a</td><td>MAPI_STATUS</td><td>Status object</td></tr>
            <tr><td>0x000b</td><td>MAPI_SESSION</td><td>Session</td></tr>
            <tr><td>0x000c</td><td>MAPI_FORMINFO</td><td>Form information</td></tr>
            </table>
            </remarks>
        </member>
        <member name="F:c_ZGH.c_W3J">
            <summary>
            2.913: Contains the mail user's office location.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_X3J">
            <summary>
            2.914: Contains the compressed size of the offline address book.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Y3J">
            <summary>
            2.915: A string formatted GUID that represents the address list container object.
            Data Type: String8.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Z3J">
            <summary>
            2.916: The addresslist-X500-dn of the address list container object.
            Data Type: String8.
            </summary>
        </member>
        <member name="F:c_ZGH.c_A4J">
            <summary>
            2.917: Contains the uncompressed size of the offline address book.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_B4J">
            <summary>
            2.918: Contains the file type of the offline address book.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_C4J">
            <summary>
            2.919: Contains the language id used in the offline address book.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_D4J">
            <summary>
            2.920: Contains the message class for full OAB messages.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_E4J">
            <summary>
            2.921: Contains the display name of the address list.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_F4J">
            <summary>
            2.922: The sequence number of the OAB.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_G4J">
            <summary>
            2.923: Contains the hash function used to encode objects in the offline address book.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_H4J">
            <summary>
            2.924: Contains a list of the property tags that have been truncated or limited by the server.
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_J4J">
            <summary>
            2.925: Contains a positive number whose negative is less than or equal to the value of PidLidTaskOrdinal (section 2.325) 
            of all Task objects in the folder.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_K4J">
            <summary>
            2.926: Contains an identifier for the mail user used within the mail user's organization.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HJH">
            <summary>
            2.927: Contains the delivery time from the original message.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MJH">
            <summary>
            2.928: Contains the value of PidTagDisplayBcc (section 2.746) from the original message.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KJH">
            <summary>
            2.929: Contains the value of PidTagDisplayCc (section 2.747) from the original message.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LJH">
            <summary>
            2.930: Contains a display name.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JJH">
            <summary>
            2.931: Contains the value of PidTagDisplayTo (section 2.750) from the original message.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_M4J">
            <summary>
            2.932: Contains the original entry ID of an object.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_L4J">
            <summary>
            2.933: PidTagOriginalMessageClass.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_N4J">
            <summary>
            2.934: PidTagOriginalMessageId.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_O4J">
            <summary>
            2.935: Contains a search key.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RJH">
            <summary>
            2.936: Contains the value of the original message sender's PidTagSenderAddressType (section 2.1113).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SJH">
            <summary>
            2.937: Contains the value of the original message sender's PidTagSenderEmailAddress property (section 2.1114).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_P4J">
            <summary>
            2.938: Contains an address book Entry ID that is set on delivery report messages, 
            to the value of the PidTagSenderEntryId property (section 2.1115) from the original message.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QJH">
            <summary>
            2.939: Contains the value of the original message sender's PidTagSenderName property (section 2.1118), 
            and is set on delivery report messages.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Q4J">
            <summary>
            2.940: Contains an address book search key set on the original e-mail message.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_R4J">
            <summary>
            2.941: Contains the sensitivity value of the original e-mail message.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OJH">
            <summary>
            2.942: Contains the address type of the end user who is represented by the original e-mail message sender.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PJH">
            <summary>
            2.943: Contains the e-mail address of the end user who is represented by the original e-mail message sender.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_S4J">
            <summary>
            2.944: Identifies an address book EntryID that contains the entry identifier of the end user 
            who is represented by the original message sender.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NJH">
            <summary>
            2.945: Contains the display name of the end user who is represented by the original e-mail message sender.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_T4J">
            <summary>
            2.946: Identifies an address book search key that contains the SearchKey of the end user 
            who is represented by the original message sender.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DJH">
            <summary>
            2.947: Specifies the subject of the original message.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GJH">
            <summary>
            2.948: Specifies the original e-mail message's submission date and time.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_U4J">
             <summary>
             2.949: Indicates whether an e-mail sender requests an e-mail delivery receipt from the messaging system.
             Contains TRUE if a message sender requests a delivery report for a particular recipient from the messaging system 
             before the message is placed in the message store.
             Data Type: Boolean.
             </summary>
             <remarks>
             This property is used to direct the messaging system in handling delivered messages. In this case, 
             the message must also furnish the PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED (PidTagOriginatorNonDeliveryReportRequested) property set to FALSE.
             Setting the PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED property on a message is a way to request delivery status reports for all recipients. 
            </remarks>
        </member>
        <member name="F:c_ZGH.c_V4J">
            <summary>
            2.950: Specifies whether an e-mail sender requests suppression of nondelivery receipts.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_W4J">
            <summary>
            2.951: Contains the name of the mail user's other locality, such as the town or city.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_X4J">
            <summary>
            2.952: Contains the name of the mail user's other country/region.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Y4J">
            <summary>
            2.953: Contains the postal code for the mail user's other postal address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Z4J">
            <summary>
            2.954: Contains the number or identifier of the mail user's other post office box.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_A5J">
            <summary>
            2.955: Contains the name of the mail user's other state or province.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_B5J">
            <summary>
            2.956: Contains the mail user's other street address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_C5J">
            <summary>
            2.957: Contains an alternate telephone number for the mail user.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_D5J">
            <summary>
            2.958: Indicates whether the user is OOF.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_E5J">
            <summary>
            2.959: Specifies a quasi-unique value among all Calendar objects in a user's mailbox.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_F5J">
            <summary>
            2.960: Contains the mail user's pager telephone number.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_G5J">
            <summary>
            2.961: Contains the entry ID of the folder where messages reside.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_H5J">
            <summary>
            2.962: Contains a value that contains the FID that identifies the parent folder of the messaging object being synchronized.
            Data Type: Integer64.
            </summary>
        </member>
        <member name="F:c_ZGH.c_J5J">
            <summary>
            2.963: Contains the search key that is used to correlate the original message and the reports about the original message.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_K5J">
            <summary>
            2.964: Contains a value on a folder that contains the PidTagSourceKey (section 2.1137) of the parent folder.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_M5J">
            <summary>
            2.965: Contains the Web address (URL) of the mail user's personal home page.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_L5J">
            <summary>
            2.966: PidTagPolicyTag.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_N5J">
            <summary>
            2.967: Contains the mail user's postal address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_O5J">
            <summary>
            2.968: Contains the postal code for the mail user's postal address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_P5J">
            <summary>
            2.969: Contains the number or identifier of the mail user's post office box.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Q5J">
            <summary>
            2.970: Contains a value that contains a serialized representation of a PredecessorChangeList structure.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_R5J">
            <summary>
            2.971: Contains the telephone number of the mail user's primary fax machine.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_S5J">
            <summary>
            2.972: Specifies the first server that a client is to use to send the e-mail with.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_T5J">
            <summary>
            2.973: PidTagPrimarySmtpAddress.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_U5J">
            <summary>
            2.974: Contains the mail user's primary telephone number.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_V5J">
            <summary>
            2.975: Indicates the client's request for the priority at which the message is to be sent by the messaging system.
            Data Type: Integer32.
            </summary>
            <remarks>
            This property and the PR_IMPORTANCE (PidTagImportance) property should not be confused. Importance indicates a value to users, 
            while priority indicates the order or speed at which the message should be sent by the messaging system software. 
            Higher priority usually indicates a higher cost. Higher importance usually is associated with a different display by the user interface.
            The priority of a report message should be the same as the priority of the original message being reported.
            This property can have exactly one of the following values:
            PRIO_NONURGENT
                The message is not urgent.
            PRIO_NORMAL
                The message has normal priority.
            PRIO_URGENT
                The message is urgent.
            </remarks>
        </member>
        <member name="F:c_ZGH.c_W5J">
            <summary>
            2.976: Indicates whether a client has already processed a received task communication.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_X5J">
            <summary>
            2.977: Contains the name of the mail user's line of business.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Y5J">
            <summary>
            2.978: Maximum size, in kilobytes, a user is allowed to accumulate in their mailbox, 
            before no further e-mail will be delivered.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Z5J">
            <summary>
            2.979: Maximum size, in kilobytes, a user is allowed to accumulate in their mailbox, 
            before the user can no longer submit any more e-mail.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_A6J">
            <summary>
            2.980: PidTagProviderSubmitTime.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_B6J">
            <summary>
            2.981: PidTagPublicFolderAdministrativeDescription.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_C6J">
            <summary>
            2.982: PidTagPublicFolderProxy.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_D6J">
            <summary>
            2.983: PidTagPurportedSenderDomain.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_E6J">
            <summary>
            2.984: Contains the mail user's radio telephone number.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_F6J">
            <summary>
            2.985: PidTagRead.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_G6J">
            <summary>
            2.986: PidTagReadReceiptAddressType.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_H6J">
            <summary>
            2.987: PidTagReadReceiptEmailAddress.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_J6J">
            <summary>
            2.988: Contains an address book EntryID.
            Contains an entry identifier for the messaging user where the messaging system should direct a read report for this message.
            Data Type: Binary.
            </summary>
            <remarks>
            This property is ignored unless the PR_READ_RECEIPT_REQUESTED (PidTagReadReceiptRequested) property is set to TRUE.
            If a client application wants to receive read reports itself, it can leave this property unset or set it to the entry identifier 
            contained in the PR_SENDER_ENTRYID (PidTagSenderEntryId) property at message submission time.
            </remarks>
        </member>
        <member name="F:c_ZGH.c_K6J">
            <summary>
            2.989: PidTagReadReceiptName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_M6J">
            <summary>
            2.990: Specifies whether the e-mail sender requests a read receipt from all recipients when this e-mail message is read or opened.
            Contains TRUE if a message sender wants the messaging system to generate a read report when the recipient has read a message.
            Data Type: Boolean.
            </summary>
            <remarks>
            This property must be set to TRUE to validate the values in the PR_READ_RECEIPT_ENTRYID (PidTagReadReceiptEntryId) and 
            PR_READ_RECEIPT_SEARCH_KEY (PidTagReadReceiptSearchKey) properties.
            If a message with PR_READ_RECEIPT_REQUESTED set is deleted or expires before the messaging system can generate a read report, 
            a nonread report is generated.
            </remarks>
        </member>
        <member name="F:c_ZGH.c_L6J">
            <summary>
            2.991: Contains an address book search key.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_N6J">
            <summary>
            2.992: Contains the e-mail message receiver's e-mail address type.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_O6J">
            <summary>
            2.993: Contains the e-mail message receiver's e-mail address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_P6J">
            <summary>
            2.994: Identifies an address book EntryID that contains the e-mail message receiver of the E-mail object.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Q6J">
            <summary>
            2.995: PidTagReceivedByFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_R6J">
            <summary>
            2.996: Contains the e-mail message receiver's display name.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_S6J">
            <summary>
            2.997: Identifies an address book search key that contains a binary-comparable key that is used to identify 
            correlated objects for a search.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_T6J">
            <summary>
            2.998: Contains the e-mail address type for the end user represented by the receiving mailbox owner.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_U6J">
            <summary>
            2.999: Contains the e-mail address for the end user represented by the receiving mailbox owner.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_V6J">
            <summary>
            2.1000: Contains an address book EntryID that identifies the end user represented by the receiving mailbox owner.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_W6J">
            <summary>
            2.1001: PidTagReceivedRepresentingFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_X6J">
            <summary>
            2.1002: Contains the display name, for the end user represented by the receiving mailbox owner.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Y6J">
            <summary>
            2.1003: Identifies an address book search key that contains a binary-comparable key of the end user 
            represented by the receiving mailbox owner.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Z6J">
            <summary>
            2.1004: PidTagReceivedRepresentingSimpleDisplayName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_A7J">
            <summary>
            2.1005: Contains the value of the PidTagDisplayName property.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_B7J">
            <summary>
            2.1006: PidTagRecipientEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_C7J">
            <summary>
            2.1007: Specifies a bit field that describes the recipient status.
            Data Type: Integer32.
            </summary>
            <remarks>
            This property is not required. The following are the individual flags that can be set.
            <table>
            <tr><td>S (recipSendable, 0x00000001)</td>
            <td>The recipient is a Sendable Attendee. 
            	This flag is only used in the dispidApptUnsendableRecips (PidLidAppointmentUnsendableRecipients) property.</td></tr>
            <tr><td>O (recipOrganizer, 0x0000002)</td>
            <td>The RecipientRow on which this flag is set represents the meeting Organizer.</td></tr>
            <tr><td>ER (recipExceptionalResponse, 0x00000010)</td>
            <td>Indicates that the attendee gave a response for the exception on which this RecipientRow resides. 
            	This flag is only used in a RecipientRow of an exception embedded message object of the organizer's meeting object.</td></tr>
            <tr><td>ED (recipExceptionalDeleted, 0x00000020)</td>
            <td>Indicates that although the RecipientRow exists, it should be treated as if the corresponding recipient does not. 
            	This flag is only used in a RecipientRow of an exception embedded message object of the organizer's meeting object.</td></tr>
            <tr><td>X (reserved, 0x00000040)</td>
            <td>Must not be set.</td></tr>
            <tr><td>X (reserved, 0x00000080)</td>
            <td>Must not be set.</td></tr>
            <tr><td>G (recipOriginal, 0x00000100)</td>
            <td>Indicates the recipient is an original attendee. This flag is only used in the dispidApptUnsendableRecips property.</td></tr>
            <tr><td>X (reserved, 0x00000200)</td>
            <td>Reserved.</td></tr>
            </table>
            </remarks>
        </member>
        <member name="F:c_ZGH.c_D7J">
            <summary>
            2.1008: PidTagRecipientOrder.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_E7J">
            <summary>
            2.1009: PidTagRecipientProposed.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_F7J">
            <summary>
            2.1010: PidTagRecipientProposedEndTime.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_G7J">
            <summary>
            2.1011: PidTagRecipientProposedStartTime.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_H7J">
            <summary>
            2.1012: Specifies whether adding additional or different recipients is prohibited for the e-mail message, 
            when forwarding the e-mail message.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_J7J">
            <summary>
            2.1013: PidTagRecipientResourceState.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_K7J">
            <summary>
            2.1014: PidTagRecipientTrackStatus.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_M7J">
            <summary>
            2.1015: PidTagRecipientTrackStatusTime.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_L7J">
            <summary>
            2.1016: Represents the recipient type of a recipient on the message.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FQJ">
            <summary>
            2.1017: Contains a unique binary-comparable identifier for a specific object.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_N7J">
            <summary>
            2.1018: Contains the name of the mail user's referral.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_O7J">
            <summary>
            2.1019: PidTagRemindersOnlineEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_P7J">
            <summary>
            2.1020: PidTagRemoteHeaderLoc.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Q7J">
            <summary>
            2.1021: PidTagRemoteMessageTransferAgent.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VMH">
            <summary>
            2.1022: Represents an offset, in rendered characters, to use when rendering an attachment within the main message text.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_R7J">
            <summary>
            2.1023: Identifies a FlatEntryList of address book EntryIDs for recipients that are to get a reply.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_S7J">
            <summary>
            2.1024: Contains a list of display names for recipients that are to get a reply.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_T7J">
            <summary>
            2.1025: Indicates whether a reply is requested to a Message object.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_U7J">
            <summary>
            2.1026: PidTagReplyTemplateId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_V7J">
            <summary>
            2.1027: Specifies the due time that the sender wants for an associated work item.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_W7J">
            <summary>
            2.1028: PidTagReportEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_X7J">
            <summary>
            2.1029: PidTagReportingMessageTransferAgent.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Y7J">
            <summary>
            2.1030: PidTagReportName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Z7J">
            <summary>
            2.1031: PidTagReportSearchKey.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_A8J">
            <summary>
            2.1032: Contains the data that is used to correlate the report and the original message.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_EJH">
            <summary>
            2.1033: Contains the optional text for a report message.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FJH">
            <summary>
            2.1034: Indicates the last time the contact list that is controlled by PidTagJunkIncludeContacts (section 2.858) was updated.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_B8J">
            <summary>
            2.1035: PidTagResolveMethod.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_C8J">
            <summary>
            2.1036: Indicates whether a response is requested to a Message object.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_D8J">
            <summary>
            2.1037: PidTagResponsibility.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_E8J">
            <summary>
            2.1038: Specifies the date, in UTC, after which a Message object is expired by the server.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_F8J">
            <summary>
            2.1039: PidTagRetentionFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_G8J">
            <summary>
            2.1040: PidTagRetentionPeriod.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_H8J">
            <summary>
            2.1041: Specifies a user's folder permissions.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_J8J">
            <summary>
            2.1042: PidTagRoamingDatatypes.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_K8J">
            <summary>
            2.1043: PidTagRoamingDictionary.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_M8J">
            <summary>
            2.1044: PidTagRoamingXmlStream.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_L8J">
            <summary>
            2.1045: PidTagRowId.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_N8J">
            <summary>
            2.1046: Identifies the type of the row.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_O8J">
            <summary>
            2.1047: Contains message body text in RTF format.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MKH">
            <summary>
            2.1048: Indicates whether the PidTagBody (section 2.685) and PidTagRtfCompressed (section 2.1047) 
            properties contain the same text (ignoring formatting).
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_P8J">
            <summary>
            2.1049: Contains a count of the significant characters of the message text.
            Data Type: Integer32.
            </summary>
            <remarks>
            The RTFSync function computes the count of characters in the text using only those that it considers to be significant to the message. 
            For example, some white space and other ignorable characters are omitted from the count.
            This property is a Rich Text Format (RTF) auxiliary property. These properties are used by the RTFSync function and are not intended to be used directly by client applications.
            </remarks>
        </member>
        <member name="F:c_ZGH.c_Q8J">
            <summary>
            2.1050: PidTagRtfSyncBodyCrc.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_R8J">
            <summary>
            2.1051: PidTagRtfSyncBodyTag.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_S8J">
            <summary>
            2.1052: PidTagRtfSyncPrefixCount.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_T8J">
            <summary>
            2.1053: PidTagRtfSyncTrailingCount.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_U8J">
            <summary>
            2.1054: PidTagRuleActionNumber.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_V8J">
            <summary>
            2.1055: PidTagRuleActions.
            Data Type: RuleAction.
            </summary>
        </member>
        <member name="F:c_ZGH.c_W8J">
            <summary>
            2.1056: PidTagRuleActionType.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_X8J">
            <summary>
            2.1057: PidTagRuleCondition.
            Data Type: Restriction.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Y8J">
            <summary>
            2.1058: PidTagRuleError.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Z8J">
            <summary>
            2.1059: PidTagRuleFolderEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_A9J">
            <summary>
            2.1060: PidTagRuleId.
            Data Type: Integer64.
            </summary>
        </member>
        <member name="F:c_ZGH.c_B9J">
            <summary>
            2.1061: Contains a buffer obtained by concatenating the PidTagRuleId (section 2.1060) 
            values from all rules contributing actions that are contained in the PidTagClientActions (section 2.702) property.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_C9J">
            <summary>
            2.1062: PidTagRuleLevel.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_D9J">
            <summary>
            2.1063: PidTagRuleMessageLevel.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_E9J">
            <summary>
            2.1064: PidTagRuleMessageName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_F9J">
            <summary>
            2.1065: PidTagRuleMessageProvider.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_G9J">
            <summary>
            2.1066: PidTagRuleMessageProviderData.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_H9J">
            <summary>
            2.1067: PidTagRuleMessageSequence.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_J9J">
            <summary>
            2.1068: PidTagRuleMessageState.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_K9J">
            <summary>
            2.1069: PidTagRuleMessageUserFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_M9J">
            <summary>
            2.1070: PidTagRuleName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_L9J">
            <summary>
            2.1071: PidTagRuleProvider.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_N9J">
            <summary>
            2.1072: PidTagRuleProviderData.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_O9J">
            <summary>
            2.1073: PidTagRuleSequence.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_P9J">
            <summary>
            2.1074: PidTagRuleState.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Q9J">
            <summary>
            2.1075: PidTagRuleUserFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_R9J">
            <summary>
            2.1076: PidTagRwRulesStream.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_S9J">
            <summary>
            2.1077: Contains a list of tombstones, where each tombstone represents a Meeting object that has been declined.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_T9J">
            <summary>
            2.1078: Indicates whether a client or server is to automatically respond to all meeting requests for the attendee or resource.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_U9J">
            <summary>
            2.1079: PidTagScheduleInfoDelegateEntryIds.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_V9J">
            <summary>
            2.1080: PidTagScheduleInfoDelegateNames.
            Data Type: MultipleString.
            </summary>
        </member>
        <member name="F:c_ZGH.c_W9J">
            <summary>
            2.1081: PidTagScheduleInfoDelegateNamesW.
            Data Type: MultipleString.
            </summary>
        </member>
        <member name="F:c_ZGH.c_X9J">
            <summary>
            2.1082: PidTagScheduleInfoDelegatorWantsCopy.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Y9J">
            <summary>
            2.1083: PidTagScheduleInfoDelegatorWantsInfo.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_Z9J">
            <summary>
            2.1084: Indicates whether a client or server, when automatically responding to meeting requests, 
            is to decline instances that overlap with previously scheduled events.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_AAK">
            <summary>
            2.1085: Indicates whether a client or server, when automatically responding to meeting requests, 
            is to decline Meeting Request objects that represent a recurring series.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BAK">
            <summary>
            2.1086: PidTagScheduleInfoDontMailDelegates.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CAK">
            <summary>
            2.1087: PidTagScheduleInfoFreeBusy.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DAK">
            <summary>
            2.1088: PidTagScheduleInfoFreeBusyAway.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_EAK">
            <summary>
            2.1089: PidTagScheduleInfoFreeBusyBusy.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FAK">
            <summary>
            2.1090: PidTagScheduleInfoFreeBusyMerged.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GAK">
            <summary>
            2.1091: PidTagScheduleInfoFreeBusyTentative.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HAK">
            <summary>
            2.1092: PidTagScheduleInfoMonthsAway.
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JAK">
            <summary>
            2.1093: PidTagScheduleInfoMonthsBusy.
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KAK">
            <summary>
            2.1094: PidTagScheduleInfoMonthsMerged.
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MAK">
            <summary>
            2.1095: PidTagScheduleInfoMonthsTentative.
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LAK">
            <summary>
            2.1096: PidTagScheduleInfoResourceType.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NAK">
            <summary>
            2.1097: PidTagSchedulePlusFreeBusyEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OAK">
            <summary>
            2.1098: PidTagScriptData.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PAK">
            <summary>
            2.1099: PidTagSearchFolderDefinition.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QAK">
            <summary>
            2.1100: PidTagSearchFolderEfpFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RAK">
            <summary>
            2.1101: PidTagSearchFolderExpiration.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SAK">
            <summary>
            2.1102: PidTagSearchFolderId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TAK">
            <summary>
            2.1103: PidTagSearchFolderLastUsed.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UAK">
            <summary>
            2.1104: PidTagSearchFolderRecreateInfo.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VAK">
            <summary>
            2.1105: PidTagSearchFolderStorageType.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WAK">
            <summary>
            2.1106: PidTagSearchFolderTag.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XAK">
            <summary>
            2.1107: PidTagSearchFolderTemplateId.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YAK">
            <summary>
            2.1108: Contains a unique binary-comparable key that identifies an object for a search.
            Data Type: Binary.
            </summary>
            <remarks>
            This property provides a trace for related objects, such as message copies, and facilitates finding unwanted occurrences, such as duplicate recipients.
            MAPI uses specific rules for constructing search keys for message recipients. The search key is formed by concatenating the address type 
            (in uppercase characters), the colon character ':', the e-mail address in canonical form, and the terminating null character. 
            Canonical form here means that case-sensitive addresses appear in the correct case, 
            and addresses that are not case-sensitive are converted to uppercase. This is important in preserving correlations among messages.
            For message objects, this property is available through the IMAPIProp::GetProps method immediately following message creation. 
            For other objects, it is available following the first call to the IMAPIProp::SaveChanges method. Because this property is changeable, 
            it is unreliable to obtain it through GetProps until a SaveChanges call has committed any values set or changed by the IMAPIProp::SetProps method.
            For profiles, MAPI also furnishes a hard-coded profile section named MUID_PROFILE_INSTANCE, with this property as its single property. 
            This key is guaranteed to be unique among all profiles ever created, and can be more reliable than the PR_PROFILE_NAME (PidTagProfileName) property, 
            which can be, for example, deleted and recreated with the same name.
            </remarks>
        </member>
        <member name="F:c_ZGH.c_ZAK">
            <summary>
            2.1109: PidTagSecureSubmitFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ABK">
            <summary>
            2.1110: PidTagSecurityDescriptor.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BBK">
            <summary>
            2.1111: PidTagSecurityDescriptorAsXml.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CBK">
            <summary>
            2.1112: PidTagSelectable.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QHH">
            <summary>
            2.1113: Contains the sending mailbox owner's e-mail address type.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RHH">
            <summary>
            2.1114: Contains the contents of the 'email' element of the 'author' element in an Atom item if it exists.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DBK">
            <summary>
            2.1115: Identifies an address book EntryID that contains the sending mailbox owner's address book EntryID.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_EBK">
            <summary>
            2.1116: PidTagSenderFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FBK">
            <summary>
            2.1117: Reports the results of a Sender-ID check.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OHH">
            <summary>
            2.1118: Contains the sending mailbox owner's display name.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GBK">
            <summary>
            2.1119: Identifies an address book search key.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HBK">
            <summary>
            2.1120: PidTagSenderSimpleDisplayName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KMH">
            <summary>
            2.1121: PidTagSenderSmtpAddress.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JBK">
            <summary>
            2.1122: PidTagSenderTelephoneNumber.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KBK">
            <summary>
            2.1123: Contains a bitmask of message encoding preferences for e-mail sent 
            to an e-mail-enabled entity that is represented by this Address Book object.
            Data Type: Integer32.
            </summary>
            <remarks>
            When sending mail by using the RFC2822 and MIME to the E-mail Object Conversion protocol, as specified in [MS-OXCMAIL], 
            the PidTagSendInternetEncoding property specifies the format of the MIME body, as specified in [MS-OXCMAIL].
            PidTagSendInternetEncoding property contains the following flags:
            BODY_ENCODING_HTML: Encode the message text in HTML. This flag is ignored unless the ENCODING_MIME flag is set.
            BODY_ENCODING_TEXT_AND_HTML: Encode the message text using text and HTML 
              as Multipurpose Internet Mail Extensions (MIME) multipart alternatives. This flag is ignored unless the ENCODING_MIME flag is set.
            ENCODING_MIME: Encode the message using MIME. If this flag is not set, 
              MAPI encodes the message text in plain text and the attachments in UUENCODE.
            ENCODING_PREFERENCE: Use the other flags in this bitmask to determine the encoding. 
              If this flag is not set, MAPI leaves it to the messaging system to make encoding decisions.
            MAC_ATTACH_ENCODING_APPLEDOUBLE: Encode Macintosh attachments in Apple double mode. 
              This flag is ignored unless the ENCODING_MIME flag is set.
            MAC_ATTACH_ENCODING_APPLESINGLE: Encode Macintosh attachments in Apple single mode. 
              This flag is ignored unless the ENCODING_MIME flag is set.
            MAC_ATTACH_ENCODING_UUENCODE: Encode Macintosh attachments in UUENCODE. 
              If the ENCODING_MIME flag is set, this flag is ignored and BinHex encoding is used instead.
            </remarks>
        </member>
        <member name="F:c_ZGH.c_MBK">
            <summary>
            2.1124: Contains TRUE if the e-mail-enabled entity represented by the Address Book object can receive all message content, 
            including Rich Text Format (RTF) and other embedded objects.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LBK">
            <summary>
            2.1125: Indicates the sender's assessment of the sensitivity of the Message object.
            Contains a value that indicates the message sender's opinion of the sensitivity of a message.
            Data Type: Integer32.
            </summary>
            <remarks>
            It is recommended that message objects expose this property.
            This property can have exactly one of the following values:
            SENSITIVITY_NONE
                The message has no special sensitivity.
            SENSITIVITY_PERSONAL
                The message is personal.
            SENSITIVITY_PRIVATE
                The message is private.
            SENSITIVITY_COMPANY_CONFIDENTIAL
                The message is designated company confidential.
            </remarks>
        </member>
        <member name="F:c_ZGH.c_NBK">
            <summary>
            2.1126: Contains an EntryID that represents the Sent Items folder for the message.
            Data Type: ServerId.
            </summary>
        </member>
        <member name="F:c_ZGH.c_THH">
            <summary>
            2.1127: Contains an e-mail address type.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UHH">
            <summary>
            2.1128: Contains the contents of the 'email' element of the 'author' element in an Atom item, if it exists.
            Contains the e-mail address for the messaging user who is represented by the sender.
            Data Type: String.
            </summary>
            <remarks>
            These properties are examples of the address properties for the messaging user being represented by the sender. 
            When a client application sends a message on behalf of another client, it should set all the represented sender properties to the values for that client. 
            A messaging user sending on its own behalf typically leaves the represented sender properties unset.
            The outgoing transport provider must always leave these properties unchanged if it has been set by the sending client. 
            If it is unset, the transport provider should set it to the PR_SENDER_EMAIL_ADDRESS (PidTagSenderEmailAddress) property on the outbound copy of the message, 
            and leave it unset on the local copy.
            </remarks>
        </member>
        <member name="F:c_ZGH.c_OBK">
            <summary>
            2.1129: Identifies an address book EntryID.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PBK">
            <summary>
            2.1130: PidTagSentRepresentingFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SHH">
            <summary>
            2.1131: Contains the display name for the end user who is represented by the sending mailbox owner.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QBK">
            <summary>
            2.1132: Identifies an address book search key.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RBK">
            <summary>
            2.1133: PidTagSentRepresentingSimpleDisplayName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SBK">
            <summary>
            2.1134: PidTagSessionInitiationProtocolUri.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PMH">
            <summary>
            2.1135: Contains the Address Book object's SMTP address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TBK">
            <summary>
            2.1136: PidTagSortLocaleId.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UBK">
            <summary>
            2.1137: Contains a value that contains an internal global identifier (GID) for this folder or message.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VBK">
            <summary>
            2.1138: PidTagSpokenName.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WBK">
            <summary>
            2.1139: Contains the name of the mail user's spouse/partner.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XBK">
            <summary>
            2.1140: Contains the value of the PidLidAppointmentStartWhole property (section 2.29).
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YBK">
            <summary>
            2.1141: Contains two pieced of information: the default retention period, 
            and the start date from which the Message object's age is calculated.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZBK">
            <summary>
            2.1142: PidTagStartEmbed.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ACK">
            <summary>
            2.1143: PidTagStartFAIMsg.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BCK">
            <summary>
            2.1144: PidTagStartMessage.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CCK">
            <summary>
            2.1145: PidTagStartRecip.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DCK">
            <summary>
            2.1146: PidTagStartSubFld.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ECK">
            <summary>
            2.1147: PidTagStartTopFld.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FCK">
            <summary>
            2.1148: Contains the name of the mail user's state or province.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GCK">
            <summary>
            2.1149: PidTagStoreEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HCK">
            <summary>
            2.1150: PidTagStoreState.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DQJ">
            <summary>
            2.1151: Determines whether string properties are Unicode encoded or not. 
            If string properties are Unicode encoded, then this property MUST be present 
            and the STORE_UNICODE_OK flag (bitmask 0x00040000) MUST be set. 
            All other bits of the property's value MUST be ignored.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JCK">
            <summary>
            2.1152: Contains the mail user's street address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KCK">
            <summary>
            2.1153: PidTagSubfolder.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MCK">
            <summary>
            2.1154: Specifies whether a folder has any subfolders.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XPJ">
            <summary>
            2.1155: PidTagSubject.
            Data Type: Sdtring.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LCK">
            <summary>
            2.1156: Contains the prefix for the subject of the message.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NCK">
            <summary>
            2.1157: Contains the mail user's family name.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_OCK">
            <summary>
            2.1158: Contains a secondary flag storage location if sender flags or sender reminders are supported.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PCK">
            <summary>
            2.1159: Contains the value of PidTagStoreEntryId (section 2.1149) of the message if PidTagSwappedToDoData (section 2.1158) is set.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QCK">
            <summary>
            2.1160: Used in conjunction with an optimizing send client.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RCK">
            <summary>
            2.1161: PidTagTcvConstLongOne.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SCK">
            <summary>
            2.1162: Contains the mail user's telecommunication device for the deaf (TTY/TDD) telephone number.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TCK">
            <summary>
            2.1163: Contains the mail user's telex number.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UCK">
            <summary>
            2.1164: PidTagTemplateData.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VCK">
            <summary>
            2.1165: Contains the PidTagEntryId (section 2.761), expressed as a Permanent Entry ID format.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WCK">
            <summary>
            2.1166: PidTagTemporaryDefaultDocument.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_EMH">
            <summary>
            2.1167: Contains a message attachment's character set value.
            This property's data is derived from a Content-Type MIME header field that starts with "text/", if a "charset" parameter is present.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XCK">
            <summary>
            2.1168: Contain an image of the mail user's photo in .jpg format.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YCK">
            <summary>
            2.1169: Contains the mail user's job title.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZCK">
            <summary>
            2.1170: PidTagTnefCorrelationKey.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ADK">
            <summary>
            2.1171: PidTagToDoItemFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BDK">
            <summary>
            2.1172: Contains an Address Book object's display name that is transmitted with the message.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CDK">
            <summary>
            2.1173: Contains transport-specific message envelope information for e-mail.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DDK">
            <summary>
            2.1174: PidTagTrustSender.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_EDK">
            <summary>
            2.1175: Specifies the telephone number for the contact's text telephone (TTY) or telecommunication device for the deaf (TDD).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FDK">
            <summary>
            2.1176: PidTagUrlCompName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GDK">
            <summary>
            2.1177: PidTagUrlCompNameSet.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HDK">
            <summary>
            2.1178: Contains the URL of an object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JDK">
            <summary>
            2.1179: Contains an ASN.1 authentication certificate for a messaging user.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KDK">
            <summary>
            2.1180: Address book EntryID of the user logged on to the public folders.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MDK">
            <summary>
            2.1181: Contains a list certificates for the mail user.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_LDK">
            <summary>
            2.1182: Contains view definitions.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_NDK">
            <summary>
            2.1183: PidTagViewDescriptorName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ODK">
            <summary>
            2.1184: Contains view definitions in string format.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_PDK">
            <summary>
            2.1185: Contains the View Descriptor version.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_QDK">
            <summary>
            2.1186: Contains a list of filenames for the audio file attachments that are to be played as part of a message.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_RDK">
            <summary>
            2.1187: PidTagVoiceMessageDuration.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_SDK">
            <summary>
            2.1188: PidTagVoiceMessageSenderName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_TDK">
            <summary>
            2.1189: Contains the date of the mail user's wedding anniversary at 12:00 A.M.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_ZGH.c_UDK">
            <summary>
            2.1190: Specifies the value of PidTagEntryId (section 2.761) of the user that the folder belongs to.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_VDK">
            <summary>
            2.1191: Specifies the value of PidTagStoreEntryId (section 2.1149) of the current user (not the owner of the folder).
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_WDK">
            <summary>
            2.1192: Specifies the background color of the calendar.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_XDK">
            <summary>
            2.1193: Specifies the Client ID that allows the client to determine whether the shortcut was created 
            on the current machine/user via an equality test.
            Data Type: Guid.
            </summary>
        </member>
        <member name="F:c_ZGH.c_YDK">
            <summary>
            2.1194: PidTagWlinkEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_ZDK">
            <summary>
            2.1195: PidTagWlinkFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_AEK">
            <summary>
            2.1196: PidTagWlinkFolderType.
            Data Type: Guid.
            </summary>
        </member>
        <member name="F:c_ZGH.c_BEK">
            <summary>
            2.1197: PidTagWlinkGroupClsid.
            Data Type: Guid.
            </summary>
        </member>
        <member name="F:c_ZGH.c_CEK">
            <summary>
            2.1198: Specifies the ID of the navigation shortcut which groups other navigation shortcuts.
            Data Type: Guid.
            </summary>
        </member>
        <member name="F:c_ZGH.c_DEK">
            <summary>
            2.1199: PidTagWlinkGroupName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_ZGH.c_EEK">
            <summary>
            2.1200: PidTagWlinkOrdinal.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_FEK">
            <summary>
            2.1201: Specifies the value of PidTagRecordKey (section 2.1017) of the folder pointed to by the shortcut.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_GEK">
            <summary>
            2.1202: Specifies the type of group header.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_HEK">
            <summary>
            2.1203: Specifies an integer that allows a client to identify with a high probability 
            whether the navigation shortcut was saved by the current client session.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_JEK">
            <summary>
            2.1204: PidTagWlinkSection.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_ZGH.c_KEK">
            <summary>
            2.1205: PidTagWlinkStoreEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_ZGH.c_MEK">
            <summary>
            2.1206: PidTagWlinkType.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="T:c_LEK">
            <summary>
            Specifies known property long IDs (LIDs).
            </summary>
        </member>
        <member name="F:c_LEK.c_NEK">
            <summary>
            2.1: Specifies the state of the contact's electronic addresses and represents a set of bit-flags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_OEK">
            <summary>
            2.2: Specifies which electronic address properties are set on the Contact object.
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_LEK.c_PEK">
            <summary>
            2.3: Specifies the country code portion of the contact's mailing address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_QEK">
            <summary>
            2.4: PidLidAgingDontAgeMe.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_REK">
            <summary>
            2.5: Specifies a list of all the attendees except for the organizer, including resources and unsendable attendees.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_SEK">
            <summary>
            2.6: PidLidAllowExternalCheck.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_TEK">
            <summary>
            2.7: Specifies the object EntryId of the Appointment object that represents a contact's anniversary.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_UEK">
            <summary>
            2.8: Specifies a bit field that describes the auxiliary state of the object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_VEK">
            <summary>
            2.9: Specifies the color to be used when displaying the Calendar object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_WEK">
            <summary>
            2.10: Indicates whether a Meeting Response object is a counter proposal.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_XEK">
            <summary>
            2.11: Specifies the length of the event, in minutes.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_YEK">
            <summary>
            2.12: Indicates the date the appointment ends.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZEK">
            <summary>
            2.13: Indicates the time the appointment ends.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_AFK">
            <summary>
            2.14: Specifies the end date and time for the event.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_BFK">
            <summary>
            2.15: Indicates to the organizer the last sequence number that was sent to any attendee.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_CFK">
            <summary>
            2.16: Indicates the message class of the Meeting object that is to be generated from the Meeting Request object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_DFK">
            <summary>
            2.17: Indicates whether attendees are not allowed to propose a new date and/or time for the meeting.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_EFK">
            <summary>
            2.18: Specifies the number of attendees who have sent counter proposals that have not been accepted or rejected by the organizer.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_FFK">
            <summary>
            2.19: Indicates the proposed value for PidLidAppointmentDuration (section 2.11) for a counter proposal.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_GFK">
            <summary>
            2.20: Specifies the proposed value for PidLidAppointmentEndWhole (section 2.14) for a counter proposal.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_HFK">
            <summary>
            2.21: Specifies the proposed value for PidLidAppointmentStartWhole for a counter proposal.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_JFK">
            <summary>
            2.22: Specifies the dates and times when a recurring series occurs.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_KFK">
            <summary>
            2.23: Specifies the user who last replied to the meeting request or meeting update.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_MFK">
            <summary>
            2.24: Specifies the date and time at which the attendee responded to a received meeting request or Meeting Update object.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_LFK">
            <summary>
            2.25: Specifies the sequence number of a Meeting object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_NFK">
            <summary>
            2.26: Indicates the date and time at which the property PidLidAppointmentSequence (section 2.25) was last modified.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_OFK">
            <summary>
            2.27: Identifies the date the appointment starts.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_PFK">
            <summary>
            2.28: Identifies the time the appointment starts.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_QFK">
            <summary>
            2.29: Specifies the start date and time of the event.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_RFK">
            <summary>
            2.30: Specifies a bit field that describes the state of the object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_SFK">
            <summary>
            2.31: Specifies whether the event is an all-day event.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_TFK">
            <summary>
            2.32: Specifies time zone information that indicates the time zone of the PidLidAppointmentEndWhole property (section 2.14).
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_UFK">
            <summary>
            2.33: Specifies time zone information that describes how to convert the meeting date and time on a recurring series to and from UTC.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_VFK">
            <summary>
            2.34: Specifies time zone information that indicates the time zone of the PidLidAppointmentStartWhole property (section 2.29).
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_WFK">
            <summary>
            2.35: Contains a list of unsendable attendees.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_XFK">
            <summary>
            2.36: Indicates the time at which the appointment was last updated.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_YFK">
            <summary>
            2.37: Specifies the date and time at which the meeting-related object was sent.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZFK">
            <summary>
            2.38: Indicates whether the value of the PidLidLocation property (section 2.157) 
            is set to the PidTagDisplayName property (section 2.748).
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_AGK">
            <summary>
            2.39: Specifies to the application whether to create a Journal object for each action associated with this Contact object.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_BGK">
            <summary>
            2.40: Specifies the options used in automatic processing of e-mail messages.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_CGK">
            <summary>
            2.41: PidLidAutoStartCheck.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_DGK">
            <summary>
            2.42: Specifies billing information for the contact.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_EGK">
            <summary>
            2.43: Specifies the object EntryId of an optional Appointment object that represents the contact's birthday.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_FGK">
            <summary>
            2.44: Specifies the birthday of a contact.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_GGK">
            <summary>
            2.45: Contains the image to be used on a business card.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_HGK">
            <summary>
            2.46: Contains user customization details for displaying a contact as a business card.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_JGK">
            <summary>
            2.47: Specifies the availability of a user for the event described by the object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_KGK">
            <summary>
            2.48: Contains the value of the CalendarType field from the PidLidAppointmentRecur property (section 2.22).
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_MGK">
            <summary>
            2.49: PidLidCategories.
            Data Type: MultipleString.
            </summary>
        </member>
        <member name="F:c_LEK.c_LGK">
            <summary>
            2.50: Contains a list of all the sendable attendees who are also optional attendees.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_NGK">
            <summary>
            2.51: Specifies a bit field that indicates how the Meeting object has changed.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_OGK">
            <summary>
            2.52: PidLidClassification.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_PGK">
            <summary>
            2.53: PidLidClassificationDescription.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_QGK">
            <summary>
            2.54: PidLidClassificationGuid.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_RGK">
            <summary>
            2.55: PidLidClassificationKeep.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_SGK">
            <summary>
            2.56: PidLidClassified.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_TGK">
            <summary>
            2.57: Contains the value of the PidLidGlobalObjectId property (section 2.141) for an object that represents an exception 
            to a recurring series, where the Year, Month, and Day fields are all zero.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_UGK">
            <summary>
            2.58: Specifies the end date and time of the event in UTC.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_VGK">
            <summary>
            2.59: Specifies the end date and time of the event in UTC.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_WGK">
            <summary>
            2.60: Specifies the start date and time of the event in UTC.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_XGK">
            <summary>
            2.61: Specifies the document to be launched when the user joins the meeting.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_YGK">
            <summary>
            2.62: Indicates the end time for the Message object.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZGK">
            <summary>
            2.63: Indicates the start time for the Message object.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_AHK">
            <summary>
            2.64: PidLidCompanies.
            Data Type: MultipleString.
            </summary>
        </member>
        <member name="F:c_LEK.c_BHK">
            <summary>
            2.65: PidLidConferencingCheck.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_CHK">
            <summary>
            2.66: Specifies the type of the meeting.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_DHK">
            <summary>
            2.67: Specifies the character set used for a Contact object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_EHK">
            <summary>
            2.68: Specifies the visible fields in the application's user interface that are used to help display the contact information.
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_LEK.c_FHK">
            <summary>
            2.69: Contains the elements of PidLidContacts (section 2.72).
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_GHK">
            <summary>
            2.70: PidLidContactLinkName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_HHK">
            <summary>
            2.71: Contains the list of SearchKeys for a Contact object linked to by the Message object.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_JHK">
            <summary>
            2.72: Contains the PidTagDisplayName (section 2.748) of each Address Book EntryID referenced 
            in the value of PidLidContactLinkEntry (section 2.69).
            Data Type: MultipleString.
            </summary>
        </member>
        <member name="F:c_LEK.c_KHK">
            <summary>
            2.73: Contains text used to add custom text to a business card representation of a Contact object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_MHK">
            <summary>
            2.74: Contains text used to add custom text to a business card representation of a Contact object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_LHK">
            <summary>
            2.75: Contains text used to add custom text to a business card representation of a Contact object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_NHK">
            <summary>
            2.76: Contains text used to add custom text to a business card representation of a Contact object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_OHK">
            <summary>
            2.77: Contains the time (in UTC) that an E-mail object was last received in the conversation, 
            or the last time that the user modified the conversation action, whichever occurs later.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_PHK">
            <summary>
            2.78: Contains the maximum value of PidTagMessageDeliveryTime (section 2.889) of all the E-mail objects 
            modified in response to the last time the user changed a conversation action on the client.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_QHK">
            <summary>
            2.79: Contains the entry ID for the destination folder.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_RHK">
            <summary>
            2.80: Contains the entry ID for a move to a folder in a different store.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_SHK">
            <summary>
            2.81: Contains the version of the conversation action FAI message.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_THK">
            <summary>
            2.82: PidLidConversationProcessed.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_UHK">
            <summary>
            2.83: PidLidCurrentVersion.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_VHK">
            <summary>
            2.84: PidLidCurrentVersionName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_WHK">
            <summary>
            2.85: Identifies the day interval for the recurrence pattern.
            Data Type: Integer16.
            </summary>
        </member>
        <member name="F:c_LEK.c_XHK">
            <summary>
            2.86: Identifies the day of the month for the appointment or meeting.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_YHK">
            <summary>
            2.87: Indicates whether a delegate responded to the meeting request.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZHK">
            <summary>
            2.88: PidLidDepartment.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_AJK">
            <summary>
            2.89: Specifies the directory server to be used with NetMeeting.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_BJK">
            <summary>
            2.90: Specifies the 32-bit cyclic redundancy check (CRC-32) polynomial checksum, as specified in [ISO/IEC8802-3], 
            calculated on the value of PidLidDistributionListMembers (section 2.91).
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_CJK">
            <summary>
            2.91: Specifies the list of EntryIds of the objects corresponding to the members of the personal distribution list.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_LEK.c_DJK">
            <summary>
            2.92: Specifies the name of the personal distribution list.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_EJK">
            <summary>
            2.93: Specifies the list of one-off EntryIds corresponding to the members of the personal distribution list.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_LEK.c_FJK">
            <summary>
            2.94: Specifies the list of EntryIds and one-off EntryIds corresponding to the members of the personal distribution list.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_GJK">
            <summary>
            2.95: Specifies the address type of an electronic address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_HJK">
            <summary>
            2.96: Specifies the user-readable display name for the e-mail address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_JJK">
            <summary>
            2.97: Specifies the e-mail address of the contact.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_KJK">
            <summary>
            2.98: Specifies the SMTP e-mail address corresponding to the e-mail address for the Contact object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_MJK">
            <summary>
            2.99: Specifies the EntryId of the object corresponding to this electronic address.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_LJK">
            <summary>
            2.100: PidLidEmail1RichTextFormat.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_NJK">
            <summary>
            2.101: Specifies the address type of the electronic address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_OJK">
            <summary>
            2.102: Specifies the user-readable display name for the e-mail address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_PJK">
            <summary>
            2.103: Specifies the e-mail address of the contact.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_QJK">
            <summary>
            2.104: Specifies the SMTP e-mail address corresponding to the e-mail address for the Contact object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_RJK">
            <summary>
            2.105: Specifies the EntryId of the object corresponding to this electronic address.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_SJK">
            <summary>
            2.106: PidLidEmail2RichTextFormat.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_TJK">
            <summary>
            2.107: Specifies the address type of the electronic address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_UJK">
            <summary>
            2.108: Specifies the user-readable display name for the e-mail address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_VJK">
            <summary>
            2.109: Specifies the e-mail address of the contact.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_WJK">
            <summary>
            2.110: Specifies the SMTP e-mail address corresponding to the e-mail address for the Contact object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_XJK">
            <summary>
            2.111: PidLidEmail3OriginalEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_YJK">
            <summary>
            2.112: PidLidEmail3RichTextFormat.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZJK">
            <summary>
            2.113: PidLidEmailList.
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_LEK.c_AKK">
            <summary>
            2.114: Identifies the end date of the recurrence range.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_BKK">
            <summary>
            2.115: Identifies the end time of the recurrence range.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_CKK">
            <summary>
            2.116: Specifies the date and time, in UTC, within a recurrence pattern that an exception will replace.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_DKK">
            <summary>
            2.117: Contains the string value "FAX".
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_EKK">
            <summary>
            2.118: Contains a user-readable display name, followed by the "@" character, followed by a fax number.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_FKK">
            <summary>
            2.119: Contains the same value as PidTagNormalizedSubject (section 2.910).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_GKK">
            <summary>
            2.120: Specifies a one-off EntryId corresponding to this fax address.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_HKK">
            <summary>
            2.121: Contains the string value "FAX".
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_JKK">
            <summary>
            2.122: Contains a user-readable display name, followed by the "@" character, followed by a fax number.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_KKK">
            <summary>
            2.123: Contains the same value as PidTagNormalizedSubject (section 2.910).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_MKK">
            <summary>
            2.124: Specifies a one-off EntryId corresponding to this fax address.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_LKK">
            <summary>
            2.125: Contains the string value "FAX".
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_NKK">
            <summary>
            2.126: Contains a user-readable display name, followed by the "@" character, followed by a fax number.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_OKK">
            <summary>
            2.127: Contains the same value as PidTagNormalizedSubject (section 2.910).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_PKK">
            <summary>
            2.128: Specifies a one-off EntryId corresponding to this fax address.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_QKK">
            <summary>
            2.129: Indicates that the object is a Recurring Calendar object with one or more exceptions, 
            and at least one of the Exception Embedded Message objects has at least one RecipientRow.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_RKK">
            <summary>
            2.130: Indicates that the Exception Embedded Message object has a body that differs from the Recurring Calendar object.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_SKK">
            <summary>
            2.131: Specifies the name under which to file a contact when displaying a list of contacts.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_TKK">
            <summary>
            2.132: Specifies how to generate and recompute the value of the PidLidFileUnder property (section 2.131) 
            when other contact name properties change.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_UKK">
            <summary>
            2.133: Specifies a list of possible values for PidLidFileUnderId (section 2.132).
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_LEK.c_VKK">
            <summary>
            2.134: Indicates whether invitations have been sent for the meeting that this Meeting object represents.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_WKK">
            <summary>
            2.135: Contains user-specifiable text to be associated with the flag.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_XKK">
            <summary>
            2.136: Contains an index identifying one of a set of pre-defined text strings to be associated with the flag.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_YKK">
            <summary>
            2.137: Indicates whether the Meeting Request object represents an exception to a recurring series, and it was forwarded 
            (even when forwarded by the organizer) rather than being an invitation sent by the organizer.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZKK">
            <summary>
            2.138: Contains a list of RecipientRows that indicate the recipients of a meeting forward.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_AMK">
            <summary>
            2.139: PidLidFOthersAppointment.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_BMK">
            <summary>
            2.140: Specifies a URL path from which a client can retrieve free/busy information for the contact.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_CMK">
            <summary>
            2.141: Contains an ID for an object that represents an exception to a recurring series.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_DMK">
            <summary>
            2.142: Specifies whether the attachment has a picture.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_EMK">
            <summary>
            2.143: Specifies the complete address of the contact's home address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_FMK">
            <summary>
            2.144: Specifies the country code portion of the contact's home address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_GMK">
            <summary>
            2.145: Specifies the contact's business web page URL.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_HMK">
            <summary>
            2.146: PidLidICalendarDayOfWeekMask.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_JMK">
            <summary>
            2.147: PidLidInboundICalStream.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_KMK">
            <summary>
            2.148: PidLidInfoPathFormName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_MMK">
            <summary>
            2.149: Specifies the contact's instant messaging address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_LMK">
            <summary>
            2.150: Contains the value of the PidLidBusyStatus property (section 2.47) on the Meeting object in the organizer's calendar 
            at the time the Meeting Request object or Meeting Update object was sent.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_NMK">
            <summary>
            2.151: Specifies the user-visible e-mail account name through which the e-mail message is sent.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_OMK">
            <summary>
            2.152: Specifies the e-mail account ID through which the e-mail message is sent.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_PMK">
            <summary>
            2.153: Indicates whether the object represents an exception (including an orphan instance).
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_QMK">
            <summary>
            2.154: Specifies whether the object is associated with a recurring series.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_RMK">
            <summary>
            2.155: Indicates whether the user did not include any text in the body of the Meeting Response object.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_SMK">
            <summary>
            2.156: Indicates whether the user did not include any text in the body of the Meeting Response object.
            Data Type: MultipleBinary.
            </summary>
        </member>
        <member name="F:c_LEK.c_TMK">
            <summary>
            2.157: Specifies the location of the event.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_UMK">
            <summary>
            2.158: Indicates whether the document was sent by e-mail or posted to a server folder during journaling.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_VMK">
            <summary>
            2.159: Indicates whether the document was printed during journaling.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_WMK">
            <summary>
            2.160: Indicates whether the document was sent to a routing recipient during journaling.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_XMK">
            <summary>
            2.161: Indicates whether the document was saved during journaling.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_YMK">
            <summary>
            2.162: Contains the duration in minutes of the activity.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZMK">
            <summary>
            2.163: Contains the time at which the activity ended.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_ALK">
            <summary>
            2.164: Contains metadata about the Journal object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_BLK">
            <summary>
            2.165: Contains the time at which the activity began.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_CLK">
            <summary>
            2.166: Briefly describes the activity that is being recorded.
            Data Type: PtyString.
            </summary>
        </member>
        <member name="F:c_LEK.c_DLK">
            <summary>
            2.167: Describes the activity that is being recorded.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_ELK">
            <summary>
            2.168: Indicates the type of Meeting Request object or Meeting Update object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_FLK">
            <summary>
            2.169: Specifies the URL of the Meeting Workspace that is associated with a Calendar object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_GLK">
            <summary>
            2.170: Indicates the monthly interval of the appointment or meeting.
            Data Type: Integer16.
            </summary>
        </member>
        <member name="F:c_LEK.c_HLK">
            <summary>
            2.171: Indicates the month of the year that the appointment or meeting occurs.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_JLK">
            <summary>
            2.172: Indicates the month of the year that the appointment or meeting occurs.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_KLK">
            <summary>
            2.173: Specifies the URL to be launched when the user joins the meeting.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_MLK">
            <summary>
            2.174: PidLidNoEndDateFlag.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_LLK">
            <summary>
            2.175: Contains a list of all the unsendable attendees who are also resources.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_NLK">
            <summary>
            2.176: Contains a list of all the unsendable attendees who are also optional attendees.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_OLK">
            <summary>
            2.177: Contains a list of all the unsendable attendees who are also required attendees.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_PLK">
            <summary>
            2.178: Contains the value from the response table.
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_LEK.c_QLK">
            <summary>
            2.179: Contains the value from the response table.
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_LEK.c_RLK">
            <summary>
            2.180: Contains the value from the response table.
            Data Type: MultipleInteger32.
            </summary>
        </member>
        <member name="F:c_LEK.c_SLK">
            <summary>
            2.181: Specifies the suggested background color of the Note object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_TLK">
            <summary>
            2.182: Specifies the height of the visible message window in pixels.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_ULK">
            <summary>
            2.183: Specifies the width of the visible message window in pixels.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_VLK">
            <summary>
            2.184: Specifies the distance, in pixels, from the left edge of the screen that a user interface displays a Note object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_WLK">
            <summary>
            2.185: Specifies the distance, in pixels, from the top edge of the screen that a user interface displays a Note object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_XLK">
            <summary>
            2.186: Indicates the number of occurrences in the recurring appointment or meeting.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_YLK">
            <summary>
            2.187: Indicates the original value of the PidLidLocation property (section 2.157) before a meeting update.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZLK">
            <summary>
            2.188: Indicates the recurrence pattern for the appointment or meeting.
            Data Type: Integer16.
            </summary>
        </member>
        <member name="F:c_LEK.c_ANK">
            <summary>
            2.189: Indicates the original value of the PidLidAppointmentEndWhole property (section 2.14) before a meeting update.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_BNK">
            <summary>
            2.190: Indicates the original value of the PidLidAppointmentStartWhole property (section 2.29) before a meeting update.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_CNK">
            <summary>
            2.191: Specifies the password for a meeting on which the property PidLidConferencingType (section 2.66) has the value 0x0002.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_DNK">
            <summary>
            2.192: Specifies optional attendees.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_ENK">
            <summary>
            2.193: Specifies the e-mail address of the organizer.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_FNK">
            <summary>
            2.194: PidLidOriginalStoreEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_GNK">
            <summary>
            2.195: Specifies the complete address of the contact's other address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_HNK">
            <summary>
            2.196: Specifies the country code portion of the contact's other address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_JNK">
            <summary>
            2.197: Specifies the date and time at which a Meeting Request object was sent by the organizer.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_KNK">
            <summary>
            2.198: Indicates the name of the owner of the mailbox.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_MNK">
            <summary>
            2.199: Indicates whether a time-flagged Message object is completed or not.
            Data Type: Floating64.
            </summary>
        </member>
        <member name="F:c_LEK.c_LNK">
            <summary>
            2.200: Specifies which physical address is the mailing address for this contact.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_NNK">
            <summary>
            2.201: Contains the contents of the title field from the XML of the Atom feed or RSS channel.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_ONK">
            <summary>
            2.202: Contains the URL of the RSS or Atom feed that the XML file came from.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_PNK">
            <summary>
            2.203: Contains a unique identifier for the RSS object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_QNK">
            <summary>
            2.204: Contains a hash of the feed XML computed by using an implementation-dependent algorithm.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_RNK">
            <summary>
            2.205: Contains the URL of the link from the item.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_SNK">
            <summary>
            2.206: Contains the item element and all its sub-elements from an RSS feed, 
            or the entry element and all its sub-elements from an Atom feed.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_TNK">
            <summary>
            2.207: Contains the user's preferred name for the subscription.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_UNK">
            <summary>
            2.208: Indicates whether the end-user wishes for this Message object to be hidden 
            from other users who have access to the Message object.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_VNK">
            <summary>
            2.209: Indicates that the Meeting Response object was out-of-date when it was received.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_WNK">
            <summary>
            2.210: Identifies the length, in minutes, of the appointment or meeting.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_XNK">
            <summary>
            2.211: Specifies a description of the recurrence pattern of the Calendar object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_YNK">
            <summary>
            2.212: Specifies the recurrence type of the recurring series.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZNK">
            <summary>
            2.213: Specifies whether the object represents a recurring series.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_AOK">
            <summary>
            2.214: Specifies the value of the EntryId of the Contact object unless the Contact object is a copy of an earlier original.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_BOK">
            <summary>
            2.215: Specifies the name of the person who referred the contact to the user.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_COK">
            <summary>
            2.216: PidLidReminderDelta.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_DOK">
            <summary>
            2.217: Specifies the filename of the sound that a client is to play when the reminder for that object becomes overdue.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_EOK">
            <summary>
            2.218: Specifies whether the client is to respect the values PidLidReminderPlaySound (section 2.219) 
            and PidLidReminderFileParameter (section 2.217), or use the default values for those properties.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_FOK">
            <summary>
            2.219: Specifies whether the client is to play a sound when the reminder becomes overdue.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_GOK">
            <summary>
            2.220: Specifies whether a reminder is set on the object.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_HOK">
            <summary>
            2.221: Specifies the point in time when a reminder transitions from pending to overdue.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_JOK">
            <summary>
            2.222: Specifies the initial signal time for non-Calendar objects.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_KOK">
            <summary>
            2.223: Indicates the time and date of the reminder for the appointment or meeting.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_MOK">
            <summary>
            2.224: Indicates the time of the reminder for the appointment or meeting.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_LOK">
            <summary>
            2.225: PidLidReminderType.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_NOK">
            <summary>
            2.226: Indicates the remote status of the calendar item.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_OOK">
            <summary>
            2.227: Identifies required attendees for the appointment or meeting.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_POK">
            <summary>
            2.228: Identifies resource attendees for the appointment or meeting.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_QOK">
            <summary>
            2.229: Specifies the response status of an attendee.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_ROK">
            <summary>
            2.230: Indicates whether the Meeting Request Object or Meeting Update Object has been processed.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_SOK">
            <summary>
            2.231: Indicates what processing actions have been taken on this Meeting Request Object or Meeting Update Object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_TOK">
            <summary>
            2.232: PidLidSharingAnonymity.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_UOK">
            <summary>
            2.233: PidLidSharingBindingEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_VOK">
            <summary>
            2.234: PidLidSharingBrowseUrl.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_WOK">
            <summary>
            2.235: Indicates that the Message object relates to a special folder.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_XOK">
            <summary>
            2.236: Contains a zero-length string.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_YOK">
            <summary>
            2.237: PidLidSharingDataRangeEnd.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZOK">
            <summary>
            2.238: PidLidSharingDataRangeStart.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_APK">
            <summary>
            2.239: PidLidSharingDetail.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_BPK">
            <summary>
            2.240: PidLidSharingExtensionXml.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_CPK">
            <summary>
            2.241: PidLidSharingFilter.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_DPK">
            <summary>
            2.242: PidLidSharingFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_EPK">
            <summary>
            2.243: PidLidSharingFlavor.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_FPK">
            <summary>
            2.244: PidLidSharingFolderEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_GPK">
            <summary>
            2.245: PidLidSharingIndexEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_HPK">
            <summary>
            2.246: Contains the value of PidTagEntryId (section 2.761) for the Address Book object of the currently logged-on user.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_JPK">
            <summary>
            2.247: Contains the value of PidTagDisplayName (section 2.748) from the Address Book object 
            identified by PidLidSharingInitiatorEntryId (section 2.246).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_KPK">
            <summary>
            2.248: Contains the value of PidTagSmtpAddress (section 2.1135) from the Address Book object 
            identified by PidLidSharingInitiatorEntryId (section 2.246).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_MPK">
            <summary>
            2.249: PidLidSharingInstanceGuid.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_LPK">
            <summary>
            2.250: PidLidSharingLastAutoSyncTime.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_NPK">
            <summary>
            2.251: PidLidSharingLastSyncTime.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_OPK">
            <summary>
            2.252: PidLidSharingLocalComment.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_PPK">
            <summary>
            2.253: PidLidSharingLocalLastModificationTime.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_QPK">
            <summary>
            2.254: PidLidSharingLocalName.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_RPK">
            <summary>
            2.255: PidLidSharingLocalPath.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_SPK">
            <summary>
            2.256: PidLidSharingLocalStoreUid.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_TPK">
            <summary>
            2.257: Contains the value of PidTagContainerClass (section 2.714) of the folder being shared.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_UPK">
            <summary>
            2.258: PidLidSharingLocalUid.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_VPK">
            <summary>
            2.259: PidLidSharingOriginalMessageEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_WPK">
            <summary>
            2.260: PidLidSharingParentBindingEntryId.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_XPK">
            <summary>
            2.261: PidLidSharingParticipants.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_YPK">
            <summary>
            2.262: PidLidSharingPermissions.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZPK">
            <summary>
            2.263: PidLidSharingProviderExtension.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_AQK">
            <summary>
            2.264: Contains the value %xAE.F0.06.00.00.00.00.00.C0.00.00.00.00.00.00.46.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_BQK">
            <summary>
            2.265: Contains a user-displayable name of the sharing provider identified by PidLidSharingProviderGuid (section 2.264).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_CQK">
            <summary>
            2.266: Contains a URL related to the sharing provider identified by PidLidSharingProviderGuid (section 2.264).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_DQK">
            <summary>
            2.267: PidLidSharingRangeEnd.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_EQK">
            <summary>
            2.268: PidLidSharingRangeStart.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_FQK">
            <summary>
            2.269: PidLidSharingReciprocation.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_GQK">
            <summary>
            2.270: PidLidSharingRemoteByteSize.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_HQK">
            <summary>
            2.271: PidLidSharingRemoteComment.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_JQK">
            <summary>
            2.272: PidLidSharingRemoteCrc.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_KQK">
            <summary>
            2.273: PidLidSharingRemoteLastModificationTime.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_MQK">
            <summary>
            2.274: PidLidSharingRemoteMessageCount.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_LQK">
            <summary>
            2.275: Contains the value of PidTagDisplayName (section 2.748) on the folder being shared.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_NQK">
            <summary>
            2.276: PidLidSharingRemotePass.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_OQK">
            <summary>
            2.277: PidLidSharingRemotePath.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_PQK">
            <summary>
            2.278: Contains a hexadecimal string representation of the value of PidTagStoreEntryId (section 2.1149) on the folder being shared.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_QQK">
            <summary>
            2.279: Contains the same value as PidLidSharingLocalType (section 2.257).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_RQK">
            <summary>
            2.280: Contains the hexadecimal string representation of the value of PidTagEntryId (section 2.761) on the folder being shared.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_SQK">
            <summary>
            2.281: PidLidSharingRemoteUser.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_TQK">
            <summary>
            2.282: PidLidSharingRemoteVersion.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_UQK">
            <summary>
            2.283: Contains the time at which the recipient of the sharing request sent a sharing response.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_VQK">
            <summary>
            2.284: Contains the type of response with which the recipient of the sharing request responded.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_WQK">
            <summary>
            2.285: PidLidSharingRoamLog.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_XQK">
            <summary>
            2.286: PidLidSharingStart.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_YQK">
            <summary>
            2.287: PidLidSharingStatus.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZQK">
            <summary>
            2.288: PidLidSharingStop.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_ARK">
            <summary>
            2.289: PidLidSharingSyncFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_BRK">
            <summary>
            2.290: PidLidSharingSyncInterval.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_CRK">
            <summary>
            2.291: PidLidSharingTimeToLive.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_DRK">
            <summary>
            2.292: PidLidSharingTimeToLiveAuto.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_ERK">
            <summary>
            2.293: PidLidSharingWorkingHoursDays.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_FRK">
            <summary>
            2.294: PidLidSharingWorkingHoursEnd.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_GRK">
            <summary>
            2.295: PidLidSharingWorkingHoursStart.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_HRK">
            <summary>
            2.296: PidLidSharingWorkingHoursTimeZone.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_JRK">
            <summary>
            2.297: Specifies how a Message object is handled by the client when acting on end-user input.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_KRK">
            <summary>
            2.298: PidLidSingleBodyICal.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_MRK">
            <summary>
            2.299: Indicates whether the Message object has no end-user visible attachments.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_LRK">
            <summary>
            2.300: Specifies which folder a message was in before it was filtered into the Junk E-mail folder.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_NRK">
            <summary>
            2.301: Identifies the start date of the recurrence pattern.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_ORK">
            <summary>
            2.302: Identifies the start time of the recurrence pattern.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_PRK">
            <summary>
            2.303: Indicates the acceptance state of the task.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_QRK">
            <summary>
            2.304: Indicates whether a task assignee has replied to a task request for this Task object.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_RRK">
            <summary>
            2.305: Indicates the number of minutes that the user actually spent working on a task.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_SRK">
            <summary>
            2.306: Specifies the name of the user that last assigned the task.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_TRK">
            <summary>
            2.307: Contains a stack of entries, each representing a task assigner.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_URK">
            <summary>
            2.308: Indicates that the task has been completed.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_VRK">
            <summary>
            2.309: PidLidTaskCustomFlags.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_WRK">
            <summary>
            2.310: Specifies the date when the user completed work on the task.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_XRK">
            <summary>
            2.311: Indicates whether new occurrences remain to be generated.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_YRK">
            <summary>
            2.312: Specifies the date by which the user expects work on the task to be complete.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZRK">
            <summary>
            2.313: Indicates the number of minutes that the user expects to work on a task.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_ASK">
            <summary>
            2.314: Indicates that the Task object was originally created by the action of the current user or user agent 
            instead of by the processing of a task request.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_BSK">
            <summary>
            2.315: Indicates the accuracy of PidLidTaskOwner (section 2.326).
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_CSK">
            <summary>
            2.316: Indicates whether the task includes a recurrence pattern.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_DSK">
            <summary>
            2.317: Contains a unique GUID for this task, used to locate an existing task upon receipt of a task response or task update.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_ESK">
            <summary>
            2.318: Indicates the type of change that was last made to the Task object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_FSK">
            <summary>
            2.319: Contains the name of the user who most recently assigned the task, or the user to whom it was most recently assigned.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_GSK">
            <summary>
            2.320: Contains the date and time of the most recent change made to the Task object.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_HSK">
            <summary>
            2.321: Contains the name of the most recent user to have been the task owner.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_JSK">
            <summary>
            2.322: Specifies the assignment status of the embedded Task object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_KSK">
            <summary>
            2.323: Provides optimization hints about the recipients of a Task object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_MSK">
            <summary>
            2.324: PidLidTaskNoCompute.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_LSK">
            <summary>
            2.325: Provides an aid to custom sorting of Task objects.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_NSK">
            <summary>
            2.326: Contains the name of the task owner.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_OSK">
            <summary>
            2.327: Indicates the role of the current user relative to the Task object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_PSK">
            <summary>
            2.328: Contains a RecurrencePattern structure that provides information about recurring tasks.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_QSK">
            <summary>
            2.329: Indicates whether future instances of recurring tasks need reminders, even though PidLidReminderSet (section 2.220) is 0x00.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_RSK">
            <summary>
            2.330: PidLidTaskRole.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_SSK">
            <summary>
            2.331: Specifies the date on which the user expects work on the task to begin.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_TSK">
            <summary>
            2.332: Indicates the current assignment state of the Task object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_USK">
            <summary>
            2.333: Specifies the status of a task.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_VSK">
            <summary>
            2.334: Indicates whether the task assignee has been requested to send an e-mail message update 
            when the task assignee completes the assigned task.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_WSK">
            <summary>
            2.335: Indicates whether the task assignee has been requested to send a task update when the assigned Task object changes.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_XSK">
            <summary>
            2.336: Indicates which copy is the latest update of a Task object.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_YSK">
            <summary>
            2.337: PidLidTeamTask.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZSK">
            <summary>
            2.338: Specifies information about the time zone of a recurring meeting.
            Data Type: Integer32.
            </summary>
        </member>
        <member name="F:c_LEK.c_ATK">
            <summary>
            2.339: Specifies a human-readable description of the time zone that is represented by the data 
            in the PidLidTimeZoneStruct property (section 2.340).
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_BTK">
            <summary>
            2.340: Specifies time zone information for a recurring meeting.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_CTK">
            <summary>
            2.341: Contains a list of all the sendable attendees who are also required attendees.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_DTK">
            <summary>
            2.342: Contains the current time in UTC, used to determine the sort order of objects in a consolidated to-do list.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_ETK">
            <summary>
            2.343: Contains numerals "0" through "9" that are used to break a tie when PidLidToDoOrdinalDate (section 2.342) 
            is used to perform a sort of objects.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_FTK">
            <summary>
            2.344: Contains user-specifiable text to identify this Message object in a consolidated to-do list.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_GTK">
            <summary>
            2.345: PidLidTrustRecipientHighlights.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_HTK">
            <summary>
            2.346: Specifies whether Transport Neutral Encapsulation Format (TNEF) is to be included on a message 
            when the message is converted from TNEF to MIME or SMTP format.
            Data Type: Boolean.
            </summary>
        </member>
        <member name="F:c_LEK.c_JTK">
            <summary>
            2.347: Contains the value of PidTagMessageDeliveryTime (section 2.889) when modifying PidLidFlagRequest (section 2.135).
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_KTK">
            <summary>
            2.348: Specifies the voting option that a respondent has selected.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_MTK">
            <summary>
            2.349: Specifies what voting responses the user can make in response to the message.
            Data Type: Binary.
            </summary>
        </member>
        <member name="F:c_LEK.c_LTK">
            <summary>
            2.350: Specifies the wedding anniversary of the contact, at 0:00 in the client's local time zone 
            and it is saved without any time zone conversions.
            Data Type: Time.
            </summary>
        </member>
        <member name="F:c_LEK.c_NTK">
            <summary>
            2.351: Identifies the number of weeks that occur between each meeting.
            Data Type: Integer16.
            </summary>
        </member>
        <member name="F:c_LEK.c_OTK">
            <summary>
            2.352: Contains the value of the PidLidLocation property (section 2.157) from the associated Meeting object.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_PTK">
            <summary>
            2.353: Specifies the complete address of the contact's work address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_QTK">
            <summary>
            2.354: Specifies the city or locality portion of the contact's work address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_RTK">
            <summary>
            2.355: Specifies the country or region portion of the contact's work address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_STK">
            <summary>
            2.356: Specifies the country code portion of the contact's work address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_TTK">
            <summary>
            2.357: Specifies the postal code (ZIP code) portion of the contact's work address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_UTK">
            <summary>
            2.358: Specifies the post office box portion of the contact's work address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_VTK">
            <summary>
            2.359: Specifies the state or province portion of the contact's work address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_WTK">
            <summary>
            2.360: Specifies the street portion of the contact's work address.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_XTK">
            <summary>
            2.361: Indicates the yearly interval of the appointment or meeting.
            Data Type: Integer16.
            </summary>
        </member>
        <member name="F:c_LEK.c_YTK">
            <summary>
            2.362: Specifies the phonetic pronunciation of the contact's company name.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_ZTK">
            <summary>
            2.363: Specifies the phonetic pronunciation of the contact's given name.
            Data Type: String.
            </summary>
        </member>
        <member name="F:c_LEK.c_AUK">
            <summary>
            2.364: Specifies the phonetic pronunciation of the contact's surname.
            Data Type: String.
            </summary>
        </member>
        <member name="T:c_WKH">
            <summary>
            Specifies data type of the property value.
            </summary>
        </member>
        <member name="T:c_TJH">
            <summary>
            Specifies a property set.	
            </summary>
        </member>
        <member name="F:c_TJH.c_XFB">
            <summary>
            Unknown property set.
            </summary>
        </member>
        <member name="F:c_TJH.c_VQJ">
            <summary>
            MAPI property set.
            </summary>
        </member>
        <member name="F:c_TJH.c_UJH">
            <summary>
            Client string publicly visible. 
            </summary>
        </member>
        <member name="F:c_TJH.c_TMH">
            <summary>
            Specifies an Internet headers.
            </summary>
        </member>
        <member name="F:c_TJH.c_WQJ">
            <summary>
            Common property set.
            </summary>
        </member>
        <member name="F:c_TJH.c_XQJ">
            <summary>
            Specifies a Contact.
            </summary>
        </member>
        <member name="F:c_TJH.c_YQJ">
            <summary>
            Specifies a Calendar.
            </summary>
        </member>
        <member name="F:c_TJH.c_ZQJ">
            <summary>
            Specifies a Calendar.
            </summary>
        </member>
        <member name="F:c_TJH.c_ARJ">
            <summary>
            Specifies a Journal.
            </summary>
        </member>
        <member name="F:c_TJH.c_BRJ">
            <summary>
            Specifies a Messaging.
            </summary>
        </member>
        <member name="F:c_TJH.c_CRJ">
            <summary>
            Specifies a Sticky note.
            </summary>
        </member>
        <member name="F:c_TJH.c_DRJ">
            <summary>
            Specifies a RSS feed.
            </summary>
        </member>
        <member name="F:c_TJH.c_ERJ">
            <summary>
            Specifies a Task.
            </summary>
        </member>
        <member name="F:c_TJH.c_FRJ">
            <summary>
            Specifies an Undefined messaging.
            </summary>
        </member>
        <member name="F:c_TJH.c_GRJ">
            <summary>
            Specifies a Sync.
            </summary>
        </member>
        <member name="F:c_TJH.c_HRJ">
            <summary>
            Specifies a Sharing.
            </summary>
        </member>
        <member name="F:c_TJH.c_JRJ">
            <summary>
            Specifies a Calendar.
            </summary>
        </member>
        <member name="F:c_TJH.c_KRJ">
            <summary>
            Specifies an attachment.
            </summary>
        </member>
        <member name="F:c_PPJ.c_HD">
            <summary>
            The attachment has just been created.
            </summary>
        </member>
        <member name="F:c_PPJ.c_BQJ">
            <summary>
            The attachment is a normal attachment. This is the most common value. PidTagAttachDataBinary contains the attachment data.
            </summary>
        </member>
        <member name="F:c_PPJ.c_GVK">
            <summary>
            PidTagAttachLongPathname contains a fully qualified path identifying the attachment To recipients with access to a common file server.
            </summary>
        </member>
        <member name="F:c_PPJ.c_HVK">
            <summary>
            PidTagAttachLongPathname contains a fully qualified path identifying the attachment.
            </summary>
        </member>
        <member name="F:c_PPJ.c_QPJ">
            <summary>
            The attachment is an embedded message.
            </summary>
        </member>
        <member name="F:c_PPJ.c_JVK">
            <summary>
            PidTagAttachDataObject contains data in an application-specific format.
            </summary>
        </member>
        <member name="F:c_VPJ.c_KVK">
            <summary>Message store.</summary>
        </member>
        <member name="F:c_VPJ.c_MVK">
            <summary>Address book.</summary>
        </member>
        <member name="F:c_VPJ.c_LVK">
            <summary>Folder.</summary>
        </member>
        <member name="F:c_VPJ.c_NVK">
            <summary>Address book container.</summary>
        </member>
        <member name="F:c_VPJ.c_OVK">
            <summary>Message.</summary>
        </member>
        <member name="F:c_VPJ.c_PVK">
            <summary>(Individual) Recipient.</summary>
        </member>
        <member name="F:c_VPJ.c_WPJ">
            <summary>Attachment.</summary>
        </member>
        <member name="F:c_VPJ.c_QVK">
            <summary>Distribution list (recipient).</summary>
        </member>
        <member name="F:c_VPJ.c_RVK">
            <summary>Profile section.</summary>
        </member>
        <member name="F:c_VPJ.c_SVK">
            <summary>Status object.</summary>
        </member>
        <member name="F:c_VPJ.c_TVK">
            <summary>Session.</summary>
        </member>
        <member name="F:c_VPJ.c_UVK">
            <summary>Form information.</summary>
        </member>
        <member name="F:c_VVK.c_HD">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:c_VVK.c_BZB">
            <summary>
            The message is marked as having been read.
            </summary>
        </member>
        <member name="F:c_VVK.c_WVK">
            <summary>
            The message is still being composed. This bit is cleared by the server when responding to RopSubmitMessage with a success code. See [MS-OXOMSG] for details.
            </summary>
        </member>
        <member name="F:c_VVK.c_XVK">
            <summary>
            The message includes a request for a resend operation with a non-delivery report. See [MS-OXOMSG] for details.
            </summary>
        </member>
        <member name="F:c_VVK.c_YVK">
            <summary>
            The message has not been modified since it was first saved (if unsent) or it was delivered (if sent).
            </summary>
        </member>
        <member name="F:c_VVK.c_ZVK">
            <summary>
            The message is marked for sending as a result of a call to RopSubmitMessage [MS-OXOMSG].
            </summary>
        </member>
        <member name="F:c_VVK.c_AWK">
            <summary>
            The message has at least one attachment. This flag corresponds to the message's PidTagHasAttachmentsproperty.
            </summary>
        </member>
        <member name="F:c_VVK.c_BWK">
            <summary>
            The user receiving the message was also the user who sent the message.
            </summary>
        </member>
        <member name="F:c_VVK.c_CWK">
            <summary>
            The message is an FAI message.
            </summary>
        </member>
        <member name="F:c_VVK.c_DWK">
            <summary>
            The user who sent the message has requested notification when a recipient first reads it.
            </summary>
        </member>
        <member name="F:c_VVK.c_EWK">
            <summary>
            The user who sent the message has requested notification when a recipient deletes it before reading or the Message object expires as specified in [MS-OXOMSG].
            </summary>
        </member>
        <member name="F:c_VVK.c_FWK">
            <summary>
            The message has been read at least once. This flag is set or cleared by the server whenever the <strong>mfRead</strong> flag is set or cleared.
            </summary>
        </member>
        <member name="F:c_VVK.c_GWK">
            <summary>
            The incoming message arrived over the Internet and originated either outside the organization or from a source the gateway does not consider trusted.
            </summary>
        </member>
        <member name="F:c_VVK.c_HWK">
            <summary>
            The incoming message arrived over an external link other than X.400 or the Internet. It originated either outside the organization or from a source the gateway does not consider trusted.
            </summary>
        </member>
        <member name="F:c_JWK.c_KWK">
            <summary>
            The message store supports properties that contain ANSI (8-bit) characters.
            </summary>
        </member>
        <member name="F:c_JWK.c_MWK">
            <summary>
            The message store supports attachments (OLE or non-OLE) to messages.
            </summary>
        </member>
        <member name="F:c_JWK.c_LWK">
            <summary>
            The message store supports categorized views of tables.
            </summary>
        </member>
        <member name="F:c_JWK.c_NWK">
            <summary>
            The message store supports creation of new messages.
            </summary>
        </member>
        <member name="F:c_JWK.c_OWK">
            <summary>
            Entry identifiers for the objects in the message store are unique, that is, never reused during the life of the store.
            </summary>
        </member>
        <member name="F:c_JWK.c_PWK">
            <summary>
            The message store supports HTML messages, stored in the PR_BODY_HTML (PidTagBodyHtml) property. 
            If your development environment uses a MAPIDEFS.H file that does not include STORE_HTML_OK, use the value 0x00010000 instead.
            </summary>
        </member>
        <member name="F:c_JWK.c_QWK">
            <summary>
            In a wrapped PST store, indicates that when a new message arrives at the store, the store performs rules and spam filter processing on the message separately.
            The store calls IMAPISupport::Notify, setting fnevNewMail in the NOTIFICATION structure that is passed as a parameter, 
            and then passes the details of the new message to the listening client. 
            Subsequently, when the listening client receives the notification, it does not process rules on the message.
            </summary>
        </member>
        <member name="F:c_JWK.c_RWK">
            <summary>
            This flag is reserved and should not be used.
            </summary>
        </member>
        <member name="F:c_JWK.c_SWK">
            <summary>
            The message store supports modification of its existing messages.
            </summary>
        </member>
        <member name="F:c_JWK.c_TWK">
            <summary>
            The message store supports multivalued properties, guarantees the stability of value order in a multivalued property throughout a save operation,
            and supports instantiation of multivalued properties in tables.
            </summary>
        </member>
        <member name="F:c_JWK.c_UWK">
            <summary>
            The message store supports notifications.
            </summary>
        </member>
        <member name="F:c_JWK.c_VWK">
            <summary>
            The message store supports OLE attachments. The OLE data can be accessed through an IStorage interface,
            such as that available through the PR_ATTACH_DATA_OBJ (PidTagAttachDataObject) property.
            </summary>
        </member>
        <member name="F:c_JWK.c_WWK">
            <summary>
            The folders in this store are public (multi-user), not private (possibly multi-instance but not multi-user).
            </summary>
        </member>
        <member name="F:c_JWK.c_XWK">
            <summary>
            The MAPI Protocol Handler will not crawl the store, and the store is responsible for pushing any changes through notifications to the indexer to have messages indexed.
            </summary>
        </member>
        <member name="F:c_JWK.c_YWK">
            <summary>
            All interfaces for the message store have a read-only access level.
            </summary>
        </member>
        <member name="F:c_JWK.c_ZWK">
            <summary>
            The message store supports restrictions.
            </summary>
        </member>
        <member name="F:c_JWK.c_AXK">
            <summary>
            The message store supports Rich Text Format (RTF) messages, usually compressed, and the store itself keeps PR_BODY and PR_RTF_COMPRESSED synchronized.
            </summary>
        </member>
        <member name="F:c_JWK.c_BXK">
            <summary>
            Indicates that rules should be stored in this PST store even if it is not the default store.
            When STORE_RULES_OK is used in conjunction with NON_EMS_XP_SAVE, rules are able to run on non-default PST wrapped stores.
            </summary>
        </member>
        <member name="F:c_JWK.c_CXK">
            <summary>
            The message store supports search-results folders.
            </summary>
        </member>
        <member name="F:c_JWK.c_DXK">
            <summary>
            The message store supports sorting views of tables.
            </summary>
        </member>
        <member name="F:c_JWK.c_EXK">
            <summary>
            The message store supports marking a message for submission.
            </summary>
        </member>
        <member name="F:c_JWK.c_FXK">
            <summary>
            The message store supports storage of RTF messages in uncompressed form. 
            An uncompressed RTF stream is identified by the value dwMagicUncompressedRTF in the stream header. The dwMagicUncompressedRTF value is defined in the RTFLIB.H file.
            </summary>
        </member>
        <member name="F:c_JWK.c_GXK">
            <summary>
            Indicates that the message store supports Unicode storage.
            A client can look for the presence of the flag to decide whether to request or to save Unicode information to the store.
            </summary>
        </member>
        <member name="T:c_XHH">
            <summary>
            Specifies a priority of the message (<see cref="!:PropertyTag.PidTagPriority"/>).
            </summary>
        </member>
        <member name="F:c_XHH.c_HXK">
            <summary>
            The message is not urgent.
            </summary>
        </member>
        <member name="F:c_XHH.c_GFH">
            <summary>
            The message has normal priority.
            </summary>
        </member>
        <member name="F:c_XHH.c_JXK">
            <summary>
            The message is urgent.
            </summary>
        </member>
        <member name="T:c_YHH">
            <summary>
            Specifies a level of importance of the message (<see cref="!:PropertyTag.PidTagImportance"/>).
            </summary>
        </member>
        <member name="F:c_YHH.c_FFH">
            <summary>
            The message has low importance.
            </summary>
        </member>
        <member name="F:c_YHH.c_GFH">
            <summary>
            The message has normal importance.
            </summary>
        </member>
        <member name="F:c_YHH.c_HFH">
            <summary>
            The message has high importance.
            </summary>
        </member>
        <member name="T:c_KXK">
            <summary>
            Specifies a sensitivity of the message (<see cref="!:PropertyTag.PidTagSensitivity"/>).
            </summary>
        </member>
        <member name="F:c_KXK.c_HD">
            <summary>
            The message has no special sensitivity.
            </summary>
        </member>
        <member name="F:c_KXK.c_MXK">
            <summary>
            The message is personal.
            </summary>
        </member>
        <member name="F:c_KXK.c_LXK">
            <summary>
            The message is private.
            </summary>
        </member>
        <member name="F:c_KXK.c_NXK">
            <summary>
            The message is designated company confidential.
            </summary>
        </member>
        <member name="T:c_OXK">
            <summary>
            Specifies the operations available to the client for the object (<see cref="!:PropertyTag.PidTagAccess"/>).
            </summary>
        </member>
        <member name="F:c_OXK.c_WFB">
            <summary>
            Write access.
            </summary>
        </member>
        <member name="F:c_OXK.c_BZB">
            <summary>
            Read access.
            </summary>
        </member>
        <member name="F:c_OXK.c_MD">
            <summary>
            Delete access.
            </summary>
        </member>
        <member name="F:c_OXK.c_PXK">
            <summary>
            Create subfolders in the folder hierarchy.
            </summary>
        </member>
        <member name="F:c_OXK.c_QXK">
            <summary>
            Create content messages.
            </summary>
        </member>
        <member name="F:c_OXK.c_RXK">
            <summary>
            Create associated content messages.
            </summary>
        </member>
        <member name="T:c_SXK">
            <summary>
            Specifies the the client's access level (<see cref="!:PropertyTag.PidTagAccessLevel"/>).
            </summary>
        </member>
        <member name="F:c_SXK.c_K3A">
            <summary>
            Read-only access.
            </summary>
        </member>
        <member name="F:c_SXK.c_TXK">
            <summary>
            Write access.
            </summary>
        </member>
        <member name="T:c_UXK">
            <summary>
            Contains the last verb executed (<see cref="!:PropertyTag.PidTagLastVerbExecuted"/>).
            </summary>
        </member>
        <member name="T:c_G1K">
            <summary>
            An options for the <see cref="!:MsgMessage"/> object.
            </summary>
        </member>
        <member name="P:c_G1K.c_M2K">
            <summary>
            Gets or sets the value indicating whether property values are loaded into memory immediately.
            </summary>
            <value>True - load the values immediately; false - load values when requested.</value>
            <remarks>
            Immediate behavior loads whole message into the memory. 
            Delayed behavior keeps the file opened and reads the values every time they are requested.
            </remarks>
        </member>
        <member name="P:c_G1K.c_AOH">
            <summary>
            Gets the preferred order when reading the <see cref="!:MsgMessage.BodyText"/>.
            </summary>
            <value>True - prefer text from BodyRtf; false - prefer text from PidTagBody.</value>
        </member>
        <member name="P:c_G1K.c_BOH">
            <summary>
            Gets the preferred order when reading the <see cref="!:MsgMessage.BodyHtml"/>.
            </summary>
            <value>True - prefer text from BodyRtf; false - prefer text from PidTagBodyHtml.</value>
        </member>
        <member name="T:c_VFH">
            <summary>
            A MSG message.
            </summary>
        </member>
        <member name="M:c_VFH.c_HKH(System.Boolean)">
            <summary>Gets the Body encoding originally stored in the MSG.</summary>
        </member>
        <member name="M:c_VFH.c_X1K(System.Boolean)">
            <summary>Gets the Message encoding originally stored in the MSG.</summary>
        </member>
        <member name="M:c_VFH.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:MsgMessage"/> class.
            </summary>
        </member>
        <member name="M:c_VFH.#ctor(c_VFH)">
            <summary>
            Initializes a new instance of the <see cref="!:MsgMessage"/> class.
            </summary>
            <param name="parentMessage">A parent <see cref="!:MsgMessage"/> object.</param>
        </member>
        <member name="M:c_VFH.c_QKH">
            <summary>
            Gets a HTML text parsed from the BODY-RTF of this <see cref="!:MsgMessage"/>.
            </summary>
            <returns>A HTML text parsed from the BODY-RTF of the message.</returns>
        </member>
        <member name="M:c_VFH.c_NKH">
            <summary>
            Gets a plain text parsed from the BODY-RTF of this <see cref="!:MsgMessage"/>.
            </summary>
            <returns>A plain text parsed from the BODY-RTF of the message.</returns>
        </member>
        <member name="M:c_VFH.c_DHH(System.String)">
            <summary>
            Sets the <see cref="!:BodyText"/> and the <see cref="!:BodyRtf"/> of this <see cref="!:MsgMessage"/> from a plain text.
            </summary>
            <param name="plainText">A plain text to set as the BODY of the message.</param>
        </member>
        <member name="M:c_VFH.c_EHH(System.String)">
            <summary>
            Sets the <see cref="!:BodyHtml"/> and the <see cref="!:BodyRtf"/> of this <see cref="!:MsgMessage"/> from a HTML text.
            </summary>
            <param name="html">A HTML text to set as the BODY of the message.</param>
        </member>
        <member name="M:c_VFH.c_VJH(System.String,c_TJH,System.String)">
            <summary>
            Adds a named property to the properties.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="set">Set of the property.</param>
            <param name="value">Value of the property.</param>
            <returns>Added named property.</returns>
        </member>
        <member name="M:c_VFH.c_VJH(System.String,c_TJH,System.String[])">
            <summary>
            Adds a named property to the properties.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="set">Set of the property.</param>
            <param name="multiValue">Values of the property.</param>
            <returns>Added named property.</returns>
        </member>
        <member name="M:c_VFH.c_VJH(System.String,c_TJH,System.Int32)">
            <summary>
            Adds a named property to the properties.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="set">Set of the property.</param>
            <param name="value">Value of the property.</param>
            <returns>Added named property.</returns>
        </member>
        <member name="M:c_VFH.c_VJH(c_LEK,c_TJH,System.String)">
            <summary>
            Adds a named property to the properties.
            </summary>
            <param name="lid">Long ID (LID) of the property.</param>
            <param name="set">Set of the property.</param>
            <param name="value">Value of the property.</param>
            <returns>Added named property.</returns>
        </member>
        <member name="M:c_VFH.c_VJH(c_LEK,c_TJH,System.Int32)">
            <summary>
            Adds a named property to the properties.
            </summary>
            <param name="lid">Long ID (LID) of the property.</param>
            <param name="set">Set of the property.</param>
            <param name="value">Value of the property.</param>
            <returns>Added named property.</returns>
        </member>
        <member name="M:c_VFH.c_MHH(System.IO.Stream,System.String)">
            <summary>
            Sets a signed content with detached signature.
            </summary>
            <param name="signedMimeContent">A signed content with detached signature.</param>
            <param name="contentType">A Content-Type header.</param>
            <remarks>
            Content-Type examples: <br/>
            application/pkcs7-mime; smime-type=enveloped-data; name=smime.p7m <br/> 
            multipart/signed; micalg=SHA1; protocol="application/pkcs7-signature"; boundary="------_=_NextPart_001_26281961.C519BD40"; charset="iso-8859-2"
            </remarks>
        </member>
        <member name="M:c_VFH.c_JHH(System.IO.Stream,System.String,System.String)">
            <summary>
            Sets an encrypted or opaque signed content.
            </summary>
            <param name="mimeContent">An encrypted or signed content.</param>
            <param name="contentType">A Content-Type header.</param>
            <param name="contentTransferEncoding">A Content-Transfer-Encoding of the original data.</param>
            <remarks>
            Content-Type example: 
            application/pkcs7-mime; smime-type=enveloped-data; name="smime.p7m"
            application/pkcs7-mime; smime-type=signed-data; name="smime.p7m"
            </remarks>
        </member>
        <member name="M:c_VFH.c_F4B(System.String)">
            <summary>
            Loads the data of specified MSG file.
            </summary>
            <param name="filePath">Path to a MSG file.</param>
        </member>
        <member name="M:c_VFH.c_F4B(System.IO.Stream)">
            <summary>
            Loads the data of specified MSG file.
            </summary>
            <param name="intpuStream">Stream containing data of MSG file.</param>
        </member>
        <member name="M:c_VFH.c_O4B(System.String)">
            <summary>
            Saves this <see cref="!:MsgMessage"/> object to the specified file.
            </summary>
            <param name="filePath">Path to save the data to.</param>
        </member>
        <member name="M:c_VFH.c_O4B(System.IO.Stream)">
            <summary>
            Saves this <see cref="!:MsgMessage"/> object to the specified stream.
            </summary>
            <param name="fileStream">Stream to save the data to.</param>
        </member>
        <member name="M:c_VFH.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by this <see cref="!:MsgMessage"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:c_VFH.Dispose">
            <summary>
            Releases all resources used by this <see cref="!:MsgMessage"/> object.
            </summary>
        </member>
        <member name="P:c_VFH.c_O3K">
            <summary>Used to decode PidTagBody or PidTagBodyHtml.</summary>
        </member>
        <member name="P:c_VFH.c_P3K">
            <summary>Used to decode all other string properties on this Message object.</summary>
        </member>
        <member name="P:c_VFH.c_L3K">
            <summary>Used to encode PidTagBody or PidTagBodyHtml.</summary>
        </member>
        <member name="P:c_VFH.c_N3K">
            <summary>Used to encode all other string properties on this Message object.</summary>
        </member>
        <member name="P:c_VFH.c_SP">
            <summary>
            Gets the <see cref="!:MsgOptions"/>.
            </summary>
        </member>
        <member name="P:c_VFH.c_Y4K">
            <summary>
            Gets a value indicating whether this <see cref="!:MsgMessage"/> is embedded message of another <see cref="!:MsgMessage"/>. 
            </summary>
            <returns>True if this is an embedded message; false otherwise.</returns>
        </member>
        <member name="P:c_VFH.c_Z4K">
            <summary>
            Gets a parent <see cref="!:MsgMessage"/> object if this is an embedded message. 
            </summary>
            <returns>A parent <see cref="!:MsgMessage"/> object; or null reference (Nothing in Visual Basic) if this is not an embedded message.</returns>
        </member>
        <member name="P:c_VFH.c_EPH">
            <summary>
            Gets a collection of all properties associated with this <see cref="!:MsgMessage"/>.
            </summary>
            <returns>A property collection.</returns>
        </member>
        <member name="P:c_VFH.c_UPH">
            <summary>
            Gets a collection of all recipients associated with this <see cref="!:MsgMessage"/>.
            </summary>
            <returns>A recipient collection.</returns>
        </member>
        <member name="P:c_VFH.c_KPH">
            <summary>
            Gets a collection of all attachments associated with this <see cref="!:MsgMessage"/>.
            </summary>
            <returns>An attachment collection.</returns>
        </member>
        <member name="P:c_VFH.c_S0B">
            <summary>
            Gets or sets an encoding for the string properties of this <see cref="!:MsgMessage"/>.
            </summary>
            <value>An encoding of the string properties.</value>
        </member>
        <member name="P:c_VFH.c_CPH">
            <summary>
            Gets the class of this <see cref="!:MsgMessage"/>.
            </summary>
            <returns>A message class.</returns>
        </member>
        <member name="P:c_VFH.c_APH">
            <summary>
            Gets a value indicating whether this <see cref="!:MsgMessage"/> is Unicode encoded. 
            </summary>
            <value>True if the message is Unicode encoded; false otherwise.</value>
        </member>
        <member name="P:c_VFH.c_A5K">
            <summary>
            Gets or sets a value indicating whether this <see cref="!:MsgMessage"/> is read. 
            </summary>
            <value>True - message is marked as having been read; false otherwise.</value>
        </member>
        <member name="P:c_VFH.c_BQH">
            <summary>
            Gets or sets a value indicating whether this <see cref="!:MsgMessage"/> is still being composed. 
            </summary>
            <value>True - message is marked as being composed (it can be edited in Outlook); false - message is considered finished/sent.</value>
        </member>
        <member name="P:c_VFH.c_W0G">
            <summary>
            Gets or sets the ID of this <see cref="!:MsgMessage"/>.
            </summary>
            <value>A message ID.</value>
        </member>
        <member name="P:c_VFH.c_ZPH">
            <summary>
            Gets or sets the Priority of this <see cref="!:MsgMessage"/>.
            </summary>
            <value>A message Priority.</value>
        </member>
        <member name="P:c_VFH.c_AQH">
            <summary>
            Gets or sets the Importance of this <see cref="!:MsgMessage"/>.
            </summary>
            <value>A message Importance.</value>
        </member>
        <member name="P:c_VFH.c_B5K">
            <summary>
            Gets or sets the Sensitivity of this <see cref="!:MsgMessage"/>.
            </summary>
            <value>A message Sensitivity.</value>
        </member>
        <member name="P:c_VFH.c_NPH">
            <summary>
            Gets or sets the UTC date and time when the client submitted this <see cref="!:MsgMessage"/>.
            </summary>
            <value>A client submit UTC date and time.</value>
        </member>
        <member name="P:c_VFH.c_PPH">
            <summary>
            Gets or sets the UTC date and time when this <see cref="!:MsgMessage"/> was delivered.
            </summary>
            <value>A message's delivered UTC date and time.</value>
        </member>
        <member name="P:c_VFH.c_FPH">
            <summary>
            Gets or sets the plain text BODY (PidTagBody) of this <see cref="!:MsgMessage"/>.
            If PidTagBody is not present, returns the text taken from the <see cref="!:BodyRtf"/>, but only if RTF came from plain text 
            (this is if the \fromtext control word is specified within the RTF header).
            This behavior is reversed if the <see cref="!:Options"/>.<see cref="!:MsgOptions.PreferBodyTextFromRtf">PreferBodyTextFromRtf</see> is set to true.
            </summary>
            <value>A plain text BODY of the message.</value>
        </member>
        <member name="P:c_VFH.c_NQH">
            <summary>
            Gets the HTML BODY (PidTagBodyHtml) of this <see cref="!:MsgMessage"/>.
            If PidTagBodyHtml is not present, returns the text taken from the <see cref="!:BodyRtf"/>, but only if RTF came from HTML 
            (this is if the \fromhtml control word is specified within the RTF header).
            This behavior is reversed if the <see cref="!:Options"/>.<see cref="!:MsgOptions.PreferBodyHtmlFromRtf">PreferBodyHtmlFromRtf</see> is set to true.
            </summary>
            <value>A HTML BODY of the message.</value>
        </member>
        <member name="P:c_VFH.c_GPH">
            <summary>
            Gets or sets the BODY-RTF of this <see cref="!:MsgMessage"/>.
            </summary>
            <value>A BODY-RTF of the message.</value>
        </member>
        <member name="P:c_VFH.c_FTD">
            <summary>
            Gets or sets a SUBJECT of this <see cref="!:MsgMessage"/>.
            </summary>
            <value>A SUBJECT of the message.</value>
        </member>
        <member name="P:c_VFH.c_C5K">
            <summary>
            Gets a conversation topic of this <see cref="!:MsgMessage"/>.
            Conversation topic is simply the SUBJECT without prefix such as RE: FW: etc.
            </summary>
            <value>A conversation topic of the message.</value>
        </member>
        <member name="P:c_VFH.c_QPH">
            <summary>
            Gets or sets a sender e-mail address of this <see cref="!:MsgMessage"/>.
            </summary>
            <value>A sender e-mail address of the message.</value>
        </member>
        <member name="P:c_VFH.c_RPH">
            <summary>
            Gets or sets a name associated with the sender e-mail address of this <see cref="!:MsgMessage"/>.
            </summary>
            <value>A name associated with the sender e-mail address of the message.</value>
        </member>
        <member name="P:c_VFH.c_SPH">
            <summary>
            Gets or sets an e-mail address for the messaging user who is represented by the sender.
            </summary>
            <value>An e-mail address for the messaging user who is represented by the sender.</value>
            <remarks>
            When a client application sends a message on behalf of another client, it should set all the represented sender properties to the values for that client. 
            A messaging user sending on its own behalf typically leaves the represented sender properties unset.
            </remarks>
        </member>
        <member name="P:c_VFH.c_TPH">
            <summary>
            Gets or sets a name associated with the <see cref="!:MsgMessage.SenderRepresentingAddress"/> property.
            </summary>
            <value>A name associated with the <see cref="!:MsgMessage.SenderRepresentingAddress"/> property.</value>
        </member>
        <member name="P:c_VFH.c_YPH">
            <summary>
            Gets or sets the message headers of this <see cref="!:MsgMessage"/>.
            </summary>
            <value>A message headers.</value>
        </member>
        <member name="T:c_H1K">
            <summary>
            A collection of <see cref="!:NamedPropertyEntity"/> objects.
            </summary>
        </member>
        <member name="T:c_XFH">
            <summary>
            The exception that is thrown when an error related to an Outlook message occurs.
            </summary>
        </member>
        <member name="M:c_XFH.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="!:OutlookMessageException"/> with the specified message.
            </summary>
            <param name="message">Message that describes the error.</param>
        </member>
        <member name="M:c_XFH.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="!:OutlookMessageException"/> with the specified message and inner exception.
            </summary>
            <param name="message">Message that describes the error.</param>
            <param name="innerException">The exception that was the cause of this exception.</param>
        </member>
        <member name="T:c_YMH">
            <summary>
            A collection of <see cref="!:PropertyEntity"/> objects.
            </summary>
        </member>
        <member name="M:c_YMH.c_QTA(c_QMH)">
            <summary>
            Adds specified entity to the collection.
            </summary>
            <param name="entity">An entity to add.</param>
        </member>
        <member name="M:c_YMH.c_QTA(c_ZGH,System.Int16)">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_QTA(c_ZGH,System.Int32)">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_QTA(c_ZGH,System.Int64)">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_QTA(c_ZGH,System.Single)">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_QTA(c_ZGH,System.Double)">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_J6K(c_ZGH,System.Decimal)">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_K6K(c_ZGH,System.DateTime)">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_WJH(c_ZGH,System.DateTime)">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_M6K(c_ZGH,System.Int32)">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_QTA(c_ZGH,System.Boolean)">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_QTA(c_ZGH,System.String)">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_GQJ(c_ZGH,System.Byte[])">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_QTA(c_ZGH,System.Guid)">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_T1K(c_ZGH,System.Int16[])">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_T1K(c_ZGH,System.Int32[])">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_T1K(c_ZGH,System.Int64[])">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_T1K(c_ZGH,System.Single[])">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_T1K(c_ZGH,System.Double[])">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_L6K(c_ZGH,System.Decimal[])">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_N6K(c_ZGH,System.DateTime[])">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_O6K(c_ZGH,System.DateTime[])">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_T1K(c_ZGH,System.Guid[])">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_T1K(c_ZGH,System.String[])">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="M:c_YMH.c_P6K(c_ZGH,System.Byte[][])">
            <summary>
            Adds specified value to the collection.
            </summary>
            <param name="tag">A Property Tag.</param>
            <param name="value">A value to add.</param>
        </member>
        <member name="P:c_YMH.Item(c_ZGH)">
            <summary>
            Gets an entity with specified Property Tag.
            </summary>
            <param name="tag">Tag of the Property to get.</param>
            <returns>An entity; or null reference (Nothing in Visual Basic) if no such Property Tag was found.</returns>
        </member>
        <member name="P:c_YMH.Item(c_LEK)">
            <summary>
            Gets a collection containing all entities with specified Property LID.
            </summary>
            <param name="lid">LID of the Property to get.</param>
            <returns>An entity collection; or null reference (Nothing in Visual Basic) if no such Property LID was found.</returns>
        </member>
        <member name="P:c_YMH.Item(System.String)">
            <summary>
            Gets a collection containing all entities with specified Property Name.
            </summary>
            <param name="name">Name of the Property to get.</param>
            <returns>An entity collection; or null reference (Nothing in Visual Basic) if no such Property Name was found.</returns>
        </member>
        <member name="T:c_QMH">
            <summary>
            Represents a message property.
            </summary>
        </member>
        <member name="M:c_QMH.ToString">
            <summary>
            Returns a string identifying this <see cref="!:PropertyEntity"/> object.
            </summary>
            <returns>A string identifying this <see cref="!:PropertyEntity"/> object.</returns>
        </member>
        <member name="M:c_QMH.c_O7K">
            <summary>
            Returns a string identifying this <see cref="!:PropertyEntity"/> object.
            </summary>
            <returns>A string identifying this <see cref="!:PropertyEntity"/> object.</returns>
        </member>
        <member name="M:c_QMH.c_V5K">
            <summary>
            Returns a string representation of the Tag/LID/Name.
            </summary>
            <returns>A string representing the Tag/LID/Name.</returns>
        </member>
        <member name="M:c_QMH.c_D6K">
            <summary>
            Returns a string representation of the <see cref="!:Value"/> property.
            </summary>
            <returns>A string representing the the <see cref="!:Value"/> property.</returns>
        </member>
        <member name="P:c_QMH.c_HUB">
            <summary>
            Gets a kind of this <see cref="!:PropertyEntity"/> object.
            </summary>
            <returns>A kind of this <see cref="!:PropertyEntity"/> object.</returns>
        </member>
        <member name="P:c_QMH.c_N0">
            <summary>
            Gets a Property Tag of this <see cref="!:PropertyEntity"/> object.
            </summary>
            <returns>A Property Tag of this <see cref="!:PropertyEntity"/> object.</returns>
        </member>
        <member name="P:c_QMH.c_S4K">
            <summary>
            Gets a Property LID if this is a Numerical Named Property.
            </summary>
            <returns>A Property LID of this <see cref="!:PropertyEntity"/> object.</returns>
        </member>
        <member name="P:c_QMH.c_DOB">
            <summary>
            Gets a Property Name if this is a String Named Property.
            </summary>
            <returns>A Property Name of this <see cref="!:PropertyEntity"/> object.</returns>
        </member>
        <member name="P:c_QMH.c_RQH">
            <summary>
            Gets a data type of this <see cref="!:PropertyEntity"/> object.
            </summary>
            <returns>A data type of this <see cref="!:PropertyEntity"/> object.</returns>
        </member>
        <member name="P:c_QMH.c_Q5B">
            <summary>
            Gets or sets a value of this <see cref="!:PropertyEntity"/> object.
            </summary>
            <value>A value of this <see cref="!:PropertyEntity"/> object.</value>
        </member>
        <member name="T:c_J1K">
            <summary>
            A collection of <see cref="!:RecipientEntity"/> objects.
            </summary>
        </member>
        <member name="M:c_J1K.c_QTA(c_VHH,System.String)">
            <summary>
            Adds specified email address to recipients.
            </summary>
            <param name="recipientType">A type of the recipient.</param>
            <param name="emailAddress">An e-mail address.</param>
        </member>
        <member name="M:c_J1K.c_QTA(c_VHH,System.String,System.String)">
            <summary>
            Adds specified email address to recipients.
            </summary>
            <param name="recipientType">A type of the recipient.</param>
            <param name="emailAddress">An e-mail address.</param>
            <param name="displayName">A name associated with the specified e-mail address.</param>
        </member>
        <member name="T:c_MMH">
            <summary>
            A recipient entity.
            </summary>
        </member>
        <member name="P:c_MMH.c_EPH">
            <summary>
            Gets a collection of all properties associated with this <see cref="!:RecipientEntity"/>.
            </summary>
            <returns>A property collection.</returns>
        </member>
        <member name="P:c_MMH.c_VPH">
            <summary>
            Gets a type of this <see cref="!:RecipientEntity"/>.
            </summary>
        </member>
        <member name="P:c_MMH.c_JRH">
            <summary>
            Gets an e-mail address of this recipient.
            </summary>
            <returns>An e-mail address; or null reference (Nothing in Visual Basic) if no such address is specified within the property collection.</returns>
        </member>
        <member name="P:c_MMH.c_KRH">
            <summary>
            Gets an Display name property of this recipient.
            </summary>
            <returns>A Display name; or null reference (Nothing in Visual Basic) if no such property is specified within the property collection.</returns>
        </member>
        <member name="T:c_Z7K">
            <summary>
            This class is used for storing individual element from the color table from the rtf format.
            The element defines the RGB representation of the color and the name for this color.
            In addition, there are two optional parameters - tint and shade.
            </summary>
        </member>
        <member name="M:c_Z7K.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            RtfColorTableElement constructor.
            </summary>
            <param name="name">The name for the color defined.</param>
            <param name="red">The red component of the color. Between 0 and 255.</param>
            <param name="green">The green component of the color. Between 0 and 255.</param>
            <param name="blue">The blue component of the color. Between 0 and 255.</param>
            <param name="tint">The tint of the color. Between 0 and 255. 255 = no tint, 0 = white color. </param>
            <param name="shade">The shade of the color. Between 0 and 255. 255 = no shade, 0 = full shade, i.e. black color. </param>
            
        </member>
        <member name="M:c_Z7K.c_Q8K">
            <summary>
            Converts the RtfColorTableElement into CSS format line which
            defines the same color as the original RTF definition.
            </summary>
            <returns>The converted CSS color line. </returns>
        </member>
        <member name="P:c_Z7K.c_DOB">
            <summary>
            The name of the color element.
            </summary>
        </member>
        <member name="P:c_Z7K.c_N8K">
            <summary>
            The red component of the RGB color as an integer.
            </summary>
        </member>
        <member name="P:c_Z7K.c_O8K">
            <summary>
            The green component of the RGB color as an integer.
            </summary>
        </member>
        <member name="P:c_Z7K.c_P8K">
            <summary>
            The blue component of the RGB color as an integer.
            </summary>
        </member>
        <member name="P:c_Z7K.c_S8K">
            <summary>
            The tint of the color.
            </summary>
        </member>
        <member name="P:c_Z7K.c_T8K">
            <summary>
            The shade of the color.
            </summary>
        </member>
        <member name="T:c_U8K">
            <summary>
            This class is used for storing individual element from the font table from the rtf format.
            The element contains the font family type and the font used.
            </summary>
        </member>
        <member name="F:c_U8K.c_O9K">
            <summary>
            Specifies the pitch of a font in the font table.
            Default pitch =	0
            Fixed pitch	 = 1
            Variable pitch	= 2
            </summary>
        </member>
        <member name="M:c_U8K.#cctor">
            <summary>
            static constructor. It initializes the static decoder between Rtf and Css FontFamilies.
            </summary>
        </member>
        <member name="M:c_NGH.c_VAM(c_KAM)">
            <summary>
            Resolves all Escaped and Unicode encoded characters.
            </summary>
        </member>
        <member name="M:c_NGH.c_PGH">
            <summary>
            First creates document model, then the model is optimized
            and then it is printed into html.
            </summary>
        </member>
        <member name="M:c_YAM.c_KDM(System.Collections.Generic.List{c_JAM})">
            <summary>
            read the color table and save it into the model.
            \colortbl;\red0\green255\blue0;\red255\green0\blue0;...;
            semicolon after colortbl means \cf0 is auto color. Then indexing continues from 1,2,.
            </summary>
            <param name="groupElements">The list of rtf elements which contains the color table.</param>
        </member>
        <member name="M:c_YAM.c_JEM(System.String)">
            <summary>
            Conversion of the plain text which can contain \r or \n's and 
            we do not want them in html. (They have no textual function in rtf).
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:c_YAM.c_KEM(System.String)">
            <summary>
            Translates characters that have a meaning in html into special html code.
            </summary>
            <param name="text">The string to be translated.</param>
            <returns>The string with special characters replaced with their codes.</returns>
        </member>
        <member name="F:c_XCM.c_KT">
            <summary>
            Pointer to the RtfParagraph used to reach the current destination (depends on
            control words which change it and on class of the current destination (textpar, table, row, cell, etc...)).
            </summary>
        </member>
        <member name="M:c_XCM.c_LDM(System.String,System.Boolean)">
            <summary>
            Saves the text with the appropriate formatting into the proper place in the RtfModel.
            </summary>
            <param name="text">The text as a string.</param>
            <param name="isHtmlTag">Whether the text is a html tag.</param>
        </member>
        <member name="M:c_XCM.c_NXG">
            <summary>
            When creating the model of the document, it happens, especially in lists of RtfTexts, 
            that although a chunk of text has the same formatting, it is divided into different RtfTexts.
            This method works with lists of RtfTexts in the model and merges the groups of RtfTexts
            with the same formatting into one RtfText.
            </summary>
        </member>
        <member name="P:c_XCM.c_WDM">
            <summary>
            The current node in the document model.
            </summary>
        </member>
        <member name="T:c_ADM">
            <summary>
            This class represents a RTF table. It allows the conversion into html format.
            </summary>
        </member>
        <member name="T:c_PEM">
            <summary>
            RtfText class represents a chunk of text in the rtf document with one text formatting.
            </summary>
        </member>
        <member name="T:c_OEM">
            <summary>
            TextParagraph is a representation of textual rtf paragraph
            i.e. it consists of RtfTexts with applied paragraph formatting.
            It can also include rtf table.
            </summary>
        </member>
        <member name="M:c_OEM.c_NXG">
            <summary>
            Merges neighboring RtfTexts with the same formatting into one RtfText.
            </summary>
        </member>
        <member name="M:c_NEM.c_YCM">
            <summary>
            Converts the formatting into CSS stylesheet which will be used within a corresponding HTML tag.
            </summary>
            <returns>Rtf formatting converted into html.</returns>
        </member>
        <member name="P:c_SHM.c_ZHM">
            <summary>
            The distance from the leftmost edge of the row to the end of this cell (in twips, i.e. 20 / pt) without trgaph distance(s)
            </summary>
        </member>
        <member name="P:c_SHM.c_BJM">
            <summary>
            The distance from the leftmost edge of the row to the end of this cell (in twips, i.e. 20 / pt).
            </summary>
        </member>
        <member name="P:c_SHM.c_FJM">
            <summary>
            The width of this cell, computed from the previous cellX. In pt. Rounded to one decimal.
            </summary>
        </member>
        <member name="F:c_LGM.c_FMM">
            <summary>
            The font size in pt. If the font size is default, -1 is saved.
            </summary>
        </member>
        <member name="P:c_AHM.c_CKM">
            <summary>
            in twips
            </summary>
        </member>
        <member name="P:c_AHM.c_DJM">
            <summary>
            in twips
            </summary>
        </member>
        <member name="F:c_OFM.c_UMM">
            <summary>
            Current font (name of a font defined by the rtf document's font table).
            //(i.e. f3)
            </summary>
        </member>
        <member name="F:c_OFM.c_VMM">
            <summary>
            Current font style (italics, underlined, bold).
            </summary>
        </member>
        <member name="F:c_OFM.c_FMM">
            <summary>
            Current font size.
            </summary>
        </member>
        <member name="F:c_OFM.c_WMM">
            <summary>
            Name of the current color, i.e. cN.
            </summary>
        </member>
        <member name="T:c_P1">
            <summary>
            Implements CRC-32 checksum, a type of hash function used to produce
            a checksum which is a small number of bits from a large block of data.
            Useful to detect errors in transmission or storage.
            </summary>
        </member>
        <member name="M:c_P1.#ctor">
            <summary>
            Initializes a new instance of a <see cref="!:Crc32"/> class.
            </summary>
        </member>
        <member name="M:c_P1.c_Q1">
            <summary>
            Resets the instance of a <see cref="!:Crc32"/> class to an initial state.
            </summary>
        </member>
        <member name="M:c_P1.c_R1(System.Byte)">
            <summary>
            Updates the checksum with the specified byte.
            </summary>
            <param name="data">A byte to process.</param>
        </member>
        <member name="M:c_P1.c_R1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the contents of an array.
            </summary>
            <param name="data">An array of bytes.</param>
            <param name="offset">A zero-based offset in buffer at which to begin processing.</param>
            <param name="count">The number of bytes to process.</param>
        </member>
        <member name="M:c_P1.c_R1(System.Byte[])">
            <summary>
            Updates the checksum with the contents of an array.
            </summary>
            <param name="data">An array of bytes.</param>
        </member>
        <member name="M:c_P1.c_R1(System.IO.Stream)">
            <summary>
            Updates the checksum with the contents of a stream.
            </summary>
            <param name="input">A readable input stream.</param>
        </member>
        <member name="M:c_P1.c_R1(System.IO.Stream,System.Int64)">
            <summary>
            Updates the checksum with the contents of a stream.
            </summary>
            <param name="input">A readable input stream.</param>
            <param name="count">Number of bytes to process.</param>
        </member>
        <member name="M:c_P1.c_WO(System.String)">
            <summary>
            Updates the checksum with the contents of a file.
            </summary>
            <param name="path">Path to a file.</param>
        </member>
        <member name="M:c_P1.c_WO(System.String,System.Int64,System.Int64)">
            <summary>
            Updates the checksum with the contents of a file.
            </summary>
            <param name="path">Path to a file.</param>
            <param name="offset">Byte offset to a position at which to start CRC calculating.</param>
            <param name="count">Number of bytes to process.</param>
        </member>
        <member name="P:c_P1.c_Z1">
            <summary>
            Returns the checksum computed so far.
            </summary>
        </member>
        <member name="M:c_ZAJ.c_ABJ(System.String,System.Boolean)">
            <summary>
            Validates whether the headerName consists of ASCII characters.
            </summary>
            <param name="headerName">header name</param>
            <param name="throwOnError">behavior on error</param>
            <returns>true if headerName is valid, false for invalid headerName (or throws ArgumentException).</returns>
        </member>
        <member name="T:c_EVG">
            <summary>
            Provides methods for constructing exception messages.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailClientExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.Mail.ImapException"/>, <see cref="T:ComponentPro.Net.Mail.Pop3Exception"/>, and <see cref="T:ComponentPro.Net.Mail.SmtpException"/> classes.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.ConnectionFailed">
            <summary>
            Unable to contact the service point.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.SocketError">
            <summary>
            The error at transport level occured.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.UnknownHost">
            <summary>
            The name resolver service could not resolve the host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.NotFinished">
            <summary>
            An operation is pending.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.UnknownProxyHost">
            <summary>
            The name resolver service could not resolve the proxy host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.OperationCancelled">
            <summary>
            The operation was aborted by a call to the <see cref="M:ComponentPro.Net.Mail.Imap.Cancel"/>, <see cref="M:ComponentPro.Net.Mail.Pop3.Cancel"/>, or <see cref="M:ComponentPro.Net.Mail.Smtp.Cancel"/> method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.Mail.ImapException.Status"/>, <see cref="P:ComponentPro.Net.Mail.Pop3Exception.Status"/>, and <see cref="P:ComponentPro.Net.Mail.SmtpException.Status"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.InvalidResponse">
            <summary>
            The server response was not a valid IMAP4 response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.Timeout">
            <summary>
            No response was received during the time-out period for a request.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.LoginRequired">
            <summary>
            The operation cannot be performed before a successful login.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.OperationFailure">
            <summary>
            The requested operation could not be completed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.ParsingError">
            <summary>
            Error while parsing the server response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.SendFailure">
            <summary>
            A request could not be sent to the remote server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientExceptionStatus.ReceiveFailure">
            <summary>
            A complete response was not received from the remote server due to an error at the transport level.
            </summary>
        </member>
        <member name="T:ComponentPro.Licensing.Mail.UltimateLicenseExceptionStatus">
            <summary>
            License check status.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:ComponentPro.Licensing.Mail.UltimateLicenseExceptionStatus.InvalidKey">
            <summary>
            Invalid license key.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Mail.UltimateLicenseExceptionStatus.InvalidDate">
            <summary>
            Expiry date is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Mail.UltimateLicenseExceptionStatus.LicenseExpired">
            <summary>
            License is expired.
            </summary>
        </member>
        <member name="T:ComponentPro.Licensing.Mail.UltimateLicenseException">
            <summary>Represents the License Exception.</summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:ComponentPro.Licensing.Mail.UltimateLicenseException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Mail.UltimateLicenseException"></see> class with the specified error message.</summary>
            <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
        </member>
        <member name="M:ComponentPro.Licensing.Mail.UltimateLicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Mail.UltimateLicenseException"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes. </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that contains the information required to serialize the new <see cref="T:ComponentPro.Licensing.Mail.UltimateLicenseException"></see>. </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the source and destination of the serialized stream associated with the new instance. </param>
        </member>
        <member name="M:ComponentPro.Licensing.Mail.UltimateLicenseException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Mail.UltimateLicenseException"></see> class with the specified error message and inner exception.</summary>
            <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception. </param>
        </member>
        <member name="P:ComponentPro.Licensing.Mail.UltimateLicenseException.Status">
            <summary>Gets the error code.</summary>
            <returns>An <see cref="T:ComponentPro.Licensing.Mail.UltimateLicenseExceptionStatus"></see> value that indicates the error that occurred.</returns>
        </member>
        <member name="T:ComponentPro.Licensing.Mail.UltimateLicenseManager">
            <summary>
            ComponentPro License Manager.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:ComponentPro.Licensing.Mail.UltimateLicenseManager.SetLicenseKey(System.String)">
            <summary>
            Sets the trial license key.
            </summary>
            <param name="licenseKey">The license key string.</param>
        </member>
        <member name="P:ComponentPro.Licensing.Mail.UltimateLicenseManager.RemainingDays">
            <summary>
            Gets remaining trial days.
            </summary>
        </member>
        <member name="T:c_OOM">
            <summary>
            Queries a DNS server for MX records.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.Smtp">
            <summary>
            Contains essential members for communication with standard and secure SMTP servers.
            </summary>
            <remarks>All members of this class are thread-safe.</remarks>
            <example source="$ComponentPro.Mail/Smtp/Connect,$ComponentPro.Mail/MailCreateReceiveRequest"/>
        </member>
        <member name="F:ComponentPro.Net.Mail.Smtp.DefaultPort">
            <summary>
            Default SMTP port (25).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Smtp.DefaultImplicitSslPort">
            <summary>
            Default SMTP/Implicit SSL port (465).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Smtp.AlternativeExplicitSslPort">
            <summary>
            Alternative SMTP/Explicit SSL port (587).
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnAuthenticateCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.AuthenticateCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.AuthenticateAsync(System.String,ComponentPro.Net.Mail.SmtpAuthenticationMethod,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SMTP server using an OAuth token.
            </summary>
            <param name="token">Authentication token.</param>
            <param name="authenticationMethod">Authentication method (only OAuth 2.0 is supported at the moment).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.AuthenticateAsync(System.String,ComponentPro.Net.Mail.SmtpAuthenticationMethod,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SMTP server using an OAuth token.
            </summary>
            <param name="token">Authentication token.</param>
            <param name="authenticationMethod">Authentication method (only OAuth 2.0 is supported at the moment).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.AuthenticateAsync(System.String,ComponentPro.Net.Mail.SmtpAuthenticationMethod)">
            <summary>
            Asynchronously authenticates the user to the SMTP server using an OAuth token.
            </summary>
            <param name="token">Authentication token.</param>
            <param name="authenticationMethod">Authentication method (only OAuth 2.0 is supported at the moment).</param>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.Mail.SmtpAuthenticationMethod,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the specified user to the remote SMTP server with the specified credentials using the specified authentication method.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.Mail.SmtpAuthenticationMethod,System.Object)">
            <summary>
            Asynchronously authenticates the specified user to the remote SMTP server with the specified credentials using the specified authentication method.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.AuthenticateAsync(System.String,System.String,ComponentPro.Net.Mail.SmtpAuthenticationMethod)">
            <summary>
            Asynchronously authenticates the specified user to the remote SMTP server with the specified credentials using the specified authentication method.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.AuthenticateAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the specified user to the remote SMTP server with the specified credentials.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.AuthenticateAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously authenticates the specified user to the remote SMTP server with the specified credentials.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.AuthenticateAsync(System.String,System.String)">
            <summary>
            Asynchronously authenticates the specified user to the remote SMTP server with the specified credentials.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnConnectCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.ConnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ConnectAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously connects to the SMTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ConnectAsync(System.String,System.Object)">
            <summary>
            Asynchronously connects to the SMTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ConnectAsync(System.String)">
            <summary>
            Asynchronously connects to the SMTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ConnectAsync(System.String,System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously connects to the SMTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. (eg. 25).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>
            Asynchronously connects to the SMTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. (eg. 25).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ConnectAsync(System.String,System.Int32)">
            <summary>
            Asynchronously connects to the SMTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. (eg. 25).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ConnectAsync(System.String,System.Int32,ComponentPro.Net.SecurityMode,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously connects to the SMTP server with the specified security.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 465).</param>
            <param name="security">SMTP security type.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ConnectAsync(System.String,System.Int32,ComponentPro.Net.SecurityMode,System.Object)">
            <summary>
            Asynchronously connects to the SMTP server with the specified security.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 465).</param>
            <param name="security">SMTP security type.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ConnectAsync(System.String,System.Int32,ComponentPro.Net.SecurityMode)">
            <summary>
            Asynchronously connects to the SMTP server with the specified security.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 465).</param>
            <param name="security">SMTP security type.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ConnectAsync(System.String,ComponentPro.Net.SecurityMode,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously connects to the SMTP server with the specified security. Uses port 25 for no SSL, 587 for explicit SSL and 465 for implicit SSL.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
            <param name="security">SMTP security type.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ConnectAsync(System.String,ComponentPro.Net.SecurityMode,System.Object)">
            <summary>
            Asynchronously connects to the SMTP server with the specified security. Uses port 25 for no SSL, 587 for explicit SSL and 465 for implicit SSL.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
            <param name="security">SMTP security type.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ConnectAsync(System.String,ComponentPro.Net.SecurityMode)">
            <summary>
            Asynchronously connects to the SMTP server with the specified security. Uses port 25 for no SSL, 587 for explicit SSL and 465 for implicit SSL.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
            <param name="security">SMTP security type.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnDisconnectCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.DisconnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.DisconnectAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously disconnects from the SMTP server and returns exit message from the server.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <remarks>This method represents SMTP QUIT command.</remarks>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.DisconnectAsync(System.Object)">
            <summary>
            Asynchronously disconnects from the SMTP server and returns exit message from the server.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.DisconnectAsync">
            <summary>
            Asynchronously disconnects from the SMTP server and returns exit message from the server.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnReadResponseCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.SmtpResponse})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.ReadResponseCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ReadResponseAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.SmtpResponse},System.Object)">
            <summary>
            Asynchronously returns the corresponding response of the SMTP server to the command that was sent using the <see cref="M:ComponentPro.Net.Mail.Smtp.SendCommand(System.String)"/> method.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Smtp\Async\SendCommand_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ReadResponseAsync(System.Object)">
            <summary>
            Asynchronously returns the corresponding response of the SMTP server to the command that was sent using the <see cref="M:ComponentPro.Net.Mail.Smtp.SendCommand(System.String)"/> method.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Smtp\Async\SendCommand_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ReadResponseAsync">
            <summary>
            Asynchronously returns the corresponding response of the SMTP server to the command that was sent using the <see cref="M:ComponentPro.Net.Mail.Smtp.SendCommand(System.String)"/> method.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Smtp\Async\SendCommand_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnSendCommandCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.SendCommandCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendCommandAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends user-defined command to the server.
            </summary>
            <param name="command">User-defined command text (without line terminator).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Smtp\Async\SendCommand_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendCommandAsync(System.String,System.Object)">
            <summary>
            Asynchronously sends user-defined command to the server.
            </summary>
            <param name="command">User-defined command text (without line terminator).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Smtp\Async\SendCommand_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendCommandAsync(System.String)">
            <summary>
            Asynchronously sends user-defined command to the server.
            </summary>
            <param name="command">User-defined command text (without line terminator).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Smtp\Async\SendCommand_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnUpgradeConnectionCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.UpgradeConnectionCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.UpgradeConnectionAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously secures the connection with TLS/SSL using default parameters.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.UpgradeConnectionAsync(System.Object)">
            <summary>
            Asynchronously secures the connection with TLS/SSL using default parameters.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.UpgradeConnectionAsync">
            <summary>
            Asynchronously secures the connection with TLS/SSL using default parameters.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnKeepAliveCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.KeepAliveCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.KeepAliveAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a NOOP command to the server to keep the connection alive.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\KeepAlive_TaskAsync, $ComponentPro.Mail\Smtp\Async\KeepAlive_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.KeepAliveAsync(System.Object)">
            <summary>
            Asynchronously sends a NOOP command to the server to keep the connection alive.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\KeepAlive_TaskAsync, $ComponentPro.Mail\Smtp\Async\KeepAlive_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.KeepAliveAsync">
            <summary>
            Asynchronously sends a NOOP command to the server to keep the connection alive.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\KeepAlive_TaskAsync, $ComponentPro.Mail\Smtp\Async\KeepAlive_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnEnhancedTurnCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.EnhancedTurnCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.EnhancedTurnAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the ETRN command to the server to start processing the message queue for a specified node (domain).
            </summary>
            <param name="nodeName">The node name, which usually corresponds to a domain name.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.EnhancedTurnAsync(System.String,System.Object)">
            <summary>
            Asynchronously sends the ETRN command to the server to start processing the message queue for a specified node (domain).
            </summary>
            <param name="nodeName">The node name, which usually corresponds to a domain name.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.EnhancedTurnAsync(System.String)">
            <summary>
            Asynchronously sends the ETRN command to the server to start processing the message queue for a specified node (domain).
            </summary>
            <param name="nodeName">The node name, which usually corresponds to a domain name.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.GetDomainMXAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]},System.Object)">
            <summary>
            Asynchronously returns the list of available MX records in order of preference of the specified domain.
            </summary>
            <param name="domain">The domain to retrieve the MX records.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.GetDomainMXAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String[]})">
            <summary>
            Begins an asynchronous operation to execute a command on the FTP server.
            </summary>
            <param name="domain">The domain to retrieve the MX records.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnVerifyCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.SmtpResponse})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.VerifyCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.VerifyAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.SmtpResponse},System.Object)">
            <summary>
            Asynchronously verifies if given email address is accepted by the server without actual submitting of the message data.
            </summary>
            <param name="toEmailAddress">The email address of the recipient.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Verify_TaskAsync, $ComponentPro.Mail\Smtp\Async\Verify_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.VerifyAsync(System.String,System.Object)">
            <summary>
            Asynchronously verifies if given email address is accepted by the server without actual submitting of the message data.
            </summary>
            <param name="toEmailAddress">The email address of the recipient.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Verify_TaskAsync, $ComponentPro.Mail\Smtp\Async\Verify_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.VerifyAsync(System.String)">
            <summary>
            Asynchronously verifies if given email address is accepted by the server without actual submitting of the message data.
            </summary>
            <param name="toEmailAddress">The email address of the recipient.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Verify_TaskAsync, $ComponentPro.Mail\Smtp\Async\Verify_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnSendCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.SendCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(ComponentPro.Net.Mail.MailMessage,System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the mail message to the specified recipients.
            </summary>
            <param name="mail">The message to send.</param>
            <param name="sender">Message sender address.</param>
            <param name="recipients">The list of recipients.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(ComponentPro.Net.Mail.MailMessage,System.String,System.String,System.Object)">
            <summary>
            Asynchronously sends the mail message to the specified recipients.
            </summary>
            <param name="mail">The message to send.</param>
            <param name="sender">Message sender address.</param>
            <param name="recipients">The list of recipients.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(ComponentPro.Net.Mail.MailMessage,System.String,System.String)">
            <summary>
            Asynchronously sends the mail message to the specified recipients.
            </summary>
            <param name="mail">The message to send.</param>
            <param name="sender">Message sender address.</param>
            <param name="recipients">The list of recipients.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(ComponentPro.Net.Mail.MailMessage,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the mail message to the recipients specified in the message.
            </summary>
            <param name="mail">The message to send.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(ComponentPro.Net.Mail.MailMessage,System.Object)">
            <summary>
            Asynchronously sends the mail message to the recipients specified in the message.
            </summary>
            <param name="mail">The message to send.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(ComponentPro.Net.Mail.MailMessage)">
            <summary>
            Asynchronously sends the mail message to the recipients specified in the message.
            </summary>
            <param name="mail">The message to send.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(System.String,System.String,System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a mail message constructed from the specified parameters to the specified recipients e-mail addresses "<paramref name="to"/>". 
            </summary>
            <param name="from">The e-mail address of the sender.</param>
            <param name="to">The comma-separted list of the recipients e-mail addresses.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Asynchronously sends a mail message constructed from the specified parameters to the specified recipients e-mail addresses "<paramref name="to"/>". 
            </summary>
            <param name="from">The e-mail address of the sender.</param>
            <param name="to">The comma-separted list of the recipients e-mail addresses.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Asynchronously sends a mail message constructed from the specified parameters to the specified recipients e-mail addresses "<paramref name="to"/>". 
            </summary>
            <param name="from">The e-mail address of the sender.</param>
            <param name="to">The comma-separted list of the recipients e-mail addresses.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(System.IO.Stream,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously reads and sends a mail message from the specified stream in MIME format.
            </summary>
            <param name="input">The input stream in MIME format. The stream must contain data in MIME format, other formats are not supported.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(System.IO.Stream,System.Object)">
            <summary>
            Asynchronously reads and sends a mail message from the specified stream in MIME format.
            </summary>
            <param name="input">The input stream in MIME format. The stream must contain data in MIME format, other formats are not supported.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(System.IO.Stream)">
            <summary>
            Asynchronously reads and sends a mail message from the specified stream in MIME format.
            </summary>
            <param name="input">The input stream in MIME format. The stream must contain data in MIME format, other formats are not supported.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously reads and sends a mail message from the specified local file in MIME format.
            </summary>
            <param name="fileName">The path to the mail message file. The file must be in MIME format, other formats are not supported.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(System.String,System.Object)">
            <summary>
            Asynchronously reads and sends a mail message from the specified local file in MIME format.
            </summary>
            <param name="fileName">The path to the mail message file. The file must be in MIME format, other formats are not supported.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendAsync(System.String)">
            <summary>
            Asynchronously reads and sends a mail message from the specified local file in MIME format.
            </summary>
            <param name="fileName">The path to the mail message file. The file must be in MIME format, other formats are not supported.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnCommandResponse(System.Object,ComponentPro.Net.CommandResponseEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Imap.CommandResponse"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.CommandResponseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnStateChanged(System.Object,ComponentPro.Net.Mail.MailClientStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.StateChanged"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.MailClientStateChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnProgress(System.Object,ComponentPro.Net.Mail.SmtpProgressEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.StateChanged"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.SmtpProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnRejectedRecipient(System.Object,ComponentPro.Net.Mail.SmtpRejectedRecipientEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.RejectedRecipient"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.SmtpRejectedRecipientEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnSendingMessage(System.Object,ComponentPro.Net.Mail.SmtpSendingMessageEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.SendingMessage"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.SmtpSendingMessageEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnCertificateReceived(System.Object,ComponentPro.Security.CertificateReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.CertificateReceived"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateReceivedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.OnCertificateRequired(System.Object,ComponentPro.Security.CertificateRequiredEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Smtp.CertificateRequired"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateRequiredEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.#ctor">
            <summary>
            Initializes a new instance of the Smtp class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ComponentPro.Net.Mail.Smtp"/>
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Cancel">
            <summary>
            Cancels the current operation.
            </summary>
            <example source="$ComponentPro.Mail\Smtp/Cancel"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Connect(System.String)">
            <summary>
            Connects to the SMTP server.
            </summary>
            <param name="serverName">Remote hostname or address in dot notation.</param>
            <returns>Welcome message returned by the server.</returns>
            <example source="$ComponentPro.Mail\Smtp/Connect"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Connect(System.String,System.Int32)">
            <summary>
            Connects to the SMTP server.
            </summary>
            <param name="serverName">Remote hostname or address in dot notation.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. (eg. 25).</param>
            <returns>The welcome message returned by the server.</returns>
            <example source="$ComponentPro.Mail\Smtp/Connect"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Connect(System.String,ComponentPro.Net.SecurityMode)">
            <summary>
            Connects to the SMTP server with the specified security. Uses port 25 for no SSL, 587 for explicit SSL and 465 for implicit SSL.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
            <param name="security">Connection security.</param>
            <returns>The welcome message returned by the server.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Connect(System.String,System.Int32,ComponentPro.Net.SecurityMode)">
            <summary>
            Connects to the SMTP server with the specified security.
            </summary>
            <param name="serverName">Remote hostname or address in dot notation.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. (eg. 25).</param>
            <param name="security">Connection security.</param>
            <returns>The welcome message returned by the server.</returns>
            <example source="$ComponentPro.Mail\Smtp/Connect_Explicit,$ComponentPro.Mail\Smtp/Connect_Implicit"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Disconnect">
            <summary>
            Disconnects from the SMTP server and returns exit message from the server.
            </summary>
            <returns>The exit message returned by the server.</returns>
            <remarks>Represents SMTP QUIT command.</remarks>
            <example source="$ComponentPro.Mail\Smtp/Connect"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Authenticate(System.String,System.String,ComponentPro.Net.Mail.SmtpAuthenticationMethod)">
            <summary>
            Authenticates the specified user to the remote SMTP server with the specified credentials using the specified authentication method.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="method">Authentication method.</param>
            <example source="$ComponentPro.Mail\Smtp/Connect_NTLM"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Authenticate(System.String,ComponentPro.Net.Mail.SmtpAuthenticationMethod)">
            <summary>
            Authenticates the user to the SMTP server using an OAuth token.
            </summary>
            <param name="token">Authentication token.</param>
            <param name="method">Authentication method (only OAuth 2.0 is supported at the moment).</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the specified user to the remote SMTP server with the specified credentials.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <remarks>
            UltimateMail will try to use the most secure method supported by the server but will downgrade to less secure methods (to the simplest "LOGIN account password" authentication in the worst case) if better methods are not available.
            </remarks>
            <example source="$ComponentPro.Mail\Smtp/Connect"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.UpgradeConnection">
            <summary>
            Secures the connection with TLS/SSL using default parameters.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(ComponentPro.Net.Mail.MailMessage,System.String,System.String)">
            <summary>
            Sends the mail message to the specified recipients.
            </summary>
            <param name="mail">The message to send.</param>
            <param name="sender">Message sender address.</param>
            <param name="recipients">The list of recipients.</param>
            <remarks> 
            <p>
            This method blocks while the e-mail is transmitted. You can specify a time-out value using the <see cref="P:ComponentPro.Net.Mail.Smtp.Timeout"/> property to ensure that the method returns after a specified amount of time elapses.
            </p>
            <p>
            Before calling this method, the <see cref="O:Connect"/> method must be called. You cannot call this method if there is a message being sent asynchronously. 
            If the SMTP host requires credentials, <see cref="O:Authenticate"/> must be called prior to calling this method.
            </p>
            <p>
            If you receive an <see cref="T:ComponentPro.Net.Mail.SmtpException"/> exception, check the <see cref="P:ComponentPro.Net.Mail.SmtpException.Status"/> property to find the reason the operation failed. 
            The <see cref="T:ComponentPro.Net.Mail.SmtpException"/> can also contain an inner exception that indicates the reason the operation failed.
            </p>
            <p>
            The sender address is taken from the "Sender" header field or from the first address in the "From" field if the "Sender" is missing.
            The list of recipients comes from "To", "Cc" and "Bcc" header fields. The "Bcc" field is removed from message headers before sending.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(ComponentPro.Net.Mail.MailMessage)">
            <summary>
            Sends the mail message to the recipients specified in the message.
            </summary>
            <param name="mail">The message to send.</param>
            <remarks> 
            <p>
            This method blocks while the e-mail is transmitted. You can specify a time-out value using the <see cref="P:ComponentPro.Net.Mail.Smtp.Timeout"/> property 
            to ensure that the method returns after a specified amount of time elapses.
            </p>
            <p>
            Before calling this method, the <see cref="O:Connect"/> method must be called. You cannot call this method if there is a message being sent asynchronously. 
            If the SMTP host requires credentials, <see cref="O:Authenticate"/> must be called prior to calling this method.
            </p>
            <p>
            If you receive an SmtpException exception, check the <see cref="P:ComponentPro.Net.Mail.SmtpException.Status"/> property to find the reason the operation failed. 
            The <see cref="T:ComponentPro.Net.Mail.SmtpException"/> can also contain an inner exception that indicates the reason the operation failed.
            </p>
            <p>
            The sender address is taken from the "Sender" header field or from the first address in the "From" field if the "Sender" is missing.
            The list of recipients comes from "To", "Cc" and "Bcc" header fields. The "Bcc" field is removed from message headers before sending.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Smtp/SendMailMessage,$ComponentPro.Mail\Smtp/MessageSendingMultiRecepients,$ComponentPro.Mail\MailCreateReceiveRequest"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a mail message constructed from the specified parameters to the specified recipients e-mail addresses "<paramref name="to"/>". 
            </summary>
            <param name="from">The e-mail address of the sender.</param>
            <param name="to">The comma-separted list of the recipients e-mail addresses.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(System.IO.Stream)">
            <summary>
            Reads and sends a mail message from the specified stream in MIME format.
            </summary>
            <param name="input">The input stream in MIME format. The stream must contain data in MIME format, other formats are not supported.</param>
            <remarks>
            <p>
            This method blocks while the e-mail is transmitted. 
            You can specify a time-out value using the <see cref="P:ComponentPro.Net.Mail.Smtp.Timeout"/> property to ensure that the method returns after a specified amount of time elapses.
            </p>
            <p>
            Before calling this method, the <see cref="O:Connect"/> method must be called. You cannot call this method if there is a message being sent asynchronously. 
            If the SMTP host requires credentials, <see cref="O:Authenticate"/> must be called prior to calling this method.
            </p>
            <p>
            If you receive an <see cref="T:ComponentPro.Net.Mail.SmtpException"/> exception, check the <see cref="P:ComponentPro.Net.Mail.SmtpException.Status"/> property to find the reason the operation failed. 
            The <see cref="T:ComponentPro.Net.Mail.SmtpException"/> can also contain an inner exception that indicates the reason the operation failed.
            </p>
            <p>
            The sender address is taken from the "Sender" header field or from the first address in the "From" field if the "Sender" is missing.
            The list of recipients comes from "To", "Cc" and "Bcc" header fields. The "Bcc" field is removed from message headers before sending.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Smtp/SendMailMessageStream"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(System.String)">
            <summary>
            Reads and sends a mail message from the specified local file in MIME format.
            </summary>
            <param name="fileName">The path to the mail message file. The file must be in MIME format, other formats are not supported.</param>
            <remarks>
            <p>
            This method blocks while the e-mail is transmitted. You can specify a time-out value using the 
            <see cref="P:ComponentPro.Net.Mail.Smtp.Timeout"/> property to ensure that the method returns after a specified amount of time elapses.
            </p>
            <p>
            Before calling this method, the <see cref="O:Connect"/> method must be called. You cannot call this method if there is a message being sent asynchronously. 
            If the SMTP host requires credentials, <see cref="O:Authenticate"/> must be called prior to calling this method.
            </p>
            <p>
            If you receive an SmtpException exception, check the <see cref="P:ComponentPro.Net.Mail.SmtpException.Status"/> property to find the reason the operation failed. 
            The <see cref="T:ComponentPro.Net.Mail.SmtpException"/> can also contain an inner exception that indicates the reason the operation failed.
            </p>
            <p>
            The sender address is taken from the "Sender" header field or from the first address in the "From" field if the "Sender" is missing.
            The list of recipients comes from "To", "Cc" and "Bcc" header fields. The "Bcc" field is removed from message headers before sending.
            </p>
            </remarks>
            <example source="$ComponentPro.Mail\Smtp/SendFile"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Verify(System.String)">
            <summary>
            Verifies if given email address is accepted by the server without actual submitting of the message data.
            </summary>
            <param name="toEmailAddress">The email address of the recipient.</param>
            <returns>An <see cref="T:ComponentPro.Net.Mail.SmtpResponse"/> object containing the verification result. On success, the resulting <see cref="T:ComponentPro.Net.Mail.SmtpResponse"/>
            will have a <see cref="P:ComponentPro.Net.Mail.SmtpResponse.Group"/> of 2.</returns>
            <example source="$ComponentPro.Mail\Smtp/Verify"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.SendCommand(System.String)">
            <summary>
            Sends user-defined command to the server.
            </summary>
            <param name="command">User-defined command text (without line terminator).</param>
            <remarks>
            After calling this method. You need to call the <see cref="M:ComponentPro.Net.Mail.Smtp.ReadResponse"/> method to read the response of the server for the command you have sent.
            </remarks>
            <example source="$ComponentPro.Mail\Smtp/SendCommand"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ReadResponse">
            <summary>
            Returns the corresponding response of the SMTP server to the command that was sent using the <see cref="M:ComponentPro.Net.Mail.Smtp.SendCommand(System.String)"/> method.
            </summary>
            <returns>Response of the SMTP server.</returns>
            <example source="$ComponentPro.Mail\Smtp/SendCommand"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representing this object</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.KeepAlive">
            <summary>
            Sends a NOOP command to the server to keep the connection alive.
            </summary>
            <remarks>
            This method is useful for keeping the connection alive when there is no real activity.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(ComponentPro.Net.Mail.MailMessage,System.String,System.Int32)">
            <summary>
            Sends the mail message.
            </summary>
            <param name="message">The message to send.</param>
            <param name="serverName">The SMTP server address.</param>
            <param name="serverPort">The SMTP server port.</param>
            <remarks> 
            <p>
            This method blocks while the e-mail is transmitted.
            </p>
            <p>
            If you receive an <see cref="T:ComponentPro.Net.Mail.SmtpException"/> exception, check the <see cref="P:ComponentPro.Net.Mail.SmtpException.Status"/> property to find the reason the operation failed. 
            The <see cref="T:ComponentPro.Net.Mail.SmtpException"/> can also contain an inner exception that indicates the reason the operation failed.
            </p>
            <p>
            The sender address is taken from the "Sender" header field or from the first address in the "From" field if the "Sender" is missing.
            The list of recipients comes from "To", "Cc" and "Bcc" header fields. The "Bcc" field is removed from message headers before sending.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(System.String,System.String,System.Int32)">
            <summary>
            Reads and sends a mail message from the specified local file in MIME format.
            </summary>
            <param name="fileName">The path to the mail message file. The file must be in MIME format, other formats are not supported.</param>
            <param name="serverName">The SMTP server address.</param>
            <param name="serverPort">The SMTP server port.</param>
            <remarks> 
            <p>
            This method blocks while the e-mail is transmitted.
            </p>
            <p>
            If you receive an <see cref="T:ComponentPro.Net.Mail.SmtpException"/> exception, check the <see cref="P:ComponentPro.Net.Mail.SmtpException.Status"/> property to find the reason the operation failed. 
            The <see cref="T:ComponentPro.Net.Mail.SmtpException"/> can also contain an inner exception that indicates the reason the operation failed.
            </p>
            <p>
            The sender address is taken from the "Sender" header field or from the first address in the "From" field if the "Sender" is missing.
            The list of recipients comes from "To", "Cc" and "Bcc" header fields. The "Bcc" field is removed from message headers before sending.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(ComponentPro.Net.Mail.MailMessage,System.String)">
            <summary>
            Sends the message using the specified SMTP server.
            </summary>
            <param name="message">Message to be sent.</param>
            <param name="serverName">SMTP server hostname or IP address.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(System.String,System.String)">
            <summary>
            Reads and sends a mail message from the specified local file in MIME format using the specified SMTP server and default SMTP port - 25.
            </summary>
            <param name="fileName">The path to the mail message file. The file must be in MIME format, other formats are not supported.</param>
            <param name="serverName">The SMTP server address</param>
            <remarks>
            <p>
            This method blocks while the e-mail is transmitted.
            </p>
            <p>
            If you receive an <see cref="T:ComponentPro.Net.Mail.SmtpException"/> exception, check the <see cref="P:ComponentPro.Net.Mail.SmtpException.Status"/> property to find the reason the operation failed. 
            The <see cref="T:ComponentPro.Net.Mail.SmtpException"/> can also contain an inner exception that indicates the reason the operation failed.
            </p>
            <p>
            The sender address is taken from the "Sender" header field or from the first address in the "From" field if the "Sender" is missing.
            The list of recipients comes from "To", "Cc" and "Bcc" header fields. The "Bcc" field is removed from message headers before sending.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Sends a mail message constructed from the specified parameters using the specified SMTP server.
            </summary>
            <param name="from">The email address of the sender.</param>
            <param name="to">The message comma-separated recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 25).</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends a mail message constructed from the specified parameters using the specified SMTP server an default SMTP port - 25.
            </summary>
            <param name="from">The email address of the sender.</param>
            <param name="to">The message comma-separated recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(ComponentPro.Net.Mail.MailMessage,ComponentPro.Net.Mail.SmtpSendOptions)">
            <summary>
            Sends the message using the specified SMTP server.
            </summary>
            <param name="message">Message to be sent.</param>
            <param name="configuration">The SmtpSendOptions class.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(System.String,ComponentPro.Net.Mail.SmtpSendOptions)">
            <summary>
            Reads a mail message from the specified local file in MIME format
            and sends it using the specified SMTP server.
            </summary>
            <param name="fileName">The path to the mail message file.</param>
            <param name="configuration">The SmtpSendOptions class.</param>
            <remarks>
            <p>
            The file must be in MIME format, other formats are not supported.
            MIME files often have the '.eml' extension and are produced by Outlook Express.
            In contrast, Outlook produces '.msg' files that are not MIME files and therefore
            cannot be sent using this method.
            </p>
            <p>
            Both sender and the list of recipients are extracted from the message.
            The sender address is taken from the "Sender" header field, or from the first address in the "From" field if the "Sender" is missing.
            The list of recipients comes from "To", "Cc" and "Bcc" header fields.
            Also, the "Bcc" field is removed from message headers prior to sending.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.Send(System.String,System.String,System.String,System.String,ComponentPro.Net.Mail.SmtpSendOptions)">
            <summary>
            Sends a mail message constructed from the specified parameters using the specified SMTP server.
            </summary>
            <param name="from">Message sender.</param>
            <param name="to">Comma-separated list of message recipients.</param>
            <param name="subject">The subject of the message.</param>
            <param name="body">The text body of the message.</param>
            <param name="configuration">The SmtpSendOptions class.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Smtp.ResolveDomainMx(System.String)">
            <summary>
            Returns the list of available MX records in order of preference of the specified domain.
            </summary>
            <param name="domain">The domain to retrieve the MX records.</param>
            <returns>On success, it returns the list of MX records in order of preference.</returns>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.AuthenticateCompleted">
            <summary>
            Occurs when an <see cref="O:AuthenticateAsync">asynchronous authentication operation</see> completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.ConnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Smtp.ConnectAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.DisconnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Smtp.DisconnectAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Smtp\Async\Connect_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.ReadResponseCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Smtp.ReadResponseAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Smtp\Async\SendCommand_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.SendCommandCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Smtp.SendCommandAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\SendCommand_TaskAsync, $ComponentPro.Mail\Smtp\Async\SendCommand_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.UpgradeConnectionCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Smtp.UpgradeConnectionAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.KeepAliveCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Smtp.KeepAliveAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\KeepAlive_TaskAsync, $ComponentPro.Mail\Smtp\Async\KeepAlive_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.EnhancedTurnCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Smtp.EnhancedTurnAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.VerifyCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Smtp.VerifyAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Smtp\TaskAsync\Verify_TaskAsync, $ComponentPro.Mail\Smtp\Async\Verify_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.SendCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Smtp.SendAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.CommandResponse">
            <summary>
            Occurs when a command has been sent to or a response is received from the server.
            </summary>
            <example source="$ComponentPro.Mail\Imap\Events\CommandResponse"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:ComponentPro.Net.Mail.Smtp"/> object is changed.
            </summary>
            <example source="$ComponentPro.Mail\Smtp/Events/StateChanged"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.Progress">
            <summary>
            Occurs when data is send or received.
            </summary>
            <example source="$ComponentPro.Mail\Smtp/Events/Progress"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.RejectedRecipient">
            <summary>
            Occurs when a recipient is rejected by the server.
            </summary>
            <example source="$ComponentPro.Mail\Smtp/Events/RejectedRecipient"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.SendingMessage">
            <summary>
            Occurs when a message is being sent.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.CertificateReceived">
            <summary>
            Occurs when an SMTP server's certificate was received and verified.
            </summary>
            <example source="$ComponentPro.Mail\Smtp/Events/CertificateReceived"/>
            <seealso cref="E:ComponentPro.Net.Mail.Smtp.CertificateRequired"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Smtp.CertificateRequired">
            <summary>
            Occurs when a client certificate is required by the SMTP server, or the one provided was not accepted.
            </summary>
            <example source="$ComponentPro.Mail\Smtp/Events/CertificateRequired"/>
            <seealso cref="E:ComponentPro.Net.Mail.Smtp.CertificateReceived"/>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.UserName">
            <summary>
            Gets the authenticated user name, if available.
            </summary>
            <value>User name, or null (Nothing in VB.NET).</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.ServerName">
            <summary>
            Gets the server name, if available.
            </summary>
            <value>Server name, or null (Nothing in VB.NET).</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.ServerPort">
            <summary>
            Gets the server port, if available.
            </summary>
            <value>server port, or 0.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.Proxy">
            <summary>
            Gets or sets the proxy information to use for connecting and/or logging in through a proxy server.
            </summary>
            <value>The <see cref="T:ComponentPro.Net.WebProxyEx"/> to use to access a remote server.</value>
            <example source="$ComponentPro.Mail\Smtp\Connect_Proxy"/>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses. Default is <see cref="P:System.Text.Encoding.UTF8"/>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.Config">
            <summary>
            Gets or sets <see cref="T:ComponentPro.Net.Mail.Smtp"/> object configuration.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.SupportedExtensions">
            <summary>
            Gets the bit field specifying the extensions supported by the server.
            </summary>
            <value>Extensions supported by the server.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.EnabledExtensions">
            <summary>
            Gets or sets the bit field specifying the enabled extensions.
            </summary>
            <value>Enabled extensions.</value>
            <remarks>
            Enabled extensions will be used when appropriate.
            By default, all extensions are enabled.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.SupportedAuthenticationMethods">
            <summary>
            Gets the list of supported authentication methods.
            </summary>
            <returns>The list of supported authentication methods</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.IsConnectionSecured">
            <summary>
            Gets a boolean value indicating whether the current connection (if any) is secured with TLS/SSL layer.
            </summary>
            <value><c>true</c> if the current connection is TLS/SSL; <c>false</c> if the connection is not secure.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.Timeout">
            <summary>
            Gets or sets a value, in milliseconds, indicating after what period of time an SMTP operation 
            (sending commands, waiting for responses or time between data buffer transfers) should timeout. 
            </summary>
            <remarks>
            By default, this property is set to 60000 (60 seconds). Minimal value is 1000. 
            A value of -1 or 0 indicates that the request does not timeout.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.AbortTimeout">
            <summary>
            Gets or sets a value, in milliseconds, indicating after what period of time an SMTP abort operation should timeout. 
            </summary>
            <remarks>
            By default, this property is set to 3000 (3 seconds). Minimal value is 1000.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.State">
            <summary>
            Gets the current state of the <see cref="T:ComponentPro.Net.Mail.Smtp"/> object.
            </summary>
            <value>The current state.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.LocalEndPoint">
            <summary>
            Gets the local client <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The <see cref="T:System.Net.EndPoint"/> that the component is using for communications.</value>
            <remarks>
            The <see cref="P:ComponentPro.Net.Mail.Smtp.LocalEndPoint"/> property gets an <see cref="T:System.Net.EndPoint"/> that contains the local IP address and port number to which your Socket is bound. 
            You must cast this <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. 
            You can then call the <see cref="P:System.Net.IPEndPoint.Address"/> method to retrieve the local <see cref="T:System.Net.IPAddress"/>, and the <see cref="P:System.Net.IPEndPoint.Port"/> method to retrieve the local port number.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.RemoteEndPoint">
            <summary>
            Gets the remote server <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The <see cref="T:System.Net.EndPoint"/> with which the Socket is communicating.</value>
            <remarks>
            If you are using a connection-oriented protocol, the <see cref="P:ComponentPro.Net.Mail.Smtp.RemoteEndPoint"/> property gets the EndPoint that contains the remote 
            IP address and port number to which the Socket is connected. If you are using a connectionless protocol, 
            <see cref="P:ComponentPro.Net.Mail.Smtp.RemoteEndPoint"/> contains the default remote IP address and port number with which the Socket will communicate. 
            You must cast this <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. 
            You can then call the <see cref="P:System.Net.IPEndPoint.Address"/> method to retrieve the remote <see cref="T:System.Net.IPAddress"/>, and the <see cref="P:System.Net.IPEndPoint.Port"/> method to retrieve the remote port number.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.IsConnected">
            <summary>
            Gets a boolean value indicating whether the connection has been established.
            </summary>
            <value><c>true</c> if the session is connected; otherwise is <c>false</c>.</value>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:ComponentPro.Net.Mail.Smtp"/> object was disposed.</exception>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.IsAuthenticated">
            <summary>
            Gets a boolean value indicating whether the session is authenticated. 
            This is used to check whether the session has been automatically preauthenticated prior to calling the <see cref="O:Authenticate"/> method.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.DeliveryStatusNotificationType">
            <summary>
            Specifies the conditions under which the SMTP server should generate
            and send a delivery status notification (DSN) messages.
            </summary>
            <value>The DSN conditions.</value>
            <remarks>
            This property is only used if the <see cref="P:ComponentPro.Net.Mail.Smtp.EnabledExtensions">DSN extension</see> is enabled and <see cref="P:ComponentPro.Net.Mail.Smtp.SupportedExtensions">supported</see> by the SMTP server.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.DeliveryStatusNotificationReturnMessageMethod">
            <summary>
            Specifies how ESMTP Delivery Status Notification messages will be sent to the message sender.
            </summary>
            <value>The <see cref="P:ComponentPro.Net.Mail.Smtp.DeliveryStatusNotificationReturnMessageMethod"/> enum allows you to specify ESMTP Delivery Status Notification (DSN) settings. This option instructs the SMTP server whether it should attach
            the entire original message or headers only in the Delivery Status Notification Message.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.MaxMailSize">
            <summary>
            Gets the maximum mail message size announced by the server.
            </summary>
            <value>Maximum mail message size; or 0 if not announced.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.ServerDomain">
            <summary>
            Gets the domain announced by the server.
            </summary>
            <value>Domain announced by the server.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.FromDomain">
            <summary>
            Gets or sets the domain announced by the client.
            </summary>
            <value>Domain announced by the client.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Smtp.IsBusy">
            <summary>
            Gets a value indicating whether the component is performing a lengthy operation.
            </summary>
            <value>A bool value indicating whether the component is busy because it's doing some work.</value>
            <returns><c>true</c> if there is any operation in progress; <c>false</c> otherwise.</returns>
            <remarks>
            When an operation is still in progress, it's not possible to start another operation.
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpProgressEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.Mail.Smtp.Progress"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:ComponentPro.Net.Mail.SmtpProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Mail.Smtp.Progress"/> event.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpProgressEventArgs.GetData">
            <summary>
            Gets the actual content of the transferred block.
            </summary>
            <returns>Transferred data.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpProgressEventArgs.State">
            <summary>
            Gets the transfer state.
            </summary>
            <value>The transfer state.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpProgressEventArgs.BytesTransferred">
            <summary>
            Gets the total number of bytes transferred during the current transfer.
            </summary>
            <value>The number of bytes transferred.</value>
            <remarks>This value is valid only when <see cref="P:ComponentPro.Net.Mail.SmtpProgressEventArgs.State"/> is not <see cref="P:ComponentPro.Net.Mail.SmtpProgressEventArgs.State">None</see>.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpProgressEventArgs.BytesSinceLastEvent">
            <summary>
            Gets the number of bytes transferred during the current transfer since the last time the event was raised.
            </summary>
            <value>The number of bytes transferred since the last time the event was raised.</value>
            <remarks>This value is valid only when <see cref="P:ComponentPro.Net.Mail.SmtpProgressEventArgs.State"/> is not <see cref="P:ComponentPro.Net.Mail.SmtpProgressEventArgs.State">None</see>.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpProgressEventArgs.DataLength">
            <summary>
            Gets the approximate number of bytes to be transferred during the current transfer (if available).
            </summary>
            <value>Approximate number of bytes to be transferred.</value>
            <remarks>The value is approximate because byte stuffing (inserting additional '.' characters) can occur during transfer.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpProgressEventArgs.Percentage">
            <summary>
            Gets the current transfer progress percentage.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpRejectedRecipientEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.Mail.Smtp.RejectedRecipient"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:ComponentPro.Net.Mail.SmtpRejectedRecipientEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpRejectedRecipientEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Mail.Smtp.RejectedRecipient"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpRejectedRecipientEventArgs.Recipient">
            <summary>
            Gets the address of rejected recipient.
            </summary>
            <value>Address of rejected recipient.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpRejectedRecipientEventArgs.Response">
            <summary>
            Gets the SMTP server response.
            </summary>
            <value>SMTP response.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpRejectedRecipientEventArgs.Ignore">
            <summary>
            Gets or sets tha value indicating whether to ignore the rejection
            of the recipient and continue the sending operation.
            </summary>
            <value>The value indicating whether to ignore the recipient rejection.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpSendingMessageEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.Mail.Smtp.SendingMessage"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:ComponentPro.Net.Mail.SmtpSendingMessageEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpSendingMessageEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Mail.Smtp.SendingMessage"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendingMessageEventArgs.Stream">
            <summary>
            Gets the stream being sent (if seekable).
            </summary>
            <value>The stream being sent.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpException">
            <summary>
            The exception that is thrown when an error occurs while using Smtp component.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpException.GetRejectedRecipients">
            <summary>
            Gets the list of rejected recipients.
            </summary>
            <value>The list of rejected recipients, or null if not applicable.</value>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.SmtpException"/> class.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message">Message</see> property of the new instance to a message that describes the general error.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.SmtpException"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpException.#ctor(System.String,ComponentPro.Net.Mail.MailClientExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.SmtpException"/> class with the specified error message and status.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus"/> values.</param>
            <remarks>The status must not be <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus">ProtocolError</see>. Use <see cref="M:ComponentPro.Net.Mail.SmtpException.#ctor(ComponentPro.Net.Mail.SmtpResponse)">SmtpException (SmtpResponse response)</see> constructor for creating protocol error exceptions.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpException.#ctor(System.String,ComponentPro.Net.Mail.MailClientExceptionStatus,ComponentPro.Net.Mail.SmtpRejectedRecipient[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.SmtpException"/> class with the specified error message, status, and a list of rejected recipients.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus"/> values.</param>
            <param name="rejected">A list of rejected recipients.</param>
            <remarks>The status must not be <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus">ProtocolError</see>. Use <see cref="M:ComponentPro.Net.Mail.SmtpException.#ctor(ComponentPro.Net.Mail.SmtpResponse)">SmtpException (SmtpResponse response)</see> constructor for creating protocol error exceptions.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.SmtpException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpException.#ctor(System.String,System.Exception,ComponentPro.Net.Mail.MailClientExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.SmtpException"/> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus"/> values.</param>
            <remarks>The status must not be <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus">ProtocolError</see>. Use <see cref="M:ComponentPro.Net.Mail.SmtpException.#ctor(ComponentPro.Net.Mail.SmtpResponse)">SmtpException (SmtpResponse response)</see> constructor for creating protocol error exceptions.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpException.#ctor(ComponentPro.Net.Mail.SmtpResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.SmtpException"/> class with the specified <see cref="T:ComponentPro.Net.Mail.SmtpResponse"/>.
            </summary>
            <param name="response">The <see cref="T:ComponentPro.Net.Mail.SmtpResponse"/>.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpException.Status">
            <summary>
            Gets the status of the response.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus"/> values.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpException.Response">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.Mail.SmtpResponse"/> if the exception.
            </summary>
            <value>The <see cref="T:ComponentPro.Net.Mail.SmtpResponse"/> if <see cref="P:ComponentPro.Net.Mail.SmtpException.Status"/> is <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus">ProtocolError</see>; <b>null</b> reference otherwise.</value>
        </member>
        <member name="F:c_SRM.c_HD">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:c_SRM.c_TRM">
            <summary>
            Allow null sender (&lt;&gt;) to be used.
            </summary>
        </member>
        <member name="F:c_SRM.c_URM">
            <summary>
            Causes the <see cref="M:ComponentPro.Net.Mail.Smtp.Send(System.String)"/> and <see cref="M:ComponentPro.Net.Mail.Smtp.Send(System.IO.Stream)"/> methods to send message data directly from the input file or stream.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpConfig">
            <summary>
            Specifies various Smtp settings.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpConfig.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of the current instance.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpConfig.AllowNullSender">
            <summary>
            Allow null sender (&lt;&gt;) to be used.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpConfig.SendWithNoBuffer">
            <summary>
            Indicates whether to allow the <see cref="O:ComponentPro.Net.Mail.Smtp.Send"/> methods to send message data directly from the input file or stream.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpConfig.c_OQM">
            <summary>
            Skips content transfer encoding check when sending messages. Really not recommended!
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpAuthenticationMethod">
            <summary>
            SMTP client authentication method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpAuthenticationMethod.Auto">
            <summary>
            Choose automatically.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpAuthenticationMethod.SaslPlain">
            <summary>
            RFC 2595 TLS plaintext authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpAuthenticationMethod.SaslDigestMd5">
            <summary>
            RFC 2831 DIGEST-MD5 authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpAuthenticationMethod.SaslCramMd5">
            <summary>
            RFC 2195 CRAM-MD5 authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpAuthenticationMethod.SaslLogin">
            <summary>
            Login authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpAuthenticationMethod.OAuth20">
            <summary>
            OAuth 2.0 authentication defined by https://developers.google.com/google-apps/gmail/xoauth2_protocol#smtp_protocol_exchange
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpExtensions">
            <summary>
            Defines the SMTP extensions.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpExtensions.Pipelining">
            <summary>
            Pipelining. Sending SMTP commands in groups.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpExtensions.Chunking">
            <summary>
            Chunking. Enhanced method of sending message data.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpExtensions.BinaryMime">
            <summary>
            Binary MIME.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpExtensions.EightBitMime">
            <summary>
            8bit MIME.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpExtensions.EnhancedTurn">
            <summary>
            Enhanced turn (ETRN) command support.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpExtensions.EnhancedStatusCodes">
            <summary>
            Enhanced status codes.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpExtensions.DeliveryStatusNotifications">
            <summary>
            Delivery status notifications.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpExtensions.MessageSizeDeclaration">
            <summary>
            Message size declaration.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpExtensions.ExplicitSecurity">
            <summary>
            Explicit TLS/SSL support (STARTTLS).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.SmtpExtensions.All">
            <summary>
            All extensions.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.DeliveryStatusNotificationType">
            <summary>
            Specifies the conditions under which the SMTP server should generate and send DSN messages.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.DeliveryStatusNotificationType.None">
            <summary>
            Never generate DSN.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.DeliveryStatusNotificationType.Success">
            <summary>
            Generate DSN on successful delivery.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.DeliveryStatusNotificationType.OnFailure">
            <summary>
            Generate DSN on delivery failure.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.DeliveryStatusNotificationType.Delay">
            <summary>
            Generate DSN if delivery of a message has been delayed for an unusual amount of time.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.DeliveryStatusNotificationType.All">
            <summary>
            All conditions.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.DeliveryStatusNotificationReturnMessageMethod">
            <summary>
            Specifies whether a SMTP server should attach the entire original message or its headers only
            to DSN messages.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.DeliveryStatusNotificationReturnMessageMethod.Default">
            <summary>
            Let the SMTP use its default behavior of including the original message in a DSN message.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.DeliveryStatusNotificationReturnMessageMethod.FullMessage">
            <summary>
            Include the full original message in a DSN message.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.DeliveryStatusNotificationReturnMessageMethod.HeadersOnly">
            <summary>
            Only include original message headers in a DSN message.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpResponse">
            <summary>
            Contains the response of the SMTP server.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpResponse.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.SmtpResponse"/> class with the specified code, description and raw response string.
            </summary>
            <param name="code">The SMTP response code. Must be in range of 100 to 599.</param>
            <param name="description">The description of the response code.</param>
            <param name="raw">Raw SMTP response.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpResponse.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.SmtpResponse"/> class with the specified code, enhanced code, description and raw response string.
            </summary>
            <param name="code">The SMTP response code. Must be in range of 100 to 599.</param>
            <param name="subject">The SMTP enhanced response code subject. Must be in range of 1 to 999.</param>
            <param name="detail">The SMTP enhanced response code detail. Must be in range of 1 to 999.</param>
            <param name="description">The description of the response code.</param>
            <param name="raw">Raw SMTP response.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpResponse.RawResponse">
            <summary>
            Gets the full unparsed response of the SMTP server.
            </summary>
            <value>The full unparsed response of the SMTP server.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpResponse.Description">
            <summary>
            Gets the description of the SMTP response.
            </summary>
            <value>The description of the SMTP response.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpResponse.Code">
            <summary>
            Gets the SMTP response code.
            </summary>
            <value>SMTP response code.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpResponse.Group">
            <summary>
            Gets the group of the SMTP response code.
            </summary>
            <value>The group of the SMTP response code.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpResponse.Success">
            <summary>
            Returns true when last command was completed successfully.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpResponse.Class">
            <summary>
            Gets the class of enhanced SMTP status code, or -1 if not supported.
            </summary>
            <value>The class of enhanced SMTP status code.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpResponse.Subject">
            <summary>
            Gets the subject code of enhanced SMTP status code, or -1 if not supported.
            </summary>
            <value>The subject of enhanced SMTP status code.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpResponse.Detail">
            <summary>
            Gets the detail code of enhanced SMTP status code, or -1 if not supported.
            </summary>
            <value>The detail of enhanced SMTP status code.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpRejectedRecipient">
            <summary>
            Represents a recipient rejected by the SMTP server.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpRejectedRecipient.#ctor(System.String,ComponentPro.Net.Mail.SmtpResponse)">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.Net.Mail.SmtpRejectedRecipient"/> using a specified
            address and response.
            </summary>
            <param name="address">Address of the recipient.</param>
            <param name="response">Response that rejected the recipient.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpRejectedRecipient.Address">
            <summary>
            Gets the address of the rejected recipient.
            </summary>
            <value>Address of the rejected recipient.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpRejectedRecipient.Response">
            <summary>
            Gets the response that rejected the recipient.
            </summary>
            <value>Response that rejected the recipient.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpRejectedRecipient.Error">
            <summary>
            Gets the exception thrown while attempting to deliver the message, if there was any.
            </summary>
            <value>Delivery error.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpConnectionState">
            <summary>
            Represents the Smtp object connection state.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpConnectionState.Connection">
            <summary>
            Returns a value indicating whether the object is connected.
            </summary>
            <value>True if connectet; oherwise false.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpConnectionState.NativeErrorCode">
            <summary>
            Gets the Win32 socket error code.
            </summary>
            <value>Win32 error code.</value>
            <remarks>Returns 0 if no socket error code is available.</remarks>
        </member>
        <member name="T:c_DPM">
            <summary>
            Provides methods for parsing SMTP server responses.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.SmtpSendOptions">
            <summary>
            Represents options for some of the <see cref="O:ComponentPro.Net.Mail.Smtp.Send"/> methods.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpSendOptions.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.Net.Mail.SmtpSendOptions"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.SmtpSendOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Mail.SmtpSendOptions"/> class and fills it with values read from the specified source.
            </summary>
            <param name="loadFromConfigFile">A boolean value indicating whether to load SMTP configuration from the configuration file.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.ServerName">
            <summary>
            Gets or sets the host name or IP address string of the SMTP relay server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.ServerPort">
            <summary>
            Gets or sets the port number on which to communicate with the SMTP relay server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.UserName">
            <summary>
            Gets or sets the user name used for SMTP authentication.
            </summary>
            <value>User name.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.Password">
            <summary>
            Gets or sets the user account password on the SMTP relay server.
            </summary>
            <value>Password.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.UseDefaultCredentials">
            <summary>
            Gets or sets the value indicating whether to use the credentials of the current user to log in.
            </summary>
            <value>True to use the credentials of the current user; false to use <see cref="P:ComponentPro.Net.Mail.SmtpSendOptions.UserName"/> and <see cref="P:ComponentPro.Net.Mail.SmtpSendOptions.Password"/> properties.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.Proxy">
            <summary>
            Gets or sets the network proxy to use to access a remote server.
            </summary>
            <value>The <see cref="P:ComponentPro.Net.Mail.SmtpSendOptions.Proxy"/> to use to access a remote server.</value>
            <remark>Only used when <see cref="P:ComponentPro.Net.Mail.SmtpSendOptions.UseSystemSmtpClient"/> is <c>false</c>.</remark>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.AuthenticationMethod">
            <summary>
            Gets or sets the authentication method.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.UseSystemSmtpClient">
            <summary>
            Gets or sets a boolean value indicating whether to use standard <see cref="T:System.Net.Mail.SmtpClient"/> to send email messages. Default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.AllowNullSender">
            <summary>
            Allow null sender (&lt;&gt;) to be used.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.SendWithNoBuffer">
            <summary>
            Causes the <see cref="M:ComponentPro.Net.Mail.Smtp.Send(System.String)"/> and <see cref="M:ComponentPro.Net.Mail.Smtp.Send(System.IO.Stream)"/> methods to send message data directly from the input file or stream.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.From">
            <summary>
            Gets or sets the message sender address.
            </summary>
            <value>Message sender address.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.ClientCertificate">
            <summary>
            Gets or sets the client certificate.
            </summary>
            <value>Client certificate.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.Security">
            <summary>
            Gets or sets the SMTP connection security mode.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.SmtpSendOptions.Default">
            <summary>
            Gets the default <see cref="T:ComponentPro.Net.Mail.SmtpSendOptions"/> instance read from application configuration file.
            </summary>
            <remarks>The default instance of <see cref="T:ComponentPro.Net.Mail.SmtpSendOptions"/> is read-only.</remarks>
            <value>The <see cref="T:ComponentPro.Net.Mail.SmtpSendOptions"/> instance read from application configuration file.</value>
        </member>
        <member name="T:c_WOM">
            <summary>
            Handles all control channel communication with an SMTP server.
            </summary>
        </member>
        <member name="T:c_CRM">
            <summary>
            Provides information about the system.
            </summary>
        </member>
        <member name="M:c_CRM.c_DRM">
            <summary>
            Returns a list of current DNS servers.
            </summary>
            <returns></returns>
        </member>
        <member name="T:c_NSM">
            <summary>
            A <see cref="T:System.IO.Stream"/> adapter removing byte-stuffing
            (as defined by RFC 1939, i.e. replacing two dots at the start
            of a line with one) and the finishing line (consisting
            of a single dot) of POP3 multi-line responses written into it.
            </summary>
        </member>
        <member name="M:c_NSM.Close">
            <summary>
            Writes all data buffered by this object to the underlying stream
            and closes that stream.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3AuthenticationMethod">
            <summary>
            Defines POP3 authentication methods to be used for logging in the user account on the server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3AuthenticationMethod.Auto">
            <summary>
            Lets UltimateMail automatically select the best supported authentication method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3AuthenticationMethod.SaslPlain">
            <summary>
            SASL PLAIN authentication (RFC 2831 DIGEST-MD5). Passwords are transmitted as Base64 strings. Not secure but widely supported.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3AuthenticationMethod.SaslDigestMD5">
            <summary>
            Secure SASL DIGEST-MD5 authentication (RFC 2831 DIGEST-MD5). Might not be supported by particular server implementations.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3AuthenticationMethod.SaslCramMD5">
            <summary>
            Secure SASL CRAM-MD5 authentication (RFC 2195 CRAM-MD5). Might not be supported by particular server implementations.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3AuthenticationMethod.SaslLogin">
            <summary>
            SASL LOGIN authentication. Passwords are transmitted as Base64 strings. Not secure but widely supported.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3AuthenticationMethod.ClearText">
            <summary>
            Clear text USER/PASS login.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3AuthenticationMethod.APop">
            <summary>
            Secure APOP authentication. Supported by many POP3 servers.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3EnvelopeParts">
            <summary>
            Defines the message elements available for <see cref="O:ComponentPro.Net.Mail.Pop3.DownloadPop3Message">Download</see> and <see cref="O:ComponentPro.Net.Mail.Pop3.ListMessages">Listing</see>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3EnvelopeParts.MessageInboxIndex">
            <summary>
            Returned <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> object will contain message inbox index number.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3EnvelopeParts.UniqueId">
            <summary>
            Returned <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> object will contain unique id.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3EnvelopeParts.Size">
            <summary>
            Returned <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> object will contain message size.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3EnvelopeParts.SimpleParts">
            <summary>Returned <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> object will contain Sequence number, unique ID and size.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3EnvelopeParts.FullHeaders">
            <summary>
            Returned <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> object will contain full headers, sequence number, unique ID and length. Might take a VERY long time!
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3Features">
            <summary>
            Defines the POP3 extensions.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3Features.APop">
            <summary>
            APOP, an enhanced authorization method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3Features.All">
            <summary>
            All extensions.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3">
            <summary>
            Provides methods for communication with POP3 servers.
            </summary>
            <remarks>All members of this class are thread-safe.</remarks>
            <example source="$ComponentPro.Mail/Pop3/Connect"/>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3.DefaultPort">
            <summary>
            Default POP3 port - 110.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3.DefaultImplicitSslPort">
            <summary>
            Default POP3 Implicit SSL port - 995.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ComponentPro.Net.Mail.Pop3"/>
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnAuthenticateCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.AuthenticateCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.AuthenticateAsync(System.String,System.String,ComponentPro.Net.Mail.Pop3AuthenticationMethod,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the specified user to the remote POP3 server with the specified credentials using the specified authentication method.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.AuthenticateAsync(System.String,System.String,ComponentPro.Net.Mail.Pop3AuthenticationMethod,System.Object)">
            <summary>
            Asynchronously authenticates the specified user to the remote POP3 server with the specified credentials using the specified authentication method.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.AuthenticateAsync(System.String,System.String,ComponentPro.Net.Mail.Pop3AuthenticationMethod)">
            <summary>
            Asynchronously authenticates the specified user to the remote POP3 server with the specified credentials using the specified authentication method.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="authenticationMethod">The authentication method.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.AuthenticateAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the specified user to the remote POP3 server with the specified credentials using the <see cref="T:ComponentPro.Net.Mail.Pop3AuthenticationMethod">Auto</see> mode.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.AuthenticateAsync(System.String,System.String,System.Object)">
            <summary>
            Asynchronously authenticates the specified user to the remote POP3 server with the specified credentials using the <see cref="T:ComponentPro.Net.Mail.Pop3AuthenticationMethod">Auto</see> mode.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.AuthenticateAsync(System.String,System.String)">
            <summary>
            Asynchronously authenticates the specified user to the remote POP3 server with the specified credentials using the <see cref="T:ComponentPro.Net.Mail.Pop3AuthenticationMethod">Auto</see> mode.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnConnectCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.ConnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ConnectAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously connects to a POP3 server on the standard POP3 port (110).
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ConnectAsync(System.String,System.Object)">
            <summary>
            Asynchronously connects to a POP3 server on the standard POP3 port (110).
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ConnectAsync(System.String)">
            <summary>
            Asynchronously connects to a POP3 server on the standard POP3 port (110).
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ConnectAsync(System.String,System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously connects to a POP3 server.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. (eg. 110).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>
            Asynchronously connects to a POP3 server.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. (eg. 110).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ConnectAsync(System.String,System.Int32)">
            <summary>
            Asynchronously connects to a POP3 server.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. (eg. 110).</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ConnectAsync(System.String,System.Int32,ComponentPro.Net.SecurityMode,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously connects to the POP3 server with the specified security.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="serverPort">The port on which to communicate with the server. The standard POP3 port is 110. For TLS/SSL connections, dedicated port is 995.</param>
            <param name="security">The security mode.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ConnectAsync(System.String,System.Int32,ComponentPro.Net.SecurityMode,System.Object)">
            <summary>
            Asynchronously connects to the POP3 server with the specified security.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="serverPort">The port on which to communicate with the server. The standard POP3 port is 110. For TLS/SSL connections, dedicated port is 995.</param>
            <param name="security">The security mode.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ConnectAsync(System.String,System.Int32,ComponentPro.Net.SecurityMode)">
            <summary>
            Asynchronously connects to the POP3 server with the specified security.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="serverPort">The port on which to communicate with the server. The standard POP3 port is 110. For TLS/SSL connections, dedicated port is 995.</param>
            <param name="security">The security mode.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ConnectAsync(System.String,ComponentPro.Net.SecurityMode,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously connects to the POP3 server with the specified security. The component will use a port corresponding to the specified security mode.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="security">Connection security.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ConnectAsync(System.String,ComponentPro.Net.SecurityMode,System.Object)">
            <summary>
            Asynchronously connects to the POP3 server with the specified security. The component will use a port corresponding to the specified security mode.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="security">Connection security.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ConnectAsync(System.String,ComponentPro.Net.SecurityMode)">
            <summary>
            Asynchronously connects to the POP3 server with the specified security. The component will use a port corresponding to the specified security mode.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="security">Connection security.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnDisconnectCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.DisconnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DisconnectAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously disconnects from the POP3 server and releases any used resources. All messages marked as deleted will be permanently removed.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DisconnectAsync(System.Object)">
            <summary>
            Asynchronously disconnects from the POP3 server and releases any used resources. All messages marked as deleted will be permanently removed.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DisconnectAsync">
            <summary>
            Asynchronously disconnects from the POP3 server and releases any used resources. All messages marked as deleted will be permanently removed.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DisconnectAsync(System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously deletes any messages marked as deleted and terminate the connection.
            </summary>
            <param name="rollbackChanges"><c>true</c> if messages marked as deleted should be left on the server.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DisconnectAsync(System.Boolean,System.Object)">
            <summary>
            Asynchronously deletes any messages marked as deleted and terminate the connection.
            </summary>
            <param name="rollbackChanges"><c>true</c> if messages marked as deleted should be left on the server.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DisconnectAsync(System.Boolean)">
            <summary>
            Asynchronously deletes any messages marked as deleted and terminate the connection.
            </summary>
            <param name="rollbackChanges"><c>true</c> if messages marked as deleted should be left on the server.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnReadResponseCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.ReadResponseCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ReadResponseAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously returns the corresponding response of the POP3 server to the command that was sent using the <see cref="M:ComponentPro.Net.Mail.Pop3.SendCommand(System.String,System.Boolean)"/> or <See cref="O:SendCommandAsync"></See>method.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ReadResponseAsync(System.Object)">
            <summary>
            Asynchronously returns the corresponding response of the POP3 server to the command that was sent using the <see cref="M:ComponentPro.Net.Mail.Pop3.SendCommand(System.String,System.Boolean)"/> or <See cref="O:SendCommandAsync"></See>method.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ReadResponseAsync">
            <summary>
            Asynchronously returns the corresponding response of the POP3 server to the command that was sent using the <see cref="M:ComponentPro.Net.Mail.Pop3.SendCommand(System.String,System.Boolean)"/> or <See cref="O:SendCommandAsync"></See>method.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>        
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnSendCommandCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.SendCommandCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.SendCommandAsync(System.String,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a custom command to the server.
            </summary>
            <param name="command">User-defined command text.</param>
            <param name="multiline">Indicates whether the response for the command is multiline or single line.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.SendCommandAsync(System.String,System.Boolean,System.Object)">
            <summary>
            Asynchronously sends a custom command to the server.
            </summary>
            <param name="command">User-defined command text.</param>
            <param name="multiline">Indicates whether the response for the command is multiline or single line.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.SendCommandAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously sends a custom command to the server.
            </summary>
            <param name="command">User-defined command text.</param>
            <param name="multiline">Indicates whether the response for the command is multiline or single line.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnGetMailboxStatCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.Pop3MailboxStat})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.GetMailboxStatCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.GetMailboxStatAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.Pop3MailboxStat},System.Object)">
            <summary>
            Asynchronously sends a STAT command to a POP3 server and parse the response.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\GetMailboxInfo_TaskAsync, $ComponentPro.Mail\Pop3\Async\GetMailboxInfo_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.GetMailboxStatAsync(System.Object)">
            <summary>
            Asynchronously sends a STAT command to a POP3 server and parse the response.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\GetMailboxInfo_TaskAsync, $ComponentPro.Mail\Pop3\Async\GetMailboxInfo_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.GetMailboxStatAsync">
            <summary>
            Asynchronously sends a STAT command to a POP3 server and parse the response.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\GetMailboxInfo_TaskAsync, $ComponentPro.Mail\Pop3\Async\GetMailboxInfo_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnUpgradeConnectionCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.UpgradeConnectionCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.UpgradeConnectionAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously secures the connection with TLS/SSL using default parameters.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.UpgradeConnectionAsync(System.Object)">
            <summary>
            Asynchronously secures the connection with TLS/SSL using default parameters.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.UpgradeConnectionAsync">
            <summary>
            Asynchronously secures the connection with TLS/SSL using default parameters.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnUndeleteCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.UndeleteCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.UndeleteAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously undelete messages - unmarks any messages that have been marked as deleted.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3/TaskAsync\Undelete_TaskAsync, $ComponentPro.Mail\Pop3/Async\Undelete_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.UndeleteAsync(System.Object)">
            <summary>
            Asynchronously undelete messages - unmarks any messages that have been marked as deleted.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3/TaskAsync\Undelete_TaskAsync, $ComponentPro.Mail\Pop3/Async\Undelete_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.UndeleteAsync">
            <summary>
            Asynchronously undelete messages - unmarks any messages that have been marked as deleted.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3/TaskAsync\Undelete_TaskAsync, $ComponentPro.Mail\Pop3/Async\Undelete_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnDeleteCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.DeleteCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DeleteAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously flags the specified message for deletion from the server.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3/TaskAsync\delete_TaskAsync, $ComponentPro.Mail\Pop3/Async\delete_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DeleteAsync(System.Int32,System.Object)">
            <summary>
            Asynchronously flags the specified message for deletion from the server.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3/TaskAsync\delete_TaskAsync, $ComponentPro.Mail\Pop3/Async\delete_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DeleteAsync(System.Int32)">
            <summary>
            Asynchronously flags the specified message for deletion from the server.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <example source="$ComponentPro.Mail\Pop3/TaskAsync\delete_TaskAsync, $ComponentPro.Mail\Pop3/Async\delete_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnListMessagesCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.Pop3MessageCollection})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.ListMessagesCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ListMessagesAsync(ComponentPro.Net.Mail.Pop3EnvelopeParts,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.Pop3MessageCollection},System.Object)">
            <summary>
            Asynchronously retrieves a list of <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> in the currently selected mailbox. Each message in the list contains the specified envelope parts.
            </summary>
            <param name="parts">The message elements to retrieve.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\ListMessages_TaskAsync, $ComponentPro.Mail\Pop3\Async\ListMessages_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ListMessagesAsync(ComponentPro.Net.Mail.Pop3EnvelopeParts,System.Object)">
            <summary>
            Asynchronously retrieves a list of <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> in the currently selected mailbox. Each message in the list contains the specified envelope parts.
            </summary>
            <param name="parts">The message elements to retrieve.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\ListMessages_TaskAsync, $ComponentPro.Mail\Pop3\Async\ListMessages_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ListMessagesAsync(ComponentPro.Net.Mail.Pop3EnvelopeParts)">
            <summary>
            Asynchronously retrieves a list of <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> in the currently selected mailbox. Each message in the list contains the specified envelope parts.
            </summary>
            <param name="parts">The message elements to retrieve.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\ListMessages_TaskAsync, $ComponentPro.Mail\Pop3\Async\ListMessages_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ListMessagesAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.Pop3MessageCollection},System.Object)">
            <summary>
            Asynchronously retrieves a list of <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> containing unique ID and length of each message in the mailbox.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ListMessagesAsync(System.Object)">
            <summary>
            Asynchronously retrieves a list of <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> containing unique ID and length of each message in the mailbox.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ListMessagesAsync">
            <summary>
            Asynchronously retrieves a list of <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> containing unique ID and length of each message in the mailbox.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnDownloadMessageHeadersCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.DownloadMessageHeadersCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMessageHeadersAsync(System.Int32,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the headers of a message with the specified inbox index from the server and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadMessageHeaders_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadMessageHeaders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMessageHeadersAsync(System.Int32,System.IO.Stream,System.Object)">
            <summary>
            Asynchronously downloads the headers of a message with the specified inbox index from the server and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadMessageHeaders_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadMessageHeaders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMessageHeadersAsync(System.Int32,System.IO.Stream)">
            <summary>
            Asynchronously downloads the headers of a message with the specified inbox index from the server and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="output">Stream that will receive the message.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadMessageHeaders_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadMessageHeaders_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnDownloadPop3MessageCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.Pop3Message})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.DownloadPop3MessageCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadPop3MessageAsync(System.Int32,ComponentPro.Net.Mail.Pop3EnvelopeParts,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.Pop3Message},System.Object)">
            <summary>
            Asynchronously retrieves information about a message with the specified sequence number.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="parts">The message elements to retrieve.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadPop3Message_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadPop3Message_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadPop3MessageAsync(System.Int32,ComponentPro.Net.Mail.Pop3EnvelopeParts,System.Object)">
            <summary>
            Asynchronously retrieves information about a message with the specified sequence number.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="parts">The message elements to retrieve.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadPop3Message_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadPop3Message_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadPop3MessageAsync(System.Int32,ComponentPro.Net.Mail.Pop3EnvelopeParts)">
            <summary>
            Asynchronously retrieves information about a message with the specified sequence number.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="parts">The message elements to retrieve.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadPop3Message_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadPop3Message_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnDownloadMessageCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Int64})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.DownloadMessageCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMessageAsync(System.Int32,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the specified message from the server and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\async\DownloadMessage_async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMessageAsync(System.Int32,System.String,System.Object)">
            <summary>
            Asynchronously downloads the specified message from the server and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\async\DownloadMessage_async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMessageAsync(System.Int32,System.String)">
            <summary>
            Asynchronously downloads the specified message from the server and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\async\DownloadMessage_async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMessageAsync(System.Int32,System.IO.Stream,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Int64},System.Object)">
            <summary>
            Asynchronously downloads the specified message from the server and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadMessageStream_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadMessageStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMessageAsync(System.Int32,System.IO.Stream,System.Object)">
            <summary>
            Asynchronously downloads the specified message from the server and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="output">Stream that will receive the message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadMessageStream_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadMessageStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMessageAsync(System.Int32,System.IO.Stream)">
            <summary>
            Asynchronously downloads the specified message from the server and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="output">Stream that will receive the message.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadMessageStream_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadMessageStream_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnDownloadMailMessageCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Mail.MailMessage})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.DownloadMailMessageCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMailMessageAsync(System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Mail.MailMessage},System.Object)">
            <summary>
            Asynchronously completely downloads the specified message from the server and loads it into an instance of the <see cref="T:ComponentPro.Net.Mail.MailMessage"/> class.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadMailMessage_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadMailMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMailMessageAsync(System.Int32,System.Object)">
            <summary>
            Asynchronously completely downloads the specified message from the server and loads it into an instance of the <see cref="T:ComponentPro.Net.Mail.MailMessage"/> class.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadMailMessage_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadMailMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMailMessageAsync(System.Int32)">
            <summary>
            Asynchronously completely downloads the specified message from the server and loads it into an instance of the <see cref="T:ComponentPro.Net.Mail.MailMessage"/> class.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadMailMessage_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadMailMessage_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnGetMessageInboxIndexCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Nullable{System.Int32}})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.GetMessageInboxIndexCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.GetMessageInboxIndexAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Nullable{System.Int32}},System.Object)">
            <summary>
            Asynchronously tries to retrieve the inbox index of the specified message by unique ID.
            </summary>
            <param name="uniqueId">Unique ID of the message.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\GetSequenceNumber_TaskAsync, $ComponentPro.Mail\Pop3\Async\GetSequenceNumber_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.GetMessageInboxIndexAsync(System.String,System.Object)">
            <summary>
            Asynchronously tries to retrieve the inbox index of the specified message by unique ID.
            </summary>
            <param name="uniqueId">Unique ID of the message.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\GetSequenceNumber_TaskAsync, $ComponentPro.Mail\Pop3\Async\GetSequenceNumber_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.GetMessageInboxIndexAsync(System.String)">
            <summary>
            Asynchronously tries to retrieve the inbox index of the specified message by unique ID.
            </summary>
            <param name="uniqueId">Unique ID of the message.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\GetSequenceNumber_TaskAsync, $ComponentPro.Mail\Pop3\Async\GetSequenceNumber_Async"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnCommandResponse(System.Object,ComponentPro.Net.CommandResponseEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.CommandResponse"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.CommandResponseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnStateChanged(System.Object,ComponentPro.Net.Mail.MailClientStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.StateChanged"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.MailClientStateChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnProgress(System.Object,ComponentPro.Net.Mail.Pop3ProgressEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.Progress"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.Pop3ProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnMessageListProgress(System.Object,ComponentPro.Net.Mail.Pop3MessageListProgressEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.MessageListProgress"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.Pop3MessageListProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnCertificateReceived(System.Object,ComponentPro.Security.CertificateReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.CertificateReceived"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateReceivedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.OnCertificateRequired(System.Object,ComponentPro.Security.CertificateRequiredEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Mail.Pop3.CertificateRequired"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateRequiredEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.Pop3"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.Pop3"/> class with a container.
            </summary>
            <param name="container">The container object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the container is null.</exception>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.Cancel">
            <summary>
            Cancels the current operation.
            </summary>
            <example source="$ComponentPro.Mail\Pop3/Cancel"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.Connect(System.String)">
            <summary>
            Connects to a POP3 server on the standard POP3 port (110).
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <returns>The welcome message returned by the server.</returns>
            <example source="$ComponentPro.Mail\Pop3/Connect,$ComponentPro.Mail/Pop3/Connect_Proxy"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.Connect(System.String,System.Int32)">
            <summary>
            Connects to a POP3 server.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="serverPort">Remote port, a number between 1 and 65535, inclusive. (eg. 110).</param>
            <returns>The welcome message returned by the server.</returns>
            <example source="$ComponentPro.Mail\Pop3/Connect"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.Connect(System.String,ComponentPro.Net.SecurityMode)">
            <summary>
            Connects to the POP3 server with the specified security. The component will use a port corresponding to the specified security mode.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="security">Connection security.</param>
            <returns>The welcome message returned by the server.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.Connect(System.String,System.Int32,ComponentPro.Net.SecurityMode)">
            <summary>
            Connects to the POP3 server with the specified security.
            </summary>
            <param name="serverName">The name or IP address of the POP3 server.</param>
            <param name="serverPort">The port on which to communicate with the server. The standard POP3 port is 110. For TLS/SSL connections, dedicated port is 995.</param>
            <param name="security">The security mode.</param>
            <returns>The welcome message returned by the remote POP3 server.</returns>
            <example source="$ComponentPro.Mail\Pop3/Connect_Implicit,$ComponentPro.Mail\Pop3/Connect_Explicit"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.Disconnect">
            <summary>
            Disconnects from the POP3 server and releases any used resources. All messages marked as deleted will be permanently removed.
            </summary>
            <returns>The exit message returned by the server.</returns>
            <remarks>
            On successful completion of this method, all the messages marked as deleted during the POP3 session are physically deleted by the server. If this method fails, the connection is still closed and all network resources are freed, but it's undefined whether the messages marked for deletion were really deleted or not.
            </remarks>
            <example source="$ComponentPro.Mail\Pop3/Connect"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.Disconnect(System.Boolean)">
            <summary>
            Deletes any messages marked as deleted and terminate the connection.
            </summary>
            <param name="rollbackChanges"><c>true</c> if messages marked as deleted should be left on the server.</param>
            <returns>The exit message returned by the server.</returns>
            <remarks>Represents POP3 QUIT command, with optional preceeding RSET.</remarks>	
            <example source="$ComponentPro.Mail\Pop3/DisconnectRollback"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.Authenticate(System.String,System.String,ComponentPro.Net.Mail.Pop3AuthenticationMethod)">
            <summary>
            Authenticates the specified user to the remote POP3 server with the specified credentials using the specified authentication method.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="method">The authentication method.</param>
            <example source="$ComponentPro.Mail\Pop3/Connect_NTLM"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the specified user to the remote POP3 server with the specified credentials using the <see cref="T:ComponentPro.Net.Mail.Pop3AuthenticationMethod">Auto</see> mode.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <remarks>
            UltimateMail will try to use the most secure method supported by the server but will downgrade to less secure methods (to the simplest "LOGIN account password" authentication in the worst case) if better methods are not available.
            </remarks>
            <example source="$ComponentPro.Mail\Pop3/Connect"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.Undelete">
            <summary>
            Undelete messages - unmarks any messages that have been marked as deleted.
            </summary>
            <example source="$ComponentPro.Mail\Pop3/Undelete"/>
            <remarks>Represents POP3 RSET command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.Delete(System.Int32)">
            <summary>
            Flags the specified message for deletion from the server.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <remarks>
            <p>
            Messages flagged for deletion are actually removed from the server on <see cref="O:ComponentPro.Net.Mail.Pop3.Disconnect"/> method call. Until this moment, you can remove the deletion status for all messages flagged as deleted by calling <see cref="M:ComponentPro.Net.Mail.Pop3.Undelete"/>  method.
            </p>
            <p>Represents POP3 DELE command.</p>
            </remarks>
            <example source="$ComponentPro.Mail\Pop3/Delete"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.UpgradeConnection">
            <summary>
            Secures the connection with TLS/SSL using default parameters.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ListMessages(ComponentPro.Net.Mail.Pop3EnvelopeParts)">
            <summary>
            Retrieves a list of <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> in the currently selected mailbox. Each message in the list contains the specified envelope parts.
            </summary>
            <param name="parts">The message elements to retrieve.</param>
            <returns>The list of messages.</returns>
            <example source="$ComponentPro.Mail\Pop3/ListMessages"/>
            <remarks>Uses either POP3 LIST command, UIDL command, or a combination of both.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ListMessages">
            <summary>
            Retrieves a list of <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> containing unique ID and length of each message in the mailbox.
            </summary>
            <returns>A collection of <see cref="T:ComponentPro.Net.Mail.Pop3Message"/>.</returns>
            <example source="$ComponentPro.Mail\Pop3/ListMessages"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMessageHeaders(System.Int32,System.IO.Stream)">
            <summary>
            Downloads the headers of a message with the specified inbox index from the server and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="output">Stream that will receive the message.</param>
            <returns>On success, the length of the message in bytes is returned.</returns>
            <example source="$ComponentPro.Mail\Pop3/DownloadMessageHeaders"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadPop3Message(System.Int32,ComponentPro.Net.Mail.Pop3EnvelopeParts)">
            <summary>
            Retrieves information about a message with the specified sequence number.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="parts">The message elements to retrieve.</param>
            <returns>A <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> object.</returns>
            <example source="$ComponentPro.Mail\Pop3/DownloadPop3Message"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMessage(System.Int32,System.IO.Stream)">
            <summary>
            Downloads the specified message from the server and writes its data into a supplied stream.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="output">Stream that will receive the message.</param>
            <returns>On success, the length of the message in bytes.</returns>
            <example source="$ComponentPro.Mail\Pop3/DownloadMessageStream"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMessage(System.Int32,System.String)">
            <summary>
            Downloads the specified message from the server and writes its data into a local file.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <param name="fileName">The path of the local file. This cannot be a directory.</param>
            <returns>On success, the length of the message in bytes.</returns>
            <example source="$ComponentPro.Mail\Pop3/DownloadMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.DownloadMailMessage(System.Int32)">
            <summary>
            Completely downloads the specified message from the server and loads it into an instance of the <see cref="T:ComponentPro.Net.Mail.MailMessage"/> class.
            </summary>
            <param name="messageInboxIndex">The ordinal position of the message in the inbox. It must be in the range from 1 to <see cref="P:ComponentPro.Net.Mail.Pop3.MessageCount"/>.</param>
            <returns>A <see cref="T:ComponentPro.Net.Mail.MailMessage"/> containing message information.</returns>
            <example source="$ComponentPro.Mail\Pop3/DownloadMailMessage"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.GetMessageInboxIndex(System.String)">
            <summary>
            Tries to retrieve the inbox index of the specified message by unique ID.
            </summary>
            <param name="uniqueId">Unique ID of the message.</param>
            <returns>On success, the message inbox index; otherwise a null reference (Nothing in VB.NET) if not found.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.SendCommand(System.String,System.Boolean)">
            <summary>
            Sends a custom command to the server.
            </summary>
            <param name="command">User-defined command text.</param>
            <param name="multiline">Indicates whether the response for the command is multiline or single line.</param>
            <remarks>To read the server's response, use <see cref="M:ComponentPro.Net.Mail.Pop3.ReadResponse"/> method.</remarks>
            <example source="$ComponentPro.Mail\Pop3/SendCommand"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ReadResponse">
            <summary>
            Returns the corresponding response of the POP3 server to the command that was sent using the <see cref="M:ComponentPro.Net.Mail.Pop3.SendCommand(System.String,System.Boolean)"/> method.
            </summary>
            <returns>Response of the POP3 server.</returns>
            <remarks>
            <see cref="M:ComponentPro.Net.Mail.Pop3.ReadResponse"/> should be called once if the response is a single line; otherwise it must be called multiple times.
            </remarks>
            <example source="$ComponentPro.Mail\Pop3/SendCommand"/>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representing this object</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3.GetMailboxStat">
            <summary>
            Sends a STAT command to a POP3 server and parse the response.
            </summary>
            <returns>The <see cref="T:ComponentPro.Net.Mail.Pop3MailboxStat">mailbox information object</see>.</returns>
            <example source="$ComponentPro.Mail\Pop3/GetMailboxInfo"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.AuthenticateCompleted">
            <summary>
            Occurs when an <see cref="O:ComponentPro.Net.Mail.Pop3.AuthenticateAsync">asynchronous authentication operation</see> completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.ConnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.ConnectAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.DisconnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.DisconnectAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\Connect_TaskAsync, $ComponentPro.Mail\Pop3\Async\Connect_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.ReadResponseCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.ReadResponseAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.SendCommandCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.SendCommandAsync"/> operation completes.
            </summary>        
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.GetMailboxStatCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.GetMailboxStatAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\GetMailboxInfo_TaskAsync, $ComponentPro.Mail\Pop3\Async\GetMailboxInfo_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.UpgradeConnectionCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.UpgradeConnectionAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.UndeleteCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.UndeleteAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3/TaskAsync\Undelete_TaskAsync, $ComponentPro.Mail\Pop3/Async\Undelete_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.DeleteCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.DeleteAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3/TaskAsync\delete_TaskAsync, $ComponentPro.Mail\Pop3/Async\delete_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.ListMessagesCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.ListMessagesAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\ListMessages_TaskAsync, $ComponentPro.Mail\Pop3\Async\ListMessages_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.DownloadMessageHeadersCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.DownloadMessageHeadersAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadMessageHeaders_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadMessageHeaders_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.DownloadPop3MessageCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.DownloadPop3MessageAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadPop3Message_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadPop3Message_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.DownloadMessageCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.DownloadMessageAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3\async\DownloadMessage_async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.DownloadMailMessageCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.DownloadMailMessageAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\DownloadMailMessage_TaskAsync, $ComponentPro.Mail\Pop3\Async\DownloadMailMessage_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.GetMessageInboxIndexCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ComponentPro.Net.Mail.Pop3.GetMessageInboxIndexAsync"/> operation completes.
            </summary>
            <example source="$ComponentPro.Mail\Pop3\TaskAsync\GetSequenceNumber_TaskAsync, $ComponentPro.Mail\Pop3\Async\GetSequenceNumber_Async"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.CommandResponse">
            <summary>
            Occurs when a command has been sent to or a response is received from the server.
            </summary>
            <example source="$ComponentPro.Mail\Pop3\Events\CommandResponse"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:ComponentPro.Net.Mail.Pop3"/> object is changed.
            </summary>
            <example source="$ComponentPro.Mail\Pop3/Events/StateChanged"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.Progress">
            <summary>
            Occurs when data is send or received.
            </summary>
            <example source="$ComponentPro.Mail\Pop3/Events/Progress"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.MessageListProgress">
            <summary>
            Occurs when message list is downloading.
            </summary>
            <example source="$ComponentPro.Mail\Pop3/Events/MessageListProgress"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.CertificateReceived">
            <summary>
            Occurs when a POP3 server's certificate was received and verified.
            </summary>
            <example source="$ComponentPro.Mail\Pop3/Events/CertificateReceived"/>
            <seealso cref="E:ComponentPro.Net.Mail.Pop3.CertificateRequired"/>
        </member>
        <member name="E:ComponentPro.Net.Mail.Pop3.CertificateRequired">
            <summary>
            Occurs when a client certificate is required by the POP3 server, or the one provided was not accepted.
            </summary>
            <example source="$ComponentPro.Mail\Pop3/Events/CertificateRequired"/>
            <seealso cref="E:ComponentPro.Net.Mail.Pop3.CertificateReceived"/>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.UserName">
            <summary>
            Gets the user of the connected session, or null if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.ServerName">
            <summary>
            Gets the host name of the connected session, or null if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.ServerPort">
            <summary>
            Gets the SFTP port of the connected session, or 0 if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.Proxy">
            <summary>
            Gets or sets the <see cref="T:ComponentPro.Net.WebProxyEx">server proxy</see>, if any, used to connect to the remote server.
            </summary>
            <value>The <see cref="T:ComponentPro.Net.WebProxyEx">server proxy</see>, if any, used to connect to the remote server.</value>
            <example source="$ComponentPro.Mail\Pop3/Connect_Proxy"/>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> that is used to encode commands sent to the server, and decode replies from the server.
            </summary>
            <value>An <see cref="T:System.Text.Encoding">Encoding</see> value representing the encoding format. 
            By default, <see cref="T:System.Text.Encoding">Encoding.Default</see>.</value>
            <example source="$ComponentPro.Mail\Pop3/Encoding"/>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.Config">
            <summary>
            Gets or sets POP3 object settings.
            </summary>
            <value>POP3 object settings.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.SupportedFeatures">
            <summary>
            Gets the bit field specifying the list of the server capabilities.
            </summary>
            <value>Extensions supported by the server.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.SupportedAuthenticationMethods">
            <summary>
            Gets the list of supported authentication methods.
            </summary>
            <returns>The list of supported authentication methods.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.IsConnectionSecured">
            <summary>
            Gets a boolean value indicating whether the current connection (if any) is secured with TLS/SSL layer.
            </summary>
            <value><c>true</c> if the current connection is TLS/SSL; <c>false</c> if the connection is not secure.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.Timeout">
            <summary>
            Gets or sets a value, in milliseconds, indicating after what period of time an operation (sending commands, waiting for responses or time between data buffer transfers) should timeout. 
            </summary>
            <remarks>
            By default, this property is set to 60000 (60 seconds). Minimal value is 1000. A value of -1 or 0 indicates that the request does not timeout.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.AbortTimeout">
            <summary>
            Gets or sets a value, in milliseconds, indicating after what period of time a POP3 <see cref="M:ComponentPro.Net.Mail.Pop3.Cancel">abort operation</see> should timeout. 
            </summary>
            <remarks>
            By default, this property is set to 3000 (3 seconds). Minimal value is 1000.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.State">
            <summary>
            Gets the current state of the <see cref="T:ComponentPro.Net.Mail.Pop3"/> object.
            </summary>
            <value>The current state.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.LocalEndPoint">
            <summary>
            Gets the local client <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The <see cref="T:System.Net.EndPoint"/> that the component is using for communications.</value>
            <remarks>
            The <see cref="P:ComponentPro.Net.Mail.Pop3.LocalEndPoint"/> property gets an <see cref="T:System.Net.EndPoint"/> that contains the local IP address and port number to which your Socket is bound. 
            You must cast this <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. 
            You can then call the <see cref="P:System.Net.IPEndPoint.Address"/> method to retrieve the local <see cref="T:System.Net.IPAddress"/>, and the <see cref="P:System.Net.IPEndPoint.Port"/> method to retrieve the local port number.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.RemoteEndPoint">
            <summary>
            Gets the remote server <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The <see cref="T:System.Net.EndPoint"/> with which the Socket is communicating.</value>
            <remarks>
            If you are using a connection-oriented protocol, the <see cref="P:ComponentPro.Net.Mail.Pop3.RemoteEndPoint"/> property gets the <see cref="T:System.Net.EndPoint"/> that contains the remote 
            IP address and port number to which the Socket is connected. If you are using a connectionless protocol, 
            <see cref="P:ComponentPro.Net.Mail.Pop3.RemoteEndPoint"/> contains the default remote IP address and port number with which the Socket will communicate. 
            You must cast this <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. 
            You can then call the <see cref="P:System.Net.IPEndPoint.Address"/> method to retrieve the remote <see cref="T:System.Net.IPAddress"/>, and the <see cref="P:System.Net.IPEndPoint.Port"/> method to retrieve the remote port number.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.IsConnected">
            <summary>
            Gets a boolean value indicating whether the connection has been established.
            </summary>
            <value><c>true</c> if the session is connected; otherwise is <c>false</c>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.IsAuthenticated">
            <summary>
            Gets a boolean value indicating whether the session is authenticated. 
            This is used to check whether the session has been automatically preauthenticated prior to calling the <see cref="O:Authenticate"/> method.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.IsBusy">
            <summary>
            Gets a value indicating whether the component is performing a lengthy operation.
            </summary>
            <value>A bool value indicating whether the component is busy because it's doing some work.</value>
            <returns><c>true</c> if there is any operation in progress; <c>false</c> otherwise.</returns>
            <remarks>
            When an operation is still in progress, it's not possible to start another operation.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.MailboxSize">
            <summary>
            Gets the size of the mailbox in bytes (the sum of lengths of all messages).
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3.MessageCount">
            <summary>
            Gets the number of messages in the mailbox.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3MessageListProgressEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.Mail.Pop3.MessageListProgress"/> event of a <see cref="T:ComponentPro.Net.Mail.Pop3"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.Pop3MessageListProgressEventArgs"/> that contains the event data.</param>
            <example source="$ComponentPro.Mail\Pop3/Events/MessageListProgress"/>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3MessageListProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Mail.Pop3.MessageListProgress"/> event.
            </summary>
            <example source="$ComponentPro.Mail\Pop3/Events/MessageListProgress"/>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3MessageListProgressEventArgs.Total">
            <summary>
            Gets the total messages will be downloaded.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3MessageListProgressEventArgs.Downloaded">
            <summary>
            Gets the number of downloaded messages.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3MessageListProgressEventArgs.Percentage">
            <summary>
            Gets the current transfer progress percentage.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3ProgressEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.Mail.Pop3.Progress"/> event of a <see cref="T:ComponentPro.Net.Mail.Pop3"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.Pop3ProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3ProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Mail.Pop3.Progress"/> event.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3ProgressEventArgs.CalculatePercentage(System.Int64)">
            <summary>
            Calculates progression percentage of the data transfer.
            </summary>
            <param name="messageSize">The message size.</param>
            <returns></returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3ProgressEventArgs.State">
            <summary>
            Gets the transfer state.
            </summary>
            <value>The transfer state.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3ProgressEventArgs.BytesTransferred">
            <summary>
            Gets the total number of bytes transferred during the current transfer.
            </summary>
            <value>The number of bytes transferred.</value>
            <remarks>This value is valid only when <see cref="P:ComponentPro.Net.Mail.Pop3ProgressEventArgs.State"/> is not <see cref="P:ComponentPro.Net.Mail.Pop3ProgressEventArgs.State">None</see>.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3ProgressEventArgs.BytesSinceLastEvent">
            <summary>
            Gets the number of bytes transferred during the current transfer since the last time the event was raised.
            </summary>
            <value>The number of bytes transferred since the last time the event was raised.</value>
            <remarks>This value is valid only when <see cref="P:ComponentPro.Net.Mail.Pop3ProgressEventArgs.State"/> is not <see cref="P:ComponentPro.Net.Mail.Pop3ProgressEventArgs.State">None</see>.</remarks>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3Exception">
            <summary>
            The exception that is thrown when an error occurs while using the <see cref="T:ComponentPro.Net.Mail.Pop3"/> component.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3Exception.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.Pop3Exception"/> class.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message">Message</see> property of the new instance to a message that describes the general error.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3Exception.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.Pop3Exception"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3Exception.#ctor(System.String,ComponentPro.Net.Mail.MailClientExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.Pop3Exception"/> class with the specified error message and status.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus"/> values.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3Exception.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.Pop3Exception"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3Exception.#ctor(System.String,System.Exception,ComponentPro.Net.Mail.MailClientExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.Pop3Exception"/> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus"/> values.</param>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Exception.Status">
            <summary>
            Gets the status of the response.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.Mail.MailClientExceptionStatus"/> values.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3MailboxStat">
            <summary>
            Represents a POP3 mailbox. This class is used for the <see cref="M:ComponentPro.Net.Mail.Pop3.GetMailboxStat"/> method.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3MailboxStat.Size">
            <summary>
            Gets the size of the mailbox in bytes (the sum of lengths of all messages).
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3MailboxStat.MessageCount">
            <summary>
            Gets the number of messages in the mailbox.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3Message">
            <summary>
            Contains information about a single mail message on the POP3 server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.MessageInboxIndex">
            <summary>
            The ordinal position of the message in the inbox. It is greater than zero. 
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.Size">
            <summary>
            Gets the size of the message.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.UniqueId">
            <summary>
            Gets the unique ID of the message.
            </summary>
            <value>Unique ID.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.HeadersParsed">
            <summary>
            Gets the value indicating whether the message headers were parsed.
            </summary>
            <value>True if parsed; false if not.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.HeadersParsingError">
            <summary>
            Gets an error that occurred during message headers parsing.
            </summary>
            <value>An error that occurred during message headers parsing.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.Date">
            <summary>
            Gets the origination date of this message.
            </summary>
            <value>The origination date.</value>
            <remarks>
            The origination date specifies the date and time at which the creator
            of the message indicated that the message was complete and ready to enter
            the mail delivery system.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.From">
            <summary>
            Gets the list of authors of this message.
            </summary>
            <value>The list of authors.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.Sender">
            <summary>
            Gets the sender of this message. May be null.
            </summary>
            <value>The sender of this message.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.ReplyTo">
            <summary>
            Gets the list of addresses that should receive replies
            to this message.
            </summary>
            <value>The list of addresses that should receive replies.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.To">
            <summary>
            Gets the list of addresses of primary recipients of the message.
            </summary>
            <value>The list of primary recipients.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.Bcc">
            <summary>
            Gets the BCC (Blind Carbon Copy) list. It contains recipients that are not to be revealed to other recipients of the message.
            </summary>
            <value>The list of <see cref="T:ComponentPro.Net.Mail.MailAddress"/>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.CC">
            <summary>
            Gets the list of addresses of others who are to receive the message.
            </summary>
            <value>The list of other recipients.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.MessageIdentifier">
            <summary>
            Gets the unique identifier of the message.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.InReplyTo">
            <summary>
            Gets the list of identifiers of messages to which the message is a reply.
            </summary>
            <value>The list of message identifiers.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.Subject">
            <summary>
            Gets the subject of the message.
            </summary>
            <value>The subject.</value>
            <remarks>
            This property contains a short string identifying the topic
            of the message.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Message.Headers">
            <summary>
            Gets the list of headers of this entity.
            </summary>
            <value>The list of headers.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3MessageCollection">
            <summary>
            Provides a container for a collection of <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.</returns>
            <remarks>
            A shallow copy of a collection copies only the elements
            of the collection, whether they are reference types or value
            types, but it does not copy the objects that the references
            refer to. The references in the new collection point to the same
            objects that the references in the original collection point to.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>.</returns>
            <remarks>GetEnumerator is the method that implements the foreach statement (For Each in Visual Basic). You should not need to call this method directly.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Insert(System.Int32,ComponentPro.Net.Mail.Pop3Message)">
            <summary>
            Inserts the <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> at the specified position in the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the item is to be inserted.</param>
            <param name="item">The <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> to be inserted to the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Add(ComponentPro.Net.Mail.Pop3Message)">
            <summary>
            Adds the <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> to the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> to be added to the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Remove(ComponentPro.Net.Mail.Pop3Message)">
            <summary>
            Removes the specified <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> from the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> to remove from the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Remove(System.String)">
            <summary>
            Removes <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> from the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/> having specified unique id.
            </summary>
            <param name="uniqueId">Unique id of the <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> to remove from the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Remove(System.Int32)">
            <summary>
            Removes <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> from the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/> having specified sequence number.
            </summary>
            <param name="messageInboxIndex">Sequence number of the <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> to remove from the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> at the specified index from the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> to remove.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Find(System.String)">
            <summary>
            Returns the <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> of the specified unique id.
            </summary>
            <param name="uniqueId">The unique ID of the <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> to get.</param>
            <returns><see cref="T:ComponentPro.Net.Mail.Pop3Message"/> of the specified name.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Find(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> of the specified id.
            </summary>
            <param name="messageInboxIndex">The ID of the <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> to get.</param>
            <returns><see cref="T:ComponentPro.Net.Mail.Pop3Message"/> of the specified name.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Sort">
            <summary>
            Sorts the messages in the entire <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/> by sequence number ascending.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/> using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, or a null reference to sort by sequence number ascending.</param>
            <remarks>This method uses <see cref="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)"/>, which uses QuickSort algorithm. See its description for more information.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a section of <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, or a null reference to sort by sequence number ascending.</param>
            <remarks>This method uses <see cref="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)"/>, which uses QuickSort algorithm. See its description for more information.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.CopyTo(ComponentPro.Net.Mail.Pop3Message[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/> to a one-dimensional
            <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> array that is the destination of the elements copied from the collection.</param>
            <param name="arrayIndex">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.IndexOf(ComponentPro.Net.Mail.Pop3Message)">
            <summary>
            Returns a zero-based index of the specified item within the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>, or -1 if not found.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> to locate.</param>
            <returns>Zero-based index of the specified item within the collection, or -1.</returns>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageCollection.Contains(ComponentPro.Net.Mail.Pop3Message)">
            <summary>
            Determines whether the specified item is present in the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> to locate.</param>
            <returns>True if present, false otherwise.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3MessageCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3MessageCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:ComponentPro.Net.Mail.Pop3MessageCollection"/>.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3MessageCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> to get.</param>
            <value><see cref="T:ComponentPro.Net.Mail.Pop3Message"/> of the specified index.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3MessageCollection.System#Collections#Generic#ICollection{ComponentPro#Net#Mail#Pop3Message}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>True if read-only, false if read-write.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3MessageComparisonMethod">
            <summary>
            List of possible compare types for the Pop3MessageComparer class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3MessageComparisonMethod.MessageInboxIndex">
            <summary>
            Message inbox index.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3MessageComparisonMethod.OriginationDate">
            <summary>
            Origination date.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3MessageComparisonMethod.From">
            <summary>
            From.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3MessageComparisonMethod.To">
            <summary>
            To.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.Pop3MessageComparisonMethod.Subject">
            <summary>
            Subject.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3MessageComparer">
            <summary>
            Class used to compare <see cref="T:ComponentPro.Net.Mail.Pop3Message"/> objects. 
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageComparer.#ctor">
            <summary>
            Creates a new instance of Pop3MessageInfoComparer with default sorting by sequence number name and with ascending sort mode.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageComparer.#ctor(ComponentPro.Net.Mail.Pop3MessageComparisonMethod)">
            <summary>
            Creates a new instance of Pop3MessageInfoComparer with specified comparer type and ascending sort mode.
            </summary>
            <param name="comparerType">Type of comparer.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageComparer.#ctor(ComponentPro.Net.Mail.Pop3MessageComparisonMethod,System.Boolean)">
            <summary>
            Creates a new instance of Pop3MessageInfoComparer with specified comparer type and sort mode.
            </summary>
            <param name="comparerType">Type of comparer.</param>
            <param name="ascending">Sort order to use.</param>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3MessageComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer interface implementation. Compares two instances of Pop3MessageInfo.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>Value greater than zero when x is greater then y, zero when they are equal a or less than zero when x is lesser than y.</returns>
        </member>
        <member name="F:c_BVM.c_HD">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:c_BVM.c_WXG">
            <summary>
            Ignore unparsable headers when parsing mail message.
            </summary>
        </member>
        <member name="F:c_BVM.c_XXG">
            <summary>
            Ignore unparsable S/MIME signature entities when parsing mail message.
            </summary>
        </member>
        <member name="F:c_BVM.c_CVM">
            <summary>
            Throw an exception if duplicate unique ID is encountered by the GetMessageList method.
            This was default behavior until ComponentPro Mail 1.0.3333.0 (inclusive).
            </summary>
        </member>
        <member name="F:c_BVM.c_DVM">
            <summary>
            Ignore invalid endings before the actual end of message data.
            </summary>
        </member>
        <member name="F:c_BVM.c_DUM">
            <summary>
            Disables workaroud for non-standard behavior of Gmail's RETR command.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.Pop3Config">
            <summary>
            Specifies various POP3 settings.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Mail.Pop3Config.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of the current instance.</returns>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Config.AcceptInvalidHeaders">
            <summary>
            Indicates wherher to accept invalid/unparsable headers when parsing mail message.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Config.AcceptInvalidMime">
            <summary>
            Indicates wherher to accept invalid/unparsable S/MIME messages signature entities when parsing mail message.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Config.DontAllowDuplicateUniqueIds">
            <summary>
            Indicates whether to not allow duplicate unique ID and throw an exception while getting message list by the <see cref="O:ComponentPro.Net.Mail.Pop3.ListMessages"/> method.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Config.AcceptInvalidEndings">
            <summary>
            Indicates whether to accept invalid endings before the actual end of message data.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.Pop3Config.c_DUM">
            <summary>
            Disables workaroud for non-standard behavior of Gmail's RETR command.
            </summary>
        </member>
        <member name="M:c_ZSM.c_HOE">
            <summary>
            Closes the underlying socket.
            </summary>
        </member>
        <member name="M:c_ZSM.c_CWG(System.Int32@)">
            <summary>
            Reads a line from server (blocking until the server sends it).
            </summary>
            <remarks>
            If the server doesn't send anything at all in <see cref="T:System.Threading.Timeout"/>
            milliseconds, this method throws.</remarks>
            <returns>An array (never null) of at least 2 bytes ending with CR LF.
            </returns>
        </member>
        <member name="M:c_ZSM.c_BTM(System.Byte[])">
            <summary>
            Sends data to the connected server.
            </summary>
            <param name="line">The bytes to send (the array must be non-null
            and have a positive length).</param>
            <remarks>
            Callers wishing to end the line with CR LF
            must add the characters themselves.
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailClientState">
            <summary>
            Defines State of the <see cref="T:ComponentPro.Net.Mail.Imap"/>, <see cref="T:ComponentPro.Net.Mail.Pop3"/>, and <see cref="T:ComponentPro.Net.Mail.Smtp"/> objects.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientState.Disconnected">
            <summary>Client is not connected.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientState.Connecting">
            <summary>Connecting to server.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientState.Ready">
            <summary>Server is ready and awaiting commands.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientState.Sending">
            <summary>Sending command or data to the server.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientState.Reading">
            <summary>Waiting for response or receiving response or data.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientState.Disposed">
            <summary>Object is disposed and must not be used.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientState.Downloading">
            <summary>
            Receiving multiline response data. Available for <see cref="T:ComponentPro.Net.Mail.Pop3"/> object only.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientState.Pipelining">
            <summary>Pipelining. For <see cref="T:ComponentPro.Net.Mail.Smtp"/> object only.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientState.Processing">
            <summary>
            Received response is being processed. For <see cref="T:ComponentPro.Net.Mail.Smtp"/> object only.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailClientTransferState">
            <summary>
            Defines the mail client transfer state.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientTransferState.None">
            <summary>No transfer pending.</summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientTransferState.Downloading">
            <summary>
            Client is downloading data from server. Only for <see cref="T:ComponentPro.Net.Mail.Imap"/> and <see cref="T:ComponentPro.Net.Mail.Pop3"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientTransferState.Uploading">
            <summary>
            Client is uploading data to server. Only for <see cref="T:ComponentPro.Net.Mail.Imap"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Mail.MailClientTransferState.Sending">
            <summary>
            <see cref="T:ComponentPro.Net.Mail.Smtp"/> client is sending a message. Only for <see cref="T:ComponentPro.Net.Mail.Smtp"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailClientStateChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.Mail.Imap.StateChanged"/>, <see cref="E:ComponentPro.Net.Mail.Pop3.StateChanged"/>, and <see cref="E:ComponentPro.Net.Mail.Smtp.StateChanged"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.MailClientStateChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.Mail.MailClientStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Mail.Imap.StateChanged"/>, <see cref="E:ComponentPro.Net.Mail.Pop3.StateChanged"/>, and <see cref="E:ComponentPro.Net.Mail.Smtp.StateChanged"/>  events.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailClientStateChangedEventArgs.OldState">
            <summary>
            Gets the old state.
            </summary>
            <value>The state that was changed.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.MailClientStateChangedEventArgs.State">
            <summary>
            Gets the new state.
            </summary>
            <value>The new and current state.</value>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapProgressEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.Mail.Imap.Progress"/> event of an <see cref="T:ComponentPro.Net.Mail.Imap"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Mail.ImapProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.Mail.ImapProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Mail.Imap.Progress"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapProgressEventArgs.State">
            <summary>
            Gets the transfer state.
            </summary>
            <value>The transfer state.</value>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapProgressEventArgs.BytesTransferred">
            <summary>
            Gets the total number of bytes transferred during the current transfer.
            </summary>
            <value>The number of bytes transferred.</value>
            <remarks>This value is valid only when <see cref="P:ComponentPro.Net.Mail.ImapProgressEventArgs.State"/> is not <see cref="P:ComponentPro.Net.Mail.ImapProgressEventArgs.State">None</see>.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapProgressEventArgs.BytesSinceLastEvent">
            <summary>
            Gets the number of bytes transferred during the current transfer since the last time the event was raised.
            </summary>
            <value>The number of bytes transferred since the last time the event was raised.</value>
            <remarks>This value is valid only when <see cref="P:ComponentPro.Net.Mail.ImapProgressEventArgs.State"/> is not <see cref="P:ComponentPro.Net.Mail.ImapProgressEventArgs.State">None</see>.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapProgressEventArgs.Length">
            <summary>
            Gets the total number of bytes to be transferred during the current transfer.
            </summary>
            <value>The total number of bytes to be transferred during the current transfer.</value>
            <remarks>This value is valid only when <see cref="P:ComponentPro.Net.Mail.ImapProgressEventArgs.State"/> is not <see cref="P:ComponentPro.Net.Mail.ImapProgressEventArgs.State">None</see>.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Mail.ImapProgressEventArgs.Percentage">
            <summary>
            Gets the current transfer progress percentage.
            </summary>
        </member>
    </members>
</doc>
